{
  "version": 3,
  "sources": ["../../../../../node_modules/semaphore-async-await/dist/Semaphore.js", "../../../../../node_modules/semaphore-async-await/dist/Lock.js", "../../../../../node_modules/semaphore-async-await/dist/index.js", "../../../../../node_modules/reflect-metadata/Reflect.js", "../../../../../node_modules/@sensenet/client-utils/src/inject/injector.ts", "../../../../../node_modules/@sensenet/client-utils/src/inject/injectable.ts", "../../../../../node_modules/@sensenet/client-utils/src/logger/abstract-logger.ts", "../../../../../node_modules/@sensenet/client-utils/src/logger/colors.ts", "../../../../../node_modules/@sensenet/client-utils/src/logger/console-logger.ts", "../../../../../node_modules/@sensenet/client-utils/src/logger/log-entries.ts", "../../../../../node_modules/@sensenet/client-utils/src/logger/logger-collection.ts", "../../../../../node_modules/@sensenet/client-utils/src/value-observer.ts", "../../../../../node_modules/@sensenet/client-utils/src/observable-value.ts", "../../../../../node_modules/@sensenet/client-utils/src/logger/notification-service.ts", "../../../../../node_modules/@sensenet/client-utils/src/logger/notification-logger.ts", "../../../../../node_modules/@sensenet/client-utils/src/filter-async.ts", "../../../../../node_modules/@sensenet/client-utils/src/path-helper.ts", "../../../../../node_modules/@sensenet/client-utils/src/retrier-options.ts", "../../../../../node_modules/@sensenet/client-utils/src/trace.ts", "../../../../../node_modules/@sensenet/client-core/src/Repository/ConstantContent.ts", "../../../../../node_modules/@sensenet/client-core/src/Authentication/LoginState.ts", "../../../../../node_modules/@sensenet/client-core/src/Authentication/BypassAuthentication.ts", "../../../../../node_modules/@sensenet/client-core/src/Authentication/FormsAuthenticationService.ts", "../../../../../node_modules/@sensenet/client-core/src/Repository/ODataUrlBuilder.ts", "../../../../../node_modules/@sensenet/client-core/src/Schemas/SchemaStore.ts", "../../../../../node_modules/@sensenet/client-core/src/Repository/AllowedChildTypes.ts", "../../../../../node_modules/@sensenet/client-core/src/Repository/Preview.ts", "../../../../../node_modules/@sensenet/default-content-types/src/FieldSettings.ts", "../../../../../node_modules/@sensenet/default-content-types/src/DefaultSchemas.ts", "../../../../../node_modules/@sensenet/default-content-types/src/Enums.ts", "../../../../../node_modules/@sensenet/default-content-types/src/Security.ts", "../../../../../node_modules/@sensenet/client-core/src/Repository/RepositoryConfiguration.ts", "../../../../../node_modules/@sensenet/client-core/src/Repository/Security.ts", "../../../../../node_modules/uuid/dist/esm-browser/rng.js", "../../../../../node_modules/uuid/dist/esm-browser/regex.js", "../../../../../node_modules/uuid/dist/esm-browser/validate.js", "../../../../../node_modules/uuid/dist/esm-browser/stringify.js", "../../../../../node_modules/uuid/dist/esm-browser/v1.js", "../../../../../node_modules/uuid/dist/esm-browser/parse.js", "../../../../../node_modules/uuid/dist/esm-browser/v35.js", "../../../../../node_modules/uuid/dist/esm-browser/md5.js", "../../../../../node_modules/uuid/dist/esm-browser/v3.js", "../../../../../node_modules/uuid/dist/esm-browser/sha1.js", "../../../../../node_modules/uuid/dist/esm-browser/v5.js", "../../../../../node_modules/@sensenet/client-core/src/Repository/Upload.ts", "../../../../../node_modules/@sensenet/client-core/src/Repository/Versioning.ts", "../../../../../node_modules/@sensenet/client-core/src/Repository/Repository.ts", "../../../../../node_modules/@sensenet/client-core/src/Models/RequestOptions.ts"],
  "sourcesContent": ["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;\n    return { next: verb(0), \"throw\": verb(1), \"return\": verb(2) };\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nexports.__esModule = true;\n/** Class representing a semaphore\n * Semaphores are initialized with a number of permits that get aquired and released\n * over the lifecycle of the Semaphore. These permits limit the number of simultaneous\n * executions of the code that the Semaphore synchronizes. Functions can wait and stop\n * executing until a permit becomes available.\n *\n * Locks that only allow one execution of a critical section are a special case of\n * Semaphores. To construct a lock, initialize a Semaphore with a permit count of 1.\n *\n * This Semaphore class is implemented with the help of promises that get returned\n * by functions that wait for permits to become available. This makes it possible\n * to use async/await to synchronize your code.\n */\nvar Semaphore = (function () {\n    /**\n     * Creates a semaphore.\n     * @param permits  The number of permits, i.e. things being allowed to run in parallel.\n     * To create a lock that only lets one thing run at a time, set this to 1.\n     * This number can also be negative.\n     */\n    function Semaphore(permits) {\n        this.promiseResolverQueue = [];\n        this.permits = permits;\n    }\n    /**\n     * Returns the number of available permits.\n     * @returns  The number of available permits.\n     */\n    Semaphore.prototype.getPermits = function () {\n        return this.permits;\n    };\n    /**\n     * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n     * @returns  A promise that gets resolved when execution is allowed to proceed.\n     */\n    Semaphore.prototype.wait = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.permits > 0) {\n                    this.permits -= 1;\n                    return [2 /*return*/, Promise.resolve(true)];\n                }\n                // If there is no permit available, we return a promise that resolves once the semaphore gets\n                // signaled enough times that permits is equal to one.\n                return [2 /*return*/, new Promise(function (resolver) { return _this.promiseResolverQueue.push(resolver); })];\n            });\n        });\n    };\n    /**\n     * Alias for {@linkcode Semaphore.wait}.\n     * @returns  A promise that gets resolved when execution is allowed to proceed.\n     */\n    Semaphore.prototype.acquire = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.wait()];\n            });\n        });\n    };\n    /**\n     * Same as {@linkcode Semaphore.wait} except the promise returned gets resolved with false if no\n     * permit becomes available in time.\n     * @param milliseconds  The time spent waiting before the wait is aborted. This is a lower bound,\n     * don't rely on it being precise.\n     * @returns  A promise that gets resolved with true when execution is allowed to proceed or\n     * false if the time given elapses before a permit becomes available.\n     */\n    Semaphore.prototype.waitFor = function (milliseconds) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var resolver, promise;\n            return __generator(this, function (_a) {\n                if (this.permits > 0) {\n                    this.permits -= 1;\n                    return [2 /*return*/, Promise.resolve(true)];\n                }\n                resolver = function (b) { return void (0); };\n                promise = new Promise(function (r) {\n                    resolver = r;\n                });\n                // The saved resolver gets added to our list of promise resolvers so that it gets a chance\n                // to be resolved as a result of a call to signal().\n                this.promiseResolverQueue.push(resolver);\n                setTimeout(function () {\n                    // We have to remove the promise resolver from our list. Resolving it twice would not be\n                    // an issue but signal() always takes the next resolver from the queue and resolves it which\n                    // would swallow a permit if we didn't remove it.\n                    var index = _this.promiseResolverQueue.indexOf(resolver);\n                    if (index !== -1) {\n                        _this.promiseResolverQueue.splice(index, 1);\n                    }\n                    else {\n                        // This is weird... TODO Think about what the best course of action would be at this point.\n                        // Probably do nothing.\n                    }\n                    // false because the wait was unsuccessful.\n                    resolver(false);\n                }, milliseconds);\n                return [2 /*return*/, promise];\n            });\n        });\n    };\n    /**\n     * Synchronous function that tries to acquire a permit and returns true if successful, false otherwise.\n     * @returns  Whether a permit could be acquired.\n     */\n    Semaphore.prototype.tryAcquire = function () {\n        if (this.permits > 0) {\n            this.permits -= 1;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Acquires all permits that are currently available and returns the number of acquired permits.\n     * @returns  Number of acquired permits.\n     */\n    Semaphore.prototype.drainPermits = function () {\n        if (this.permits > 0) {\n            var permitCount = this.permits;\n            this.permits = 0;\n            return permitCount;\n        }\n        return 0;\n    };\n    /**\n     * Increases the number of permits by one. If there are other functions waiting, one of them will\n     * continue to execute in a future iteration of the event loop.\n     */\n    Semaphore.prototype.signal = function () {\n        this.permits += 1;\n        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n            throw new Error('this.permits should never be > 0 when there is someone waiting.');\n        }\n        else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n            // If there is someone else waiting, immediately consume the permit that was released\n            // at the beginning of this function and let the waiting function resume.\n            this.permits -= 1;\n            var nextResolver = this.promiseResolverQueue.shift();\n            if (nextResolver) {\n                nextResolver(true);\n            }\n        }\n    };\n    /**\n     * Alias for {@linkcode Semaphore.signal}.\n     */\n    Semaphore.prototype.release = function () {\n        this.signal();\n    };\n    /**\n     * Schedules func to be called once a permit becomes available.\n     * Returns a promise that resolves to the return value of func.\n     * @typeparam T  The return type of func.\n     * @param func  The function to be executed.\n     * @return  A promise that gets resolved with the return value of the function.\n     */\n    Semaphore.prototype.execute = function (func) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.wait()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, , 4, 5]);\n                        return [4 /*yield*/, func()];\n                    case 3: return [2 /*return*/, _a.sent()];\n                    case 4:\n                        this.signal();\n                        return [7 /*endfinally*/];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return Semaphore;\n}());\nexports[\"default\"] = Semaphore;\n", "\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar Semaphore_1 = require(\"./Semaphore\");\n/**\n * A lock that can be used to synchronize critical sections in your code.\n * For more details on how to use this class, please view the documentation\n * of the Semaphore class from which Lock inherits.\n */\nvar Lock = (function (_super) {\n    __extends(Lock, _super);\n    /**\n     * Creates a lock.\n     */\n    function Lock() {\n        return _super.call(this, 1) || this;\n    }\n    return Lock;\n}(Semaphore_1[\"default\"]));\nexports.Lock = Lock;\n", "\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nexports.__esModule = true;\nvar Semaphore_1 = require(\"./Semaphore\");\nexports[\"default\"] = Semaphore_1[\"default\"];\n__export(require(\"./Lock\"));\n", "/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process[\"env\" + \"\"] && process[\"env\" + \"\"][\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n", "import { Disposable } from '../disposable'\r\nimport { Logger, LoggerCollection } from '../index'\r\nimport { Constructable } from './constructable'\r\nimport { defaultInjectableOptions } from './injectable'\r\n\r\n/**\r\n * Container for injectable instances\r\n */\r\nexport class Injector implements Disposable {\r\n  /**\r\n   * Returns the registered Logger instance\r\n   */\r\n  public get logger(): LoggerCollection {\r\n    return this.getInstance(LoggerCollection)\r\n  }\r\n\r\n  /**\r\n   * Registers a Logger service to the injector container with the provided loggers.\r\n   */\r\n  public useLogging(...loggers: Array<Constructable<Logger>>) {\r\n    const loggerInstances = loggers.map((l) => this.getInstance(l))\r\n    const collection = this.getInstance(LoggerCollection)\r\n    collection.attachLogger(...loggerInstances)\r\n    this.setExplicitInstance(collection, LoggerCollection)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Disposes the Injector object and all its disposable injectables\r\n   */\r\n  public async dispose() {\r\n    /** */\r\n    const singletons = Array.from(this.cachedSingletons.entries()).map((e) => e[1])\r\n    const disposeRequests = singletons\r\n      .filter((s) => s !== this)\r\n      .map(async (s) => {\r\n        if (s.dispose) {\r\n          return s.dispose() || Promise.resolve()\r\n        }\r\n      })\r\n    await Promise.all(disposeRequests)\r\n    this.cachedSingletons.clear()\r\n  }\r\n\r\n  /**\r\n   * Options object for an injector instance\r\n   */\r\n  public options: { parent?: Injector; owner?: any } = {}\r\n\r\n  /**\r\n   * Static class metadata map, filled by the @Injectable() decorator\r\n   */\r\n  public static meta: Map<\r\n    Constructable<any>,\r\n    {\r\n      dependencies: Array<Constructable<any>>\r\n      options: import('./injectable').InjectableOptions\r\n    }\r\n  > = new Map()\r\n\r\n  public readonly cachedSingletons: Map<Constructable<any>, any> = new Map()\r\n\r\n  public remove = <T>(ctor: Constructable<T>) => this.cachedSingletons.delete(ctor)\r\n\r\n  /**\r\n   *\r\n   * @param ctor The constructor object (e.g. MyClass)\r\n   * @param dependencies Resolved dependencies (usually provided by the framework)\r\n   */\r\n  public getInstance<T>(ctor: Constructable<T>, dependencies: Array<Constructable<T>> = []): T {\r\n    if (ctor === this.constructor) {\r\n      return this as unknown as T\r\n    }\r\n    const meta = Injector.meta.get(ctor)\r\n    if (!meta) {\r\n      throw Error(\r\n        `No metadata found for '${ctor.name}'. Dependencies: ${dependencies\r\n          .map((d) => d.name)\r\n          .join(',')}. Be sure that it's decorated with '@Injectable()' or added explicitly with SetInstance()`,\r\n      )\r\n    }\r\n    if (dependencies.includes(ctor)) {\r\n      throw Error(`Circular dependencies found.`)\r\n    }\r\n\r\n    if (meta.options.lifetime === 'singleton') {\r\n      const invalidDeps = meta.dependencies\r\n        .map((dep) => ({ meta: Injector.meta.get(dep), dep }))\r\n        .filter((m) => m.meta && (m.meta.options.lifetime === 'scoped' || m.meta.options.lifetime === 'transient'))\r\n        .map((i) => i.meta && `${i.dep.name}:${i.meta.options.lifetime}`)\r\n      if (invalidDeps.length) {\r\n        throw Error(\r\n          `Injector error: Singleton type '${ctor.name}' depends on non-singleton injectables: ${invalidDeps.join(\r\n            ',',\r\n          )}`,\r\n        )\r\n      }\r\n    } else if (meta.options.lifetime === 'scoped') {\r\n      const invalidDeps = meta.dependencies\r\n        .map((dep) => ({ meta: Injector.meta.get(dep), dep }))\r\n        .filter((m) => m.meta && m.meta.options.lifetime === 'transient')\r\n        .map((i) => i.meta && `${i.dep.name}:${i.meta.options.lifetime}`)\r\n      if (invalidDeps.length) {\r\n        throw Error(\r\n          `Injector error: Scoped type '${ctor.name}' depends on transient injectables: ${invalidDeps.join(',')}`,\r\n        )\r\n      }\r\n    }\r\n\r\n    if (meta.options.lifetime !== 'transient' && this.cachedSingletons.has(ctor)) {\r\n      return this.cachedSingletons.get(ctor) as T\r\n    }\r\n    const fromParent =\r\n      meta.options.lifetime === 'singleton' && this.options.parent && this.options.parent.getInstance(ctor)\r\n    if (fromParent) {\r\n      return fromParent\r\n    }\r\n    const deps = meta.dependencies.map((dep) => this.getInstance(dep, [...dependencies, ctor]))\r\n    const newInstance = new ctor(...deps)\r\n    this.setExplicitInstance(newInstance)\r\n    return newInstance\r\n  }\r\n\r\n  /**\r\n   * Sets explicitliy an instance for a key in the store\r\n   * @param instance The created instance\r\n   * @param key The class key to be persisted (optional, calls back to the instance's constructor)\r\n   */\r\n  public setExplicitInstance<T extends object>(instance: T, key?: Constructable<any>) {\r\n    const ctor = key || (instance.constructor as Constructable<T>)\r\n    if (!Injector.meta.has(ctor)) {\r\n      const meta = Reflect.getMetadata('design:paramtypes', ctor)\r\n      Injector.meta.set(ctor, {\r\n        dependencies:\r\n          (meta &&\r\n            (meta as any[]).map((param) => {\r\n              return param\r\n            })) ||\r\n          [],\r\n        options: { ...defaultInjectableOptions, lifetime: 'explicit' as any },\r\n      })\r\n    }\r\n    if (instance.constructor === this.constructor) {\r\n      throw Error('Cannot set an injector instance as injectable')\r\n    }\r\n    this.cachedSingletons.set(ctor, instance)\r\n  }\r\n\r\n  /**\r\n   * Creates a child injector instance\r\n   * @param options Additional injector options\r\n   */\r\n  public createChild(options?: Partial<Injector['options']>) {\r\n    const i = new Injector()\r\n    i.options = i.options || options\r\n    i.options.parent = this\r\n    return i\r\n  }\r\n}\r\n", "import 'reflect-metadata'\r\nimport { Constructable } from './constructable'\r\nimport { Injector } from './injector'\r\n\r\n/**\r\n * Options for the injectable instance\r\n */\r\nexport interface InjectableOptions {\r\n  lifetime: 'transient' | 'singleton' | 'scoped'\r\n}\r\n\r\n/**\r\n * The default options for the injectable classes\r\n */\r\nexport const defaultInjectableOptions: InjectableOptions = {\r\n  lifetime: 'transient',\r\n}\r\n\r\n/**\r\n * Decorator method for tagging a class as injectable\r\n * @param options The options object\r\n */\r\nexport const Injectable = (options?: Partial<InjectableOptions>) => {\r\n  return <T extends Constructable<any>>(ctor: T) => {\r\n    const meta = Reflect.getMetadata('design:paramtypes', ctor)\r\n    const metaValue = {\r\n      dependencies:\r\n        (meta &&\r\n          (meta as any[]).map((param) => {\r\n            return param\r\n          })) ||\r\n        [],\r\n      options: { ...defaultInjectableOptions, ...options },\r\n    }\r\n    Injector.meta.set(ctor, metaValue)\r\n  }\r\n}\r\n", "import { LeveledLogEntry, LeveledLogEntryWithoutScope, LogEntry, LogEntryWithoutScope, Logger, LogLevel } from '.'\r\n\r\n/**\r\n * Default scope key for the Abstract Logger\r\n */\r\nexport const AbstractLoggerScope = '@sensenet/client-utils/AbstractLogger'\r\n\r\n/**\r\n * Abstract logger instance\r\n */\r\nexport abstract class AbstractLogger implements Logger {\r\n  /**\r\n   * Adds a new log entry to the logger\r\n   * @param entry The Log entry object\r\n   */\r\n  public abstract addEntry<T>(entry: LeveledLogEntry<T>, isVerbose?: boolean): Promise<void>\r\n\r\n  private async addEntryInternal<T>(entry: LeveledLogEntry<T>, isVerbose?: boolean) {\r\n    try {\r\n      await this.addEntry(entry, isVerbose)\r\n    } catch (error) {\r\n      this.error({\r\n        scope: AbstractLoggerScope,\r\n        message: 'There was an error adding entry to the log',\r\n        data: {\r\n          entry,\r\n          error,\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a Verbose level log entry. Verbose is the noisiest level, rarely (if ever) enabled for a production app.\r\n   * @param entry The Log entry\r\n   */\r\n  public async verbose<T>(entry: LogEntry<T>) {\r\n    await this.addEntryInternal(\r\n      {\r\n        ...entry,\r\n        level: LogLevel.Verbose,\r\n      },\r\n      true,\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Adds a Debug level log entry. Debug is used for internal system events that are not necessarily observable from the outside, but useful when determining how something happened.\r\n   * @param entry  The Log entry\r\n   */\r\n  public async debug<T>(entry: LogEntry<T>) {\r\n    await this.addEntryInternal({\r\n      ...entry,\r\n      level: LogLevel.Debug,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Adds an Information level log entry. Information events describe things happening in the system that correspond to its responsibilities and functions. Generally these are the observable actions the system can perform.\r\n   * @param entry  The Log entry\r\n   */\r\n  public async information<T>(entry: LogEntry<T>) {\r\n    await this.addEntryInternal({\r\n      ...entry,\r\n      level: LogLevel.Information,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Adds a Warning level log entry. When service is degraded, endangered, or may be behaving outside of its expected parameters, Warning level events are used.\r\n   * @param entry  The Log entry\r\n   */\r\n  public async warning<T>(entry: LogEntry<T>) {\r\n    await this.addEntryInternal({\r\n      ...entry,\r\n      level: LogLevel.Warning,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Adds an Error level log entry. When functionality is unavailable or expectations broken, an Error event is used.\r\n   * @param entry  The Log entry\r\n   */\r\n  public async error<T>(entry: LogEntry<T>) {\r\n    try {\r\n      await this.addEntry({\r\n        ...entry,\r\n        level: LogLevel.Error,\r\n      })\r\n    } catch (error) {\r\n      await this.fatal({\r\n        scope: AbstractLoggerScope,\r\n        message:\r\n          'There was an error persisting an Error event in the log and therefore the event was elevated to Fatal level.',\r\n        data: {\r\n          originalEntry: entry,\r\n          error,\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a Fatal level log entry. The most critical level, Fatal events demand immediate attention.\r\n   * @param entry  The Log entry\r\n   */\r\n  public async fatal<T>(entry: LogEntry<T>) {\r\n    await this.addEntry({\r\n      ...entry,\r\n      level: LogLevel.Fatal,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns an object that contains shortcuts to the original logger that contains the provided scope.\r\n   * usage example:\r\n   * ```ts\r\n   *  const scopedLogger = myLogger.withScope(\"myLogScope\")\r\n   *  scopedLogger.information({message: \"foo\"}) // will add an information entry with the provided scope\r\n   * ```\r\n   */\r\n\r\n  public withScope = (scope: string) => ({\r\n    /**\r\n     * Adds a custom log entry\r\n     */\r\n    addEntry: <T>(entry: LeveledLogEntryWithoutScope<T>) => this.addEntry<T>({ scope, ...entry }),\r\n\r\n    /**\r\n     * Adds a Verbose log entry. Verbose is the noisiest level, rarely (if ever) enabled for a production app.\r\n     */\r\n    verbose: <T>(entry: LogEntryWithoutScope<T>) => this.verbose({ scope, ...entry }),\r\n\r\n    /**\r\n     * Adds a debug log entry. Debug is used for internal system events that are not necessarily observable from the outside, but useful when determining how something happened.\r\n     */\r\n    debug: <T>(entry: LogEntryWithoutScope<T>) => this.debug({ scope, ...entry }),\r\n\r\n    /**\r\n     * Adds an Information log entry. Information events describe things happening in the system that correspond to its responsibilities and functions. Generally these are the observable actions the system can perform.\r\n     */\r\n    information: <T>(entry: LogEntryWithoutScope<T>) => this.information({ scope, ...entry }),\r\n\r\n    /**\r\n     * Adds a Warning log entry. When service is degraded, endangered, or may be behaving outside of its expected parameters, Warning level events are used.\r\n     */\r\n    warning: <T>(entry: LogEntryWithoutScope<T>) => this.warning({ scope, ...entry }),\r\n\r\n    /**\r\n     * Adds an Error log entry. When functionality is unavailable or expectations broken, an Error event is used.\r\n     */\r\n    error: <T>(entry: LogEntryWithoutScope<T>) => this.error({ scope, ...entry }),\r\n\r\n    /**\r\n     * Adds a Fatal log entry. The most critical level, Fatal events demand immediate attention.\r\n     */\r\n    fatal: <T>(entry: LogEntryWithoutScope<T>) => this.fatal({ scope, ...entry }),\r\n  })\r\n}\r\n", "export const colors = {\r\n  aliceblue: 'aliceblue',\r\n  antiquewhite: 'antiquewhite',\r\n  aqua: 'aqua',\r\n  aquamarine: 'aquamarine',\r\n  azure: 'azure',\r\n  beige: 'beige',\r\n  bisque: 'bisque',\r\n  black: 'black',\r\n  blanchedalmond: 'blanchedalmond',\r\n  blue: 'blue',\r\n  blueviolet: 'blueviolet',\r\n  brown: 'brown',\r\n  burlywood: 'burlywood',\r\n  cadetblue: 'cadetblue',\r\n  chartreuse: 'chartreuse',\r\n  chocolate: 'chocolate',\r\n  coral: 'coral',\r\n  cornflowerblue: 'cornflowerblue',\r\n  cornsilk: 'cornsilk',\r\n  crimson: 'crimson',\r\n  cyan: 'cyan',\r\n  darkblue: 'darkblue',\r\n  darkcyan: 'darkcyan',\r\n  darkgoldenrod: 'darkgoldenrod',\r\n  darkgray: 'darkgray',\r\n  darkgreen: 'darkgreen',\r\n  darkgrey: 'darkgrey',\r\n  darkkhaki: 'darkkhaki',\r\n  darkmagenta: 'darkmagenta',\r\n  darkolivegreen: 'darkolivegreen',\r\n  darkorange: 'darkorange',\r\n  darkorchid: 'darkorchid',\r\n  darkred: 'darkred',\r\n  darksalmon: 'darksalmon',\r\n  darkseagreen: 'darkseagreen',\r\n  darkslateblue: 'darkslateblue',\r\n  darkslategray: 'darkslategray',\r\n  darkslategrey: 'darkslategrey',\r\n  darkturquoise: 'darkturquoise',\r\n  darkviolet: 'darkviolet',\r\n  deeppink: 'deeppink',\r\n  deepskyblue: 'deepskyblue',\r\n  dimgray: 'dimgray',\r\n  dimgrey: 'dimgrey',\r\n  dodgerblue: 'dodgerblue',\r\n  firebrick: 'firebrick',\r\n  floralwhite: 'floralwhite',\r\n  forestgreen: 'forestgreen',\r\n  fuchsia: 'fuchsia',\r\n  gainsboro: 'gainsboro',\r\n  ghostwhite: 'ghostwhite',\r\n  gold: 'gold',\r\n  goldenrod: 'goldenrod',\r\n  gray: 'gray',\r\n  green: 'green',\r\n  greenyellow: 'greenyellow',\r\n  grey: 'grey',\r\n  honeydew: 'honeydew',\r\n  hotpink: 'hotpink',\r\n  indianred: 'indianred',\r\n  indigo: 'indigo',\r\n  ivory: 'ivory',\r\n  khaki: 'khaki',\r\n  lavender: 'lavender',\r\n  lavenderblush: 'lavenderblush',\r\n  lawngreen: 'lawngreen',\r\n  lemonchiffon: 'lemonchiffon',\r\n  lightblue: 'lightblue',\r\n  lightcoral: 'lightcoral',\r\n  lightcyan: 'lightcyan',\r\n  lightgoldenrodyellow: 'lightgoldenrodyellow',\r\n  lightgray: 'lightgray',\r\n  lightgreen: 'lightgreen',\r\n  lightgrey: 'lightgrey',\r\n  lightpink: 'lightpink',\r\n  lightsalmon: 'lightsalmon',\r\n  lightseagreen: 'lightseagreen',\r\n  lightskyblue: 'lightskyblue',\r\n  lightslategray: 'lightslategray',\r\n  lightslategrey: 'lightslategrey',\r\n  lightsteelblue: 'lightsteelblue',\r\n  lightyellow: 'lightyellow',\r\n  lime: 'lime',\r\n  limegreen: 'limegreen',\r\n  linen: 'linen',\r\n  magenta: 'magenta',\r\n  maroon: 'maroon',\r\n  mediumaquamarine: 'mediumaquamarine',\r\n  mediumblue: 'mediumblue',\r\n  mediumorchid: 'mediumorchid',\r\n  mediumpurple: 'mediumpurple',\r\n  mediumseagreen: 'mediumseagreen',\r\n  mediumslateblue: 'mediumslateblue',\r\n  mediumspringgreen: 'mediumspringgreen',\r\n  mediumturquoise: 'mediumturquoise',\r\n  mediumvioletred: 'mediumvioletred',\r\n  midnightblue: 'midnightblue',\r\n  mintcream: 'mintcream',\r\n  mistyrose: 'mistyrose',\r\n  moccasin: 'moccasin',\r\n  navajowhite: 'navajowhite',\r\n  navy: 'navy',\r\n  oldlace: 'oldlace',\r\n  olive: 'olive',\r\n  olivedrab: 'olivedrab',\r\n  orange: 'orange',\r\n  orangered: 'orangered',\r\n  orchid: 'orchid',\r\n  palegoldenrod: 'palegoldenrod',\r\n  palegreen: 'palegreen',\r\n  paleturquoise: 'paleturquoise',\r\n  palevioletred: 'palevioletred',\r\n  papayawhip: 'papayawhip',\r\n  peachpuff: 'peachpuff',\r\n  peru: 'peru',\r\n  pink: 'pink',\r\n  plum: 'plum',\r\n  powderblue: 'powderblue',\r\n  purple: 'purple',\r\n  red: 'red',\r\n  rosybrown: 'rosybrown',\r\n  royalblue: 'royalblue',\r\n  saddlebrown: 'saddlebrown',\r\n  salmon: 'salmon',\r\n  sandybrown: 'sandybrown',\r\n  seagreen: 'seagreen',\r\n  seashell: 'seashell',\r\n  sienna: 'sienna',\r\n  silver: 'silver',\r\n  skyblue: 'skyblue',\r\n  slateblue: 'slateblue',\r\n  slategray: 'slategray',\r\n  slategrey: 'slategrey',\r\n  snow: 'snow',\r\n  springgreen: 'springgreen',\r\n  steelblue: 'steelblue',\r\n  tan: 'tan',\r\n  teal: 'teal',\r\n  thistle: 'thistle',\r\n  tomato: 'tomato',\r\n  turquoise: 'turquoise',\r\n  violet: 'violet',\r\n  wheat: 'wheat',\r\n  white: 'white',\r\n  whitesmoke: 'whitesmoke',\r\n  yellow: 'yellow',\r\n  yellowgreen: 'yellowgreen',\r\n}\r\n", "import { Injectable } from '../inject'\r\nimport { AbstractLogger, colors, LeveledLogEntry, LogLevel } from '.'\r\n\r\n/**\r\n * Resets the console color\r\n */\r\nexport const Reset = '\\x1b[0m'\r\n\r\n/**\r\n * Black console foreground color\r\n */\r\n\r\nexport const FgBlack = '\\x1b[30m'\r\n\r\n/**\r\n * Red console foreground color\r\n */\r\nexport const FgRed = '\\x1b[31m'\r\n\r\n/**\r\n * Green console foreground color\r\n */\r\nexport const FgGreen = '\\x1b[32m'\r\n\r\n/**\r\n * Yellow console foreground color\r\n */\r\nexport const FgYellow = '\\x1b[33m'\r\n\r\n/**\r\n * Blue console foreground color\r\n */\r\nexport const FgBlue = '\\x1b[34m'\r\n\r\n/**\r\n * Magentaa console foreground color\r\n */\r\nexport const FgMagenta = '\\x1b[35m'\r\n\r\n/**\r\n * Cyan console foreground color\r\n */\r\nexport const FgCyan = '\\x1b[36m'\r\n\r\n/**\r\n * White console foreground color\r\n */\r\nexport const FgWhite = '\\x1b[37m'\r\n\r\n/**\r\n * Returns an associated color to a specific log level\r\n */\r\nexport const getLevelColor = (level: LogLevel, isBrowser = false) => {\r\n  let color: string\r\n  switch (level) {\r\n    case LogLevel.Verbose:\r\n      color = isBrowser ? colors.darkblue : FgBlue\r\n      break\r\n    case LogLevel.Debug:\r\n      color = isBrowser ? colors.darkblue : FgBlue\r\n      break\r\n    case LogLevel.Information:\r\n      color = isBrowser ? colors.darkgreen : FgGreen\r\n      break\r\n    case LogLevel.Warning:\r\n      color = isBrowser ? colors.darkorange : FgYellow\r\n      break\r\n    case LogLevel.Error:\r\n      color = isBrowser ? colors.darkred : FgRed\r\n      break\r\n    default:\r\n      color = isBrowser ? colors.darkred : FgRed\r\n      break\r\n  }\r\n\r\n  return color\r\n}\r\n\r\n/**\r\n * The default formatter for the Console logger\r\n * @param entry the log entry to be formatted\r\n */\r\nexport const defaultFormatter = <T>(entry: LeveledLogEntry<T>, isVerbose: boolean) => {\r\n  const fontColor = getLevelColor(entry.level)\r\n  const formattedEntry = [`${fontColor}%s${Reset}`, entry.scope, entry.message]\r\n  return entry.data && isVerbose ? [...formattedEntry, entry.data] : formattedEntry\r\n}\r\n\r\n/**\r\n * The formatter for browsers like Firefox, Chrome\r\n * @param entry the log entry to be formatted\r\n */\r\nexport const browserFormatter = <T>({ level, message, data, scope }: LeveledLogEntry<T>) => {\r\n  if (!scope) {\r\n    return data ? [message, data] : [message]\r\n  }\r\n  const fontColor = getLevelColor(level, true)\r\n  const formattedEntry = [`%c[${scope}]:`, `color: ${fontColor}`, message]\r\n  return data ? [...formattedEntry, data] : formattedEntry\r\n}\r\n\r\n/**\r\n * A logger implementation that dumps log messages to the console\r\n */\r\n@Injectable({ lifetime: 'scoped' })\r\nexport class ConsoleLogger extends AbstractLogger {\r\n  public async addEntry<T>(entry: LeveledLogEntry<T>, isVerbose = false) {\r\n    const data = defaultFormatter(entry, isVerbose)\r\n\r\n    console.log(...data)\r\n  }\r\n}\r\n\r\n@Injectable({ lifetime: 'scoped' })\r\nexport class BrowserConsoleLogger extends AbstractLogger {\r\n  public async addEntry<T>(entry: LeveledLogEntry<T>) {\r\n    const data = browserFormatter(entry)\r\n\r\n    console.log(...data)\r\n  }\r\n}\r\n", "/**\r\n * The verbosity level of a log entry\r\n */\r\nexport enum LogLevel {\r\n  /**\r\n   * Verbose is the noisiest level, rarely (if ever) enabled for a production app.\r\n   */\r\n  Verbose = 0,\r\n\r\n  /**\r\n   * Debug is used for internal system events that are not necessarily observable from the outside, but useful when determining how something happened.\r\n   */\r\n  Debug = 1,\r\n\r\n  /**\r\n   * Information events describe things happening in the system that correspond to its responsibilities and functions. Generally these are the observable actions the system can perform.\r\n   */\r\n  Information = 2,\r\n\r\n  /**\r\n   * When service is degraded, endangered, or may be behaving outside of its expected parameters, Warning level events are used.\r\n   */\r\n  Warning = 3,\r\n\r\n  /**\r\n   * When functionality is unavailable or expectations broken, an Error event is used.\r\n   */\r\n  Error = 4,\r\n\r\n  /**\r\n   * The most critical level, Fatal events demand immediate attention.\r\n   */\r\n  Fatal = 5,\r\n}\r\n\r\n/**\r\n * A log entry representation\r\n */\r\nexport interface LogEntry<TData> {\r\n  /**\r\n   * A well-defined scope for grouping entries, e.g. a component or service name.\r\n   */\r\n  scope?: string\r\n\r\n  /**\r\n   * The message string\r\n   */\r\n  message: string\r\n\r\n  /**\r\n   * Additional entry data\r\n   */\r\n  data?: TData\r\n}\r\n\r\n/**\r\n * Interface that represents a log entry with a specific level\r\n */\r\nexport interface LeveledLogEntry<T> extends LogEntry<T> {\r\n  /**\r\n   * The verbosity level of the log entry\r\n   */\r\n  level: LogLevel\r\n}\r\n", "import { Injectable } from '../inject'\r\nimport { AbstractLogger, LeveledLogEntry, Logger } from '.'\r\n\r\n/**\r\n * A specific logger that forwards its messages to a collection of loggers\r\n */\r\n@Injectable({ lifetime: 'singleton' })\r\nexport class LoggerCollection extends AbstractLogger {\r\n  public async addEntry<T>(entry: LeveledLogEntry<T>): Promise<void> {\r\n    const promises = this.loggers.map((l) => l.addEntry(entry))\r\n    await Promise.all(promises)\r\n  }\r\n\r\n  private loggers: Logger[] = []\r\n\r\n  public attachLogger(...loggers: Logger[]) {\r\n    this.loggers.push(...loggers)\r\n  }\r\n}\r\n", "import { Disposable } from './disposable'\r\nimport { ObservableValue, ValueChangeCallback } from './observable-value'\r\n\r\n/**\r\n * Defines a generic ValueObserver instance\r\n *\r\n * A ValueObserver is created whenever you subscribe for an *ObservableValue* changes.\r\n *\r\n * Usage example:\r\n * ```ts\r\n *\r\n * const observableValue = new ObservableValue<number>(0);\r\n * const observer = observableValue.subscribe((newValue) => {\r\n *     console.log(\"Value changed:\", newValue);\r\n * });\r\n *\r\n * // To update the value\r\n * observableValue.setValue(Math.random());\r\n * // if you want to dispose a single observer\r\n * observer.dispose();\r\n * // if you want to dispose the whole observableValue with all of its observers:\r\n * observableValue.dispose();\r\n * ```\r\n *\r\n * @param T This type parameter is the value type to observe\r\n */\r\nexport class ValueObserver<T> implements Disposable {\r\n  /**\r\n   * Disposes the ValueObserver instance. Unsubscribes from the observable\r\n   */\r\n  public dispose() {\r\n    this.observable.unsubscribe(this)\r\n  }\r\n\r\n  /**\r\n   * @constructs ValueObserver<T> the ValueObserver instance\r\n   */\r\n  constructor(private readonly observable: ObservableValue<T>, public callback: ValueChangeCallback<T>) {}\r\n}\r\n", "import { Disposable } from './disposable'\r\nimport { ValueObserver } from './value-observer'\r\n\r\n/**\r\n * Callback type for observable value changes\r\n */\r\nexport type ValueChangeCallback<T> = (next: T) => void\r\n\r\n/**\r\n * Defines an ObservableValue value object.\r\n *\r\n * You can set and get its value with it's *setValue()* and *getValue()* methods and you can subscribe to value changes with *subscribe()*\r\n *\r\n * Usage example:\r\n * ```ts\r\n * const observableValue = new ObservableValue<number>(0);\r\n * const observer = observableValue.subscribe((newValue) => {\r\n *    console.log(\"Value changed:\", newValue);\r\n * });\r\n * // To update the value\r\n * observableValue.setValue(Math.random());\r\n * // if you want to dispose a single observer\r\n * observer.dispose();\r\n * // if you want to dispose the whole observableValue with all of its observers:\r\n * observableValue.dispose();\r\n * ```\r\n *\r\n * @param T Generic argument to indicate the value type\r\n */\r\nexport class ObservableValue<T> implements Disposable {\r\n  /**\r\n   * Disposes the ObservableValue object, removes all observers\r\n   */\r\n  public dispose() {\r\n    this.observers.clear()\r\n  }\r\n  private observers: Set<ValueObserver<T>> = new Set()\r\n  private currentValue!: T\r\n\r\n  /**\r\n   * Subscribes to a value changes\r\n   * @param {ValueChangeCallback<T>} callback The callback method that will be called on each change\r\n   * @param {boolean} getLast Will call the callback with the last known value right after subscription\r\n   * @returns {ValueObserver<T>} The ValueObserver instance\r\n   */\r\n  public subscribe(callback: ValueChangeCallback<T>, getLast = false): ValueObserver<T> {\r\n    const observer = new ValueObserver<T>(this, callback)\r\n    this.observers.add(observer)\r\n    if (getLast) {\r\n      callback(this.currentValue)\r\n    }\r\n    return observer\r\n  }\r\n\r\n  /**\r\n   * The observer will unsubscribe from the Observable\r\n   * @param {ValueObserver<T>} observer The ValueObserver instance\r\n   * @returns if unsubscribing was successfull\r\n   */\r\n  public unsubscribe(observer: ValueObserver<T>): boolean {\r\n    return this.observers.delete(observer)\r\n  }\r\n\r\n  /**\r\n   * Gets the current Value\r\n   * @returns {T} The current value\r\n   */\r\n  public getValue(): T {\r\n    return this.currentValue\r\n  }\r\n\r\n  /**\r\n   * Sets a new value and notifies the observers.\r\n   * @param {T} newValue The new value to be set\r\n   */\r\n  public setValue(newValue: T) {\r\n    if (this.currentValue !== newValue) {\r\n      this.currentValue = newValue\r\n      for (const subscription of this.observers) {\r\n        subscription.callback(newValue)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the observers\r\n   * @returns {ReadonlyArray<ValueObserver<T>>} The subscribed observers\r\n   */\r\n  public getObservers(): ReadonlyArray<ValueObserver<T>> {\r\n    return Array.from(this.observers)\r\n  }\r\n\r\n  /**\r\n   * @constructs The ObservableValue object\r\n   * @param {T} initialValue Optional initial value\r\n   */\r\n  constructor(initialValue?: T) {\r\n    if (initialValue) {\r\n      this.currentValue = initialValue\r\n    }\r\n  }\r\n}\r\n", "import { Injectable } from '../inject'\r\nimport { ObservableValue } from '../observable-value'\r\nimport { LeveledLogEntry } from '.'\r\n\r\n/**\r\n * A context service to get/set the active notification message\r\n */\r\n@Injectable({ lifetime: 'singleton' })\r\nexport class NotificationService {\r\n  public activeMessages = new ObservableValue<Array<LeveledLogEntry<any>>>([])\r\n\r\n  public add(newMessage: LeveledLogEntry<any>) {\r\n    this.activeMessages.setValue([\r\n      ...this.activeMessages.getValue().filter((message) => message.level !== newMessage.level),\r\n      newMessage,\r\n    ])\r\n  }\r\n\r\n  public dismiss(oldItem: LeveledLogEntry<any>) {\r\n    this.activeMessages.setValue(\r\n      [...this.activeMessages.getValue()].filter(\r\n        (message) => message && JSON.stringify(message) !== JSON.stringify(oldItem),\r\n      ),\r\n    )\r\n  }\r\n}\r\n", "import { Injectable } from '../inject'\r\nimport { NotificationService } from './notification-service'\r\nimport { AbstractLogger, LeveledLogEntry, LogLevel } from '.'\r\n\r\n@Injectable({ lifetime: 'scoped' })\r\nexport class NotificationLogger extends AbstractLogger {\r\n  private logLevels = ['Information', 'Warning', 'Error', 'Fatal']\r\n\r\n  public useLogLevels(loglevels: string[]) {\r\n    this.logLevels = loglevels\r\n  }\r\n\r\n  public async addEntry<T>(entry: LeveledLogEntry<T>) {\r\n    if (this.logLevels.includes(LogLevel[entry.level] as keyof typeof LogLevel)) {\r\n      this.notificationService.add(entry)\r\n    }\r\n  }\r\n\r\n  constructor(private readonly notificationService: NotificationService) {\r\n    super()\r\n  }\r\n}\r\n", "/**\r\n * The async variant of the Array.filter() method that\r\n * @param values An iterable of elements to filter\r\n * @param callbackFn The async callback that will be executed on the elements\r\n * @returns Promise<T[]>\r\n */\r\nexport const filterAsync = async <T>(values: Iterable<T>, callbackFn: (entry: T) => Promise<boolean>) => {\r\n  const returns = []\r\n  for (const value of values) {\r\n    ;(await callbackFn(value)) && returns.push(value)\r\n  }\r\n  return returns\r\n}\r\n\r\ndeclare global {\r\n  /**\r\n   * Defines an array of elements\r\n   */\r\n  export interface Array<T> {\r\n    /**\r\n     * Returns a promise with a new array of elements that meets the specified async callback\r\n     */\r\n    filterAsync: (callbackFn: (entry: T) => Promise<boolean>) => Promise<T[]>\r\n  }\r\n}\r\n;(Array.prototype as any).filterAsync = function (callbackFn: (entry: any) => Promise<boolean>) {\r\n  return filterAsync(this, callbackFn)\r\n}\r\n", "/**\r\n * Helper class for path-related functions and methods\r\n *\r\n * The class contains general helper methods for joining, splitting, modifying and validating paths.\r\n */\r\nexport class PathHelper {\r\n  /**\r\n   * Trims the slash characters from the beginning and from the end of the path to avoid duplicated slashes\r\n   * @param {string} path The source path that should be trimmed\r\n   */\r\n  public static trimSlashes(path: string) {\r\n    while (path.endsWith('/')) {\r\n      path = path.substring(0, path.length - 1)\r\n    }\r\n    while (path.startsWith('/')) {\r\n      path = path.substring(1, path.length)\r\n    }\r\n    return path\r\n  }\r\n\r\n  /**\r\n   * Check if url contain https.\r\n   * @param {string} path The source path that should be trimmed\r\n   * @returns {string}  If path does not contain <schema> it will attach https://{path}.\r\n   */\r\n  public static ensureDefaultSchema(path: string): string {\r\n    const validUrl = new RegExp('^[a-zA-Z]+[:][/]{1}')\r\n\r\n    if (validUrl.test(path)) {\r\n      return path\r\n    }\r\n\r\n    return `https://${path}`\r\n  }\r\n\r\n  /**\r\n   * Splits a full path into path segments,\r\n   * e.g.: /Root/Example('Content1') will be [\"Root\", \"Example\", \"('Content1')\"]\r\n   * @param path The path to be splitted\r\n   */\r\n  public static getSegments(path: string) {\r\n    if (!path || path.startsWith('content') || path.startsWith('/content')) {\r\n      return []\r\n    }\r\n    // Split path at / and remove empty strings\r\n    const splitted = path.split('/').filter(Boolean)\r\n    const lastItem = splitted.pop()\r\n    if (!lastItem) {\r\n      throw new Error(`Couldn't get the segments for ${path}`)\r\n    }\r\n    // Match if last item is Root/Example('content')\r\n    const matches = lastItem.match(/(\\('.+'\\)$)/g)\r\n    if (!matches) {\r\n      return [...splitted, lastItem]\r\n    }\r\n    // Gets Example from Root/Example(123)\r\n    const lastSegmentBeforeColumn = lastItem.split(matches[0])[0]\r\n    return [...splitted, lastSegmentBeforeColumn, ...matches]\r\n  }\r\n\r\n  /**\r\n   * Checks if a specific segment is an Item segment or not (like \"('Content1')\")\r\n   * @param segment The segment to be examined\r\n   */\r\n  public static isItemSegment(segment: string): boolean {\r\n    return RegExp(/\\('.+'\\)$/).test(segment)\r\n  }\r\n\r\n  /**\r\n   * Method that tells if a path is an item path or an item reference path (e.g. contains an Item segment).\r\n   * @param {string} path Path that you want to test.\r\n   * @returns {boolean} Returns if the given path is a path of a Content or not.\r\n   */\r\n  public static isItemPath(path: string): boolean {\r\n    const segments = this.getSegments(path)\r\n    const itemSegment = segments.find((s) => this.isItemSegment(s))\r\n    return itemSegment && itemSegment.length ? true : false\r\n  }\r\n\r\n  /**\r\n   * Returns the full path for a content based on its Id or Path\r\n   * @param {string | number} idOrPath the Id Or Path of the content\r\n   * @returns A full Id or Path-based url of the content (e.g.  *'/content(1)'* or *'/Root/Example/('Content')'*)\r\n   */\r\n  public static getContentUrl(idOrPath: string | number): string {\r\n    const parsed = parseInt(idOrPath as string, 10)\r\n    if (isNaN(parsed)) {\r\n      return this.getContentUrlByPath(idOrPath.toString())\r\n    } else {\r\n      return this.getContentUrlbyId(parsed)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method that gets the URL that refers to a single item in the Sense/Net Content Repository\r\n   * @param {string} path Path that you want to format.\r\n   * @returns {string} Path in entity format e.g. /workspaces('project') from /workspaces/project\r\n   */\r\n  public static getContentUrlByPath(path: string): string {\r\n    if (!path) {\r\n      throw Error('Path is empty')\r\n    }\r\n\r\n    const segments = this.getSegments(path)\r\n    if (!this.isItemPath(path)) {\r\n      segments[segments.length - 1] = `('${segments[segments.length - 1]}')`\r\n    }\r\n    return segments.join('/')\r\n  }\r\n\r\n  /**\r\n   * Method that gets the URL that refers to a single item in the Sense/Net Content Repository by its Id\r\n   * @param id {number} Id of the Content.\r\n   * @returns {string} e.g. /content(123)\r\n   */\r\n  public static getContentUrlbyId(id: number): string {\r\n    return `content(${id})`\r\n  }\r\n\r\n  /**\r\n   * Method that allows to join paths without multiple or missing slashes\r\n   * @param args The list of the paths to join\r\n   */\r\n  public static joinPaths(...args: string[]) {\r\n    return args.map(this.trimSlashes).join('/')\r\n  }\r\n\r\n  /**\r\n   * Checks if the ancestorPath is really the ancestor of the descendantPath\r\n   * @param {string} ancestorPath the ancestor path\r\n   * @param {string} descendantPath the descendant path\r\n   * @returns {boolean} if the provided path is the ancestor of the descendant\r\n   */\r\n  public static isAncestorOf(ancestorPath: string, descendantPath: string): boolean {\r\n    const trimmedDescendantPath = this.trimSlashes(descendantPath)\r\n    const trimmedAncestorPath = this.trimSlashes(ancestorPath)\r\n    return trimmedDescendantPath.indexOf(`${this.joinPaths(trimmedAncestorPath)}/`) === 0\r\n  }\r\n\r\n  public static isInSubTree(currentPath: string, treeRoot: string): boolean {\r\n    const regexp = new RegExp(`^${treeRoot}(/|$)`)\r\n    return regexp.test(currentPath)\r\n  }\r\n\r\n  /**\r\n   * Returns the parent path from a specified path.\r\n   * e.g. \"/Root/Example/Content\" will return \"/Root/Example\"\r\n   *\r\n   * \"Root\" will always return \"Root\"\r\n   * @param path The content path\r\n   */\r\n  public static getParentPath(path: string): string {\r\n    const segments = this.getSegments(path)\r\n    if (segments.length > 1) {\r\n      segments.pop()\r\n    }\r\n    return segments.join('/')\r\n  }\r\n}\r\n", "/**\r\n * Options class for Retrier\r\n */\r\nexport class RetrierOptions {\r\n  /**\r\n   * The default value for retries\r\n   */\r\n  public static readonly RETRIES_DEFAULT = 10\r\n  private retries: number = RetrierOptions.RETRIES_DEFAULT\r\n  /**\r\n   * How many times should retry the operation\r\n   */\r\n  public get Retries(): number {\r\n    return this.retries\r\n  }\r\n  public set Retries(v: number) {\r\n    this.retries = v\r\n  }\r\n\r\n  /**\r\n   * The default interval between retries\r\n   */\r\n  public static readonly RETRY_INTERVAL_MS_DEFAULT = 10\r\n  private retryIntervalMs?: number\r\n  /**\r\n   * The interval between tries in milliseconds\r\n   */\r\n  public get RetryIntervalMs(): number {\r\n    return this.retryIntervalMs !== undefined ? this.retryIntervalMs : RetrierOptions.RETRY_INTERVAL_MS_DEFAULT\r\n  }\r\n  public set RetryIntervalMs(v: number) {\r\n    this.retryIntervalMs = v\r\n  }\r\n\r\n  /**\r\n   * The default timeout in millisecs\r\n   */\r\n  public static readonly TIMEOUT_MS_DEFAULT = 1000\r\n  private timeoutMsValue?: number\r\n\r\n  /**\r\n   * The Timeout interval in milliseconds\r\n   */\r\n  public get timeoutMs(): number {\r\n    return this.timeoutMsValue !== undefined ? this.timeoutMsValue : RetrierOptions.TIMEOUT_MS_DEFAULT\r\n  }\r\n  public set timeoutMs(v: number) {\r\n    this.timeoutMsValue = v\r\n  }\r\n\r\n  /**\r\n   * Optional callback, triggered right before each try\r\n   */\r\n  public onTry?: () => void\r\n  /**\r\n   * Optional callback, triggered on success\r\n   */\r\n  public onSuccess?: () => void\r\n  /**\r\n   * Optional callback, triggered on fail (timeout or too many retries)\r\n   */\r\n  public onFail?: () => void\r\n}\r\n", "import { Disposable } from './disposable'\r\nimport { ObservableValue } from './observable-value'\r\n\r\n/**\r\n * Options object for tracing method calls\r\n */\r\nexport interface TraceMethodOptions<T, TMethod extends (...args: TArgs) => any, TArgs extends any[]> {\r\n  /**\r\n   * The context object. Can be an instance or a constructor for static methods\r\n   */\r\n  object: T\r\n  /**\r\n   * The method reference that needs to be traced\r\n   */\r\n  method: TMethod\r\n  /**\r\n   * Unique identifier for the method\r\n   */\r\n  methodName: string\r\n  /**\r\n   * Callback that will be called right before executing the method\r\n   */\r\n  onCalled?: (newValue: TraceMethodCall<TArgs>) => void\r\n  /**\r\n   * Callback that will be called right after the method returns\r\n   */\r\n  onFinished?: (newValue: TraceMethodFinished<ReturnType<TMethod>, TArgs>) => void\r\n  /**\r\n   * Callback that will be called when a method throws an error\r\n   */\r\n  onError?: (newValue: TraceMethodError<TArgs>) => void\r\n\r\n  /**\r\n   * The method execution will be awaited if set\r\n   */\r\n  isAsync?: boolean\r\n}\r\n\r\n/**\r\n * Defines a trace method call object\r\n */\r\nexport interface TraceMethodCall<TArgs extends any[]> {\r\n  /**\r\n   * The timestamp when the event occured\r\n   */\r\n  startDateTime: Date\r\n\r\n  /**\r\n   * The provided arguments for the call\r\n   */\r\n  methodArguments: TArgs\r\n}\r\n\r\n/**\r\n * Defines a trace event when a method call has been finished\r\n */\r\nexport interface TraceMethodFinished<TReturns, TArgs extends any[]> extends TraceMethodCall<TArgs> {\r\n  returned: TReturns\r\n  finishedDateTime: Date\r\n}\r\n\r\n/**\r\n * Defines a trace event when an error was thrown during a method call\r\n */\r\nexport interface TraceMethodError<TArgs extends any[]> extends TraceMethodCall<TArgs> {\r\n  error: any\r\n  errorDateTime: Date\r\n}\r\n\r\n/**\r\n * Defines a method mapping object\r\n */\r\nexport interface MethodMapping<TReturns, TArgs extends any[]> {\r\n  /**\r\n   * The original method instance\r\n   */\r\n  originalMethod: (...args: TArgs) => TReturns\r\n  /**\r\n   * An observable for distributing the events\r\n   */\r\n  callObservable: ObservableValue<TraceMethodCall<TArgs>>\r\n\r\n  finishedObservable: ObservableValue<TraceMethodFinished<any, TArgs>>\r\n  errorObservable: ObservableValue<TraceMethodError<TArgs>>\r\n}\r\n\r\n/**\r\n * Defines an Object Trace mapping\r\n */\r\nexport interface ObjectTrace {\r\n  /**\r\n   * Map about the already wrapped methods\r\n   */\r\n  methodMappings: Map<string, MethodMapping<any, any[]>>\r\n}\r\n\r\n/**\r\n * Helper class that can be used to trace method calls programmatically\r\n *\r\n * Usage example:\r\n * ```ts\r\n * const methodTracer: Disposable = Trace.method({\r\n *     object: myObjectInstance,           // You can define an object constructor for static methods as well\r\n *     method: myObjectInstance.method,    // The method to be tracked\r\n *     methodName: 'method', // Unique identifier for the method\r\n *     isAsync: true,                      // if you set to async, method finished will be *await*-ed\r\n *     onCalled: (traceData) => {\r\n *         console.log(\"Method called:\", traceData)\r\n *     },\r\n *     onFinished: (traceData) => {\r\n *         console.log(\"Method call finished:\", traceData)\r\n *     },\r\n *     onError: (traceData) => {\r\n *         console.log(\"Method throwed an error:\", traceData)\r\n *     }\r\n * });\r\n * ```\r\n */\r\nexport class Trace {\r\n  private static objectTraces: Map<object, ObjectTrace> = new Map()\r\n\r\n  private static getMethodTrace<TArgs extends any[], TReturns>(\r\n    object: object,\r\n    methodName: string,\r\n  ): MethodMapping<TReturns, TArgs> {\r\n    const objectTrace = this.objectTraces.get(object)!\r\n    return objectTrace.methodMappings.get(methodName) as MethodMapping<TReturns, TArgs>\r\n  }\r\n\r\n  private static traceStart<TReturns, TArgs extends any[]>(\r\n    methodTrace: MethodMapping<TReturns, TArgs[]>,\r\n    args: TArgs[],\r\n  ) {\r\n    const startDateTime = new Date()\r\n    const traceValue = {\r\n      methodArguments: args,\r\n      startDateTime,\r\n    }\r\n    methodTrace.callObservable.setValue(traceValue)\r\n    return traceValue\r\n  }\r\n\r\n  private static traceFinished<TReturns, TArgs extends any[]>(\r\n    methodTrace: MethodMapping<TReturns, TArgs>,\r\n    args: TArgs,\r\n    callTrace: TraceMethodCall<TArgs>,\r\n    returned: any,\r\n  ) {\r\n    const finishedTrace: TraceMethodFinished<TReturns, TArgs> = {\r\n      methodArguments: args,\r\n      startDateTime: callTrace.startDateTime,\r\n      finishedDateTime: new Date(),\r\n      returned,\r\n    }\r\n    methodTrace.finishedObservable.setValue(finishedTrace)\r\n  }\r\n\r\n  private static traceError<TReturns, TArgs extends any[]>(\r\n    methodTrace: MethodMapping<TReturns, TArgs>,\r\n    args: TArgs,\r\n    callTrace: TraceMethodCall<TArgs>,\r\n    error: any,\r\n  ) {\r\n    const errorTrace: TraceMethodError<TArgs> = {\r\n      methodArguments: args,\r\n      startDateTime: callTrace.startDateTime,\r\n      errorDateTime: new Date(),\r\n      error,\r\n    }\r\n    methodTrace.errorObservable.setValue(errorTrace)\r\n    return errorTrace\r\n  }\r\n\r\n  private static callMethod<TArgs extends any[]>(object: object, methodName: string, args: TArgs) {\r\n    const methodTrace = this.getMethodTrace(object, methodName)\r\n    const start = this.traceStart(methodTrace, args)\r\n    try {\r\n      const returned = methodTrace.originalMethod.call(object, ...args)\r\n      this.traceFinished(methodTrace, args, start, returned)\r\n      return returned\r\n    } catch (error) {\r\n      this.traceError(methodTrace, args, start, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private static async callMethodAsync<TArgs extends any[]>(object: object, methodName: string, args: TArgs) {\r\n    const methodTrace = this.getMethodTrace(object, methodName)\r\n    const start = this.traceStart(methodTrace, args)\r\n    try {\r\n      const returned = await methodTrace.originalMethod.call(object, ...args)\r\n      this.traceFinished(methodTrace, args, start, returned)\r\n      return returned\r\n    } catch (error) {\r\n      this.traceError(methodTrace, args, start, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates an observer that will be observe method calls, finishes and errors\r\n   * @param options The options object for the trace\r\n   */\r\n  public static method<T extends object, TMethod extends (...args: TArgs) => any, TArgs extends any[]>(\r\n    options: TraceMethodOptions<T, TMethod, TArgs>,\r\n  ): Disposable {\r\n    // add object mapping\r\n    if (!this.objectTraces.has(options.object)) {\r\n      this.objectTraces.set(options.object, {\r\n        methodMappings: new Map(),\r\n      })\r\n    }\r\n    // setup override if needed\r\n    if (!((options.object as any)[options.methodName] as any).isTraced) {\r\n      const overriddenMethod = options.isAsync\r\n        ? (...args: TArgs) => this.callMethodAsync(options.object, options.methodName, args)\r\n        : (...args: TArgs) => this.callMethod(options.object, options.methodName, args)\r\n      Object.defineProperty(overriddenMethod, 'name', { value: options.methodName })\r\n      Object.defineProperty(overriddenMethod, 'isTraced', { value: options.methodName })\r\n      ;(options.object as any)[options.methodName] = overriddenMethod\r\n    }\r\n    const objectTrace = this.objectTraces.get(options.object) as any as ObjectTrace\r\n\r\n    // add method mapping if needed\r\n    if (!objectTrace.methodMappings.has(options.methodName)) {\r\n      objectTrace.methodMappings.set(options.methodName, {\r\n        originalMethod: options.method,\r\n        callObservable: new ObservableValue<TraceMethodCall<TArgs>>(),\r\n        finishedObservable: new ObservableValue<TraceMethodFinished<ReturnType<TMethod>, TArgs>>(),\r\n        errorObservable: new ObservableValue<TraceMethodError<TArgs>>(),\r\n      } as any)\r\n    }\r\n    const methodTrace = objectTrace.methodMappings.get(options.methodName) as any as MethodMapping<\r\n      ReturnType<TMethod>,\r\n      TArgs\r\n    >\r\n    const callbacks = [\r\n      options.onCalled && methodTrace.callObservable.subscribe(options.onCalled),\r\n      options.onFinished && methodTrace.finishedObservable.subscribe(options.onFinished),\r\n      options.onError && methodTrace.errorObservable.subscribe(options.onError),\r\n    ]\r\n\r\n    // Subscribe and return the observer\r\n    return {\r\n      dispose: () => callbacks.forEach((c) => c && c.dispose()),\r\n    }\r\n  }\r\n}\r\n", "import { User } from '@sensenet/default-content-types'\r\nimport { Content } from '../Models/Content'\r\n\r\n/**\r\n * Constant content definitions for sensenet\r\n */\r\nexport class ConstantContent {\r\n  /**\r\n   * Defines a visitor user content\r\n   */\r\n  public static VISITOR_USER: User = {\r\n    Id: 6,\r\n    DisplayName: 'Visitor',\r\n    Domain: 'BuiltIn',\r\n    Name: 'Visitor',\r\n    Path: '/Root/IMS/BuiltIn/Portal/Visitor',\r\n    LoginName: 'Visitor',\r\n    Type: 'User',\r\n  }\r\n\r\n  /**\r\n   * Defines a portal root content\r\n   */\r\n  public static PORTAL_ROOT: Content & { DisplayName: string } = {\r\n    Id: 2,\r\n    Path: '/Root',\r\n    Name: 'Root',\r\n    DisplayName: 'Root',\r\n    Type: 'PortalRoot',\r\n  }\r\n\r\n  public static EMPTY_CONTENT: Content & { DisplayName: string } = {\r\n    Id: 0,\r\n    Path: '',\r\n    Name: '',\r\n    DisplayName: '',\r\n    Type: '',\r\n  }\r\n}\r\n", "/**\r\n * @module Authentication\r\n */ /** */\r\n\r\n/**\r\n * This enum represents the current state of the user session\r\n */\r\nexport enum LoginState {\r\n  /**\r\n   * There is a request (login or token refresh) in progress\r\n   */\r\n  Pending = 'Pending',\r\n  /**\r\n   * The user is not authenticated\r\n   */\r\n  Unauthenticated = 'Unauthenticated',\r\n  /**\r\n   * The user is authenticated and has a valid access token\r\n   */\r\n  Authenticated = 'Authenticated',\r\n\r\n  /**\r\n   * The login state is not known\r\n   */\r\n  Unknown = 'Unknown',\r\n}\r\n", "import { ObservableValue } from '@sensenet/client-utils'\r\nimport { User } from '@sensenet/default-content-types'\r\nimport { ConstantContent } from '../Repository/ConstantContent'\r\nimport { AuthenticationService } from './AuthenticationService'\r\nimport { LoginState } from './LoginState'\r\n\r\n/**\r\n * Default authentication service that bypasses the authentication process\r\n */\r\nexport class BypassAuthentication implements AuthenticationService {\r\n  /**\r\n   * The current state of the authentication\r\n   */\r\n  public state: ObservableValue<LoginState> = new ObservableValue(LoginState.Unknown)\r\n\r\n  /**\r\n   * Checks for update if neccessary. For BypassAuthentication always resolves immedietly with false\r\n   */\r\n  public async checkForUpdate(): Promise<boolean> {\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Login method - not available for BypassAuthentication\r\n   */\r\n  public async login(): Promise<boolean> {\r\n    throw new Error('Not allowed when authentication is bypassed.')\r\n  }\r\n\r\n  /**\r\n   * logout method - not available for BypassAuthentication\r\n   */\r\n  public async logout(): Promise<boolean> {\r\n    throw new Error('Not allowed when authentication is bypassed.')\r\n  }\r\n\r\n  /**\r\n   * Current user observable property - Will publish the Visitor user for BypassAuthentication\r\n   */\r\n  public currentUser: ObservableValue<User> = new ObservableValue<User>(ConstantContent.VISITOR_USER)\r\n\r\n  /**\r\n   * Disposes the service\r\n   */\r\n  public dispose() {\r\n    /** */\r\n  }\r\n}\r\n", "import { ObservableValue } from '@sensenet/client-utils'\r\nimport { User } from '@sensenet/default-content-types'\r\nimport Semaphor from 'semaphore-async-await'\r\nimport { ODataParams, ODataResponse } from '../Models'\r\nimport { ConstantContent, Repository } from '../Repository'\r\nimport { AuthenticationService, LoginState } from '.'\r\n\r\n/**\r\n * Authentication Service class for using Forms authentication through OData Actions\r\n */\r\nexport class FormsAuthenticationService implements AuthenticationService {\r\n  private statusLock = new Semaphor(1)\r\n\r\n  /**\r\n   * Static Factory Method for attaching the service to a Repository object\r\n   * @param repository The repository instance\r\n   * @param loadUserOptions Additional options for loading User content\r\n   */\r\n  public static Setup(repository: Repository, loadUserOptions?: ODataParams<User>) {\r\n    const service = new FormsAuthenticationService(repository, loadUserOptions)\r\n    service.getCurrentUser()\r\n    return service\r\n  }\r\n\r\n  /**\r\n   * This observable indicates the current state of the service\r\n   * @default LoginState.Pending\r\n   */\r\n  public state: ObservableValue<LoginState> = new ObservableValue(LoginState.Unknown)\r\n\r\n  /**\r\n   * Observable value that will update with the current user on user change\r\n   */\r\n  public currentUser: ObservableValue<User> = new ObservableValue<User>(ConstantContent.VISITOR_USER)\r\n\r\n  constructor(private repository: Repository, private readonly userLoadOptions: ODataParams<User> = { select: 'all' }) {\r\n    this.repository.authentication = this\r\n  }\r\n\r\n  /**\r\n   * Disposes the service, the state and currentUser observables\r\n   */\r\n  public async dispose(): Promise<void> {\r\n    this.state.dispose()\r\n    this.currentUser.dispose()\r\n  }\r\n  /**\r\n   * Placehlolder to check if a token update is needed. Not used with Forms authentication\r\n   */\r\n  public async checkForUpdate(): Promise<boolean> {\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Returns the current user value\r\n   */\r\n  public async getCurrentUser(): Promise<User> {\r\n    try {\r\n      await this.statusLock.acquire()\r\n      this.state.setValue(LoginState.Pending)\r\n      try {\r\n        const result = await this.repository.loadCollection({\r\n          path: ConstantContent.PORTAL_ROOT.Path,\r\n          oDataOptions: {\r\n            ...this.userLoadOptions,\r\n            query: 'Id:@@CurrentUser.Id@@',\r\n            top: 1,\r\n          },\r\n        })\r\n        if (result.d.__count === 1) {\r\n          if (result.d.results[0].Id !== ConstantContent.VISITOR_USER.Id) {\r\n            this.state.setValue(LoginState.Authenticated)\r\n            this.currentUser.setValue(result.d.results[0])\r\n            return result.d.results[0]\r\n          }\r\n        }\r\n      } catch {\r\n        /** */\r\n      }\r\n      this.state.setValue(LoginState.Unauthenticated)\r\n      this.currentUser.setValue(ConstantContent.VISITOR_USER)\r\n      return ConstantContent.VISITOR_USER\r\n    } finally {\r\n      await this.statusLock.release()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logs in with the provided credentials\r\n   * @param username The username for the login\r\n   * @param password The password for the login\r\n   */\r\n  public async login(username: string, password: string): Promise<boolean> {\r\n    try {\r\n      await this.statusLock.acquire()\r\n      const user = await this.repository.executeAction<{ username: string; password: string }, ODataResponse<User>>({\r\n        body: {\r\n          username,\r\n          password,\r\n        },\r\n        method: 'POST',\r\n        idOrPath: ConstantContent.PORTAL_ROOT.Id,\r\n        name: 'Login',\r\n      })\r\n      this.currentUser.setValue(user.d)\r\n      const isVisitor = user.d.Id !== ConstantContent.VISITOR_USER.Id ? true : false\r\n      this.state.setValue(isVisitor ? LoginState.Authenticated : LoginState.Unauthenticated)\r\n      return isVisitor\r\n    } catch (error) {\r\n      return false\r\n    } finally {\r\n      this.statusLock.release()\r\n    }\r\n  }\r\n  /**\r\n   * Logs out and destroys the current session\r\n   */\r\n  public async logout(): Promise<boolean> {\r\n    try {\r\n      await this.repository.executeAction({\r\n        method: 'POST',\r\n        idOrPath: ConstantContent.PORTAL_ROOT.Id,\r\n        name: 'Logout',\r\n        body: {},\r\n      })\r\n    } catch (error) {\r\n      // ignore json parsing errors from empty response\r\n    }\r\n    this.currentUser.setValue(ConstantContent.VISITOR_USER)\r\n    this.state.setValue(LoginState.Unauthenticated)\r\n    return true\r\n  }\r\n}\r\n", "import { GenericContent } from '@sensenet/default-content-types'\r\nimport { ODataFieldParameter, ODataParams } from '../Models/ODataParams'\r\nimport { RepositoryConfiguration } from './RepositoryConfiguration'\r\n\r\n/**\r\n * Helper class to build OData Urls\r\n */\r\nexport class ODataUrlBuilder {\r\n  /**\r\n   * List of a valid OData parameters\r\n   */\r\n  public static readonly ODATA_PARAMS = [\r\n    'select',\r\n    'expand',\r\n    'orderby',\r\n    'top',\r\n    'skip',\r\n    'filter',\r\n    'format',\r\n    'inlinecount',\r\n  ]\r\n  private static combineODataFieldParameters<T>(...params: Array<ODataFieldParameter<T>>) {\r\n    const filtered = params.filter(Boolean)\r\n    const flatten = filtered.reduce((previousValue, currentValue) => previousValue.concat(currentValue), [])\r\n    return [...new Set(flatten)]\r\n  }\r\n\r\n  /**\r\n   * Method to build proper parameter string to OData requests based on the given repository configuration and option Object.\r\n   *\r\n   * Checks whether a given parameter is standard OData param or not and based on this information this params get the '$' sign.\r\n   * @param {RepositoryConfiguration} config Represents the current Repository configuration for default select, expand, etc... options\r\n   * @param {ODataParams} options Represents an ODataOptions object. Holds the possible url parameters as properties.\r\n   * @returns {string} String with the url params in the correct format e.g. '$select=DisplayName,Index'&$top=2&metadata=no'.\r\n   */\r\n  public static buildUrlParamString<T = GenericContent>(\r\n    config: RepositoryConfiguration,\r\n    options?: ODataParams<T>,\r\n  ): string {\r\n    const oDataParams: ODataParams<T> = { ...options }\r\n\r\n    if (config.requiredSelect === 'all' || config.defaultSelect === 'all' || oDataParams?.select === 'all') {\r\n      oDataParams.select = undefined\r\n    } else {\r\n      oDataParams.select = this.combineODataFieldParameters<T>(\r\n        config.requiredSelect as any,\r\n        oDataParams.select ?? (config.defaultSelect as any),\r\n      )\r\n    }\r\n    oDataParams.metadata = oDataParams.metadata ?? config.defaultMetadata\r\n    oDataParams.inlinecount = oDataParams.inlinecount ?? config.defaultInlineCount\r\n    oDataParams.expand = oDataParams.expand ?? (config.defaultExpand as any)\r\n    oDataParams.top = oDataParams.top ?? config.defaultTop\r\n    oDataParams.enableautofilters = oDataParams.enableautofilters ?? config.defaultEnableAutofilters\r\n    oDataParams.enablelifespanfilter = oDataParams.enablelifespanfilter ?? config.defaultEnableLifespanfilter\r\n\r\n    const segments: Array<{ name: string; value: string }> = []\r\n    for (const key in oDataParams) {\r\n      const name = this.ODATA_PARAMS.includes(key) ? `$${key}` : key\r\n      const plainValue = (oDataParams as any)[key]\r\n      let parsedValue = plainValue\r\n      if (plainValue instanceof Array && plainValue.length) {\r\n        parsedValue = plainValue.map((v) => v.join?.(' ') ?? v).join(',')\r\n      }\r\n      if (name && parsedValue && parsedValue.toString().length) {\r\n        segments.push({ name, value: parsedValue })\r\n      }\r\n    }\r\n\r\n    return segments.map((s) => `${s.name}=${encodeURIComponent(s.value)}`).join('&')\r\n  }\r\n}\r\n", "import { ObservableValue, ValueChangeCallback } from '@sensenet/client-utils'\r\nimport { FieldSetting, Schema } from '@sensenet/default-content-types'\r\n\r\n/**\r\n * Class that stores schema information\r\n */\r\nexport class SchemaStore {\r\n  public schemas: ObservableValue<Schema[]> = new ObservableValue([])\r\n  private byNameSchemaCache: Map<string, Schema> = new Map()\r\n\r\n  public subscribeToSchemas(callback: ValueChangeCallback<Schema[]>) {\r\n    return this.schemas.subscribe(callback)\r\n  }\r\n\r\n  /**\r\n   * Updates the schema information in the store and inv\r\n   */\r\n  public setSchemas(newSchemas: Schema[]) {\r\n    this.byNameSchemaCache.clear()\r\n    this.schemas.setValue(newSchemas)\r\n  }\r\n\r\n  private mergeFieldSettings(\r\n    currentFieldSettings: FieldSetting[],\r\n    parentFieldSettings: FieldSetting[],\r\n  ): FieldSetting[] {\r\n    const currentFieldSettingsMap = new Map<string, FieldSetting>()\r\n    currentFieldSettings.forEach((s) => currentFieldSettingsMap.set(s.Name, s))\r\n\r\n    const parentFieldSettingsMap = new Map<string, FieldSetting>()\r\n    parentFieldSettings.forEach((s) => parentFieldSettingsMap.set(s.Name, s))\r\n\r\n    const keys = new Set([...currentFieldSettingsMap.keys(), ...parentFieldSettingsMap.keys()])\r\n\r\n    return Array.from(keys).map((key) => {\r\n      return {\r\n        ...parentFieldSettingsMap.get(key),\r\n        ...currentFieldSettingsMap.get(key),\r\n      } as FieldSetting\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the Content Type Schema for the provided content type name\r\n   * @param {string} contentTypeName The name of the content type\r\n   */\r\n  public getSchemaByName(contentTypeName: string): Schema {\r\n    if (this.byNameSchemaCache.has(contentTypeName)) {\r\n      return Object.assign({}, this.byNameSchemaCache.get(contentTypeName)) as Schema\r\n    }\r\n    const schema = this.schemas.getValue().find((s) => s.ContentTypeName === contentTypeName) as Schema\r\n\r\n    if (!schema) {\r\n      return this.getSchemaByName('GenericContent')\r\n    }\r\n    const parentSchema = schema.ParentTypeName && this.getSchemaByName(schema.ParentTypeName)\r\n\r\n    if (parentSchema) {\r\n      schema.FieldSettings = this.mergeFieldSettings(schema.FieldSettings, parentSchema.FieldSettings)\r\n    }\r\n    this.byNameSchemaCache.set(contentTypeName, schema)\r\n    return schema\r\n  }\r\n\r\n  /**\r\n   * Returns the Field Type for the provided content field name\r\n   * @param {string} fieldName The name of field you search for\r\n   */\r\n  public getFieldTypeByName(fieldName: string): string | undefined {\r\n    const schemasCopy = [...this.schemas.getValue()]\r\n    return schemasCopy.reduce((_, schema: Schema) => {\r\n      const fieldType = schema.FieldSettings.find((fieldSetting: FieldSetting) => fieldSetting.Name === fieldName)?.Type\r\n      if (fieldType) {\r\n        schemasCopy.length = 0\r\n      }\r\n      return fieldType\r\n    }, undefined)\r\n  }\r\n\r\n  /**\r\n   * Returns a boolean value that indicates if the specified content is an instance or descendant of a given content type\r\n   * @param content The given content to check\r\n   * @param contentTypeName The name of content type\r\n   */\r\n  public isContentFromType<T>(content: any, contentTypeName: string): content is T {\r\n    if (!content) {\r\n      return false\r\n    } else if (content.Type === contentTypeName) {\r\n      return true\r\n    }\r\n\r\n    let currentSchema = this.getSchemaByName(content.Type)\r\n\r\n    do {\r\n      if (currentSchema.ContentTypeName === contentTypeName) {\r\n        return true\r\n      }\r\n      currentSchema = this.getSchemaByName(currentSchema.ParentTypeName || '')\r\n    } while (currentSchema.ContentTypeName && currentSchema.ContentTypeName !== 'GenericContent')\r\n    return contentTypeName === 'GenericContent'\r\n  }\r\n\r\n  /**\r\n   * Returns if a given content type is a descendant of an another content type\r\n   * @param child The child content name\r\n   * @param parent The parent content name\r\n   */\r\n  public schemaIsDescendantOf(child: string, parent: string) {\r\n    let currentSchema = this.getSchemaByName(child)\r\n    do {\r\n      if (currentSchema.ContentTypeName === parent) {\r\n        return true\r\n      }\r\n      currentSchema = this.getSchemaByName(currentSchema.ParentTypeName || '')\r\n    } while (currentSchema.ContentTypeName && currentSchema.ContentTypeName !== 'GenericContent')\r\n\r\n    return parent === 'GenericContent'\r\n  }\r\n\r\n  /**\r\n   * Returns a list of the content types existing on schema\r\n   */\r\n  public getTypesFromSchema(): string[] {\r\n    const schemasCopy = [...this.schemas.getValue()]\r\n    const contentTypes = schemasCopy.map((schema) => schema.ContentTypeName.toString())\r\n    return contentTypes\r\n  }\r\n}\r\n", "import { PathHelper } from '@sensenet/client-utils'\r\nimport { ContentType } from '@sensenet/default-content-types'\r\nimport { LoadOptions, ODataCollectionResponse } from '../Models'\r\nimport { ODataUrlBuilder } from './ODataUrlBuilder'\r\nimport { Repository } from './Repository'\r\n\r\nexport class AllowedChildTypes {\r\n  public add(idOrPath: number | string, contentTypes: string[]) {\r\n    return this.repository.executeAction({\r\n      idOrPath,\r\n      name: 'AddAllowedChildTypes',\r\n      method: 'POST',\r\n      body: {\r\n        contentTypes,\r\n      },\r\n    })\r\n  }\r\n\r\n  public update(idOrPath: number | string, contentTypes: string[]) {\r\n    return this.repository.patch({\r\n      idOrPath,\r\n      content: {\r\n        AllowedChildTypes: contentTypes,\r\n      } as any,\r\n    })\r\n  }\r\n\r\n  public remove(idOrPath: number | string, contentTypes: string[]) {\r\n    return this.repository.executeAction({\r\n      idOrPath,\r\n      name: 'RemoveAllowedChildTypes',\r\n      method: 'POST',\r\n      body: {\r\n        contentTypes,\r\n      },\r\n    })\r\n  }\r\n\r\n  public getFromCTD(idOrPath: number | string): Promise<ODataCollectionResponse<ContentType>> {\r\n    return this.repository.executeAction({\r\n      idOrPath,\r\n      name: 'GetAllowedChildTypesFromCTD',\r\n      method: 'GET',\r\n      body: {\r\n        select: ['Name', 'DisplayName', 'Icon'],\r\n      },\r\n    })\r\n  }\r\n\r\n  public listEmpty(idOrPath: number | string) {\r\n    return this.repository.executeAction({\r\n      idOrPath,\r\n      name: 'CheckAllowedChildTypesOfFolders',\r\n      method: 'GET',\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retrieves an aggregated list of content types the user can create as children below the given content\r\n   * @param {LoadOptions<ContentType>} options\r\n   */\r\n  public async get(options: LoadOptions<ContentType>): Promise<ODataCollectionResponse<ContentType>> {\r\n    const allowedTypes: ODataCollectionResponse<ContentType> = { d: { __count: 0, results: [] } }\r\n\r\n    await Promise.all([this.getImplicit(options), this.getExplicit(options)]).then(\r\n      ([implicitACTs, explicitACTs]: Array<ODataCollectionResponse<ContentType>>) => {\r\n        allowedTypes.d.results = implicitACTs.d\r\n          ? implicitACTs.d.results\r\n              .filter(\r\n                (ct: ContentType) =>\r\n                  !explicitACTs.d.results.find((contenttype: ContentType) => ct.Name === contenttype.Name),\r\n              )\r\n              .concat(explicitACTs.d.results)\r\n          : []\r\n        allowedTypes.d.__count = allowedTypes.d.results.length\r\n      },\r\n    )\r\n\r\n    return allowedTypes\r\n  }\r\n\r\n  /**\r\n   * Retrieves a list of content types the user can create as children below the given content (allowed on the content)\r\n   * @param {LoadOptions<ContentType>} options Options for fetching the AllowedChildTypes\r\n   */\r\n  public async getImplicit(options: LoadOptions<ContentType>): Promise<ODataCollectionResponse<ContentType>> {\r\n    const contextPath = PathHelper.getContentUrl(options.idOrPath)\r\n    const params = ODataUrlBuilder.buildUrlParamString(this.repository.configuration, options.oDataOptions)\r\n    const path = PathHelper.joinPaths(\r\n      this.repository.configuration.repositoryUrl,\r\n      this.repository.configuration.oDataToken,\r\n      contextPath,\r\n      'AllowedChildTypes',\r\n    )\r\n    const response = await this.repository.fetch(`${path}?${params}`, {\r\n      credentials: 'include',\r\n      method: 'GET',\r\n    })\r\n    if (!response.ok) {\r\n      throw await this.repository.getErrorFromResponse(response)\r\n    }\r\n    return await response.json()\r\n  }\r\n\r\n  /**\r\n   * Retrieves a list of content types the user can create as children below the given content (allowed in the CTD)\r\n   * @param {LoadOptions<ContentType>} options Options for fetching the AllowedChildTypes\r\n   */\r\n  public async getExplicit(options: LoadOptions<ContentType>): Promise<ODataCollectionResponse<ContentType>> {\r\n    const contextPath = PathHelper.getContentUrl(options.idOrPath)\r\n    const params = ODataUrlBuilder.buildUrlParamString(this.repository.configuration, options.oDataOptions)\r\n    const path = PathHelper.joinPaths(\r\n      this.repository.configuration.repositoryUrl,\r\n      this.repository.configuration.oDataToken,\r\n      contextPath,\r\n      'EffectiveAllowedChildTypes',\r\n    )\r\n    const response = await this.repository.fetch(`${path}?${params}`, {\r\n      credentials: 'include',\r\n      method: 'GET',\r\n    })\r\n    if (!response.ok) {\r\n      throw await this.repository.getErrorFromResponse(response)\r\n    }\r\n    return await response.json()\r\n  }\r\n\r\n  constructor(private readonly repository: Repository) {}\r\n}\r\n", "import {\r\n  CommentData,\r\n  CommentWithoutCreatedByAndId,\r\n  DocumentData,\r\n  PreviewImageData,\r\n  PreviewRegenerateData,\r\n} from '../Models'\r\nimport { Repository } from './Repository'\r\n\r\nexport class Preview {\r\n  public regenerate(options: { idOrPath: number | string; abortController?: AbortController }) {\r\n    return this.repository.executeAction<any, PreviewRegenerateData>({\r\n      name: 'RegeneratePreviews',\r\n      idOrPath: options.idOrPath,\r\n      method: 'POST',\r\n      body: undefined,\r\n      requestInit: {\r\n        signal: options.abortController?.signal,\r\n      },\r\n    })\r\n  }\r\n\r\n  public async available(options: {\r\n    document: DocumentData\r\n    version?: string\r\n    page: number\r\n    abortController?: AbortController\r\n  }) {\r\n    const responseBody = await this.repository.executeAction<{ page: number }, PreviewImageData>({\r\n      idOrPath: options.document.idOrPath,\r\n      method: 'POST',\r\n      name: 'PreviewAvailable',\r\n      oDataOptions: {\r\n        version: options.version,\r\n      } as any,\r\n      body: {\r\n        page: options.page,\r\n      } as any,\r\n      requestInit: {\r\n        signal: options.abortController?.signal,\r\n      },\r\n    })\r\n\r\n    if (responseBody.PreviewAvailable) {\r\n      responseBody.PreviewImageUrl = `${options.document.hostName}${responseBody.PreviewAvailable}`\r\n      responseBody.ThumbnailImageUrl = `${options.document.hostName}${responseBody.PreviewAvailable.replace(\r\n        'preview',\r\n        'thumbnail',\r\n      )}`\r\n      return responseBody as PreviewImageData\r\n    }\r\n  }\r\n\r\n  public async getExistingImages(options: {\r\n    document: Partial<DocumentData>\r\n    version: string\r\n    abortController?: AbortController\r\n  }) {\r\n    if (options.document.pageCount && options.document.pageCount < -1) {\r\n      throw Error('Preview generation error')\r\n    }\r\n\r\n    if (options.document.idOrPath && options.document.hostName && options.document.pageCount) {\r\n      const response = await this.repository.executeAction({\r\n        idOrPath: options.document.idOrPath,\r\n        name: `GetExistingPreviewImages`,\r\n        method: 'POST',\r\n        body: {},\r\n        oDataOptions: {\r\n          select: 'all',\r\n          expand: 'all',\r\n          version: options.version,\r\n        } as any,\r\n        requestInit: {\r\n          signal: options.abortController?.signal,\r\n        },\r\n      })\r\n\r\n      const availablePreviews = (response as PreviewImageData[]).map((preview) => {\r\n        if (preview.PreviewAvailable) {\r\n          preview.PreviewImageUrl = `${options.document.hostName}${preview.PreviewAvailable}`\r\n          preview.ThumbnailImageUrl = `${options.document.hostName}${preview.PreviewAvailable.replace(\r\n            'preview',\r\n            'thumbnail',\r\n          )}`\r\n        }\r\n        return preview\r\n      })\r\n\r\n      const allPreviews: PreviewImageData[] = []\r\n      for (let i = 0; i < options.document.pageCount; i++) {\r\n        allPreviews[i] = availablePreviews[i] || ({ Index: i + 1 } as any)\r\n      }\r\n      return allPreviews\r\n    } else {\r\n      return []\r\n    }\r\n  }\r\n\r\n  public getPageCount(options: { idOrPath: number | string; abortController?: AbortController }): Promise<number> {\r\n    return this.repository.executeAction({\r\n      idOrPath: options.idOrPath,\r\n      name: 'GetPageCount',\r\n      method: 'POST',\r\n      requestInit: {\r\n        signal: options.abortController?.signal,\r\n      },\r\n    })\r\n  }\r\n\r\n  public check(options: {\r\n    idOrPath: number | string\r\n    generateMissing?: boolean\r\n    abortController?: AbortController\r\n  }): Promise<number> {\r\n    return this.repository.executeAction({\r\n      idOrPath: options.idOrPath,\r\n      name: 'CheckPreviews',\r\n      method: 'POST',\r\n      body: {\r\n        generateMissing: options.generateMissing,\r\n      },\r\n      requestInit: {\r\n        signal: options.abortController?.signal,\r\n      },\r\n    })\r\n  }\r\n\r\n  public getComments(options: { idOrPath: number | string; page: number; abortController?: AbortController }) {\r\n    return this.repository.executeAction<any, CommentData[]>({\r\n      idOrPath: options.idOrPath,\r\n      name: 'GetPreviewComments',\r\n      method: 'GET',\r\n      oDataOptions: {\r\n        page: options.page,\r\n      } as any,\r\n      requestInit: {\r\n        signal: options.abortController?.signal,\r\n      },\r\n    })\r\n  }\r\n\r\n  public addComment(options: {\r\n    idOrPath: number | string\r\n    comment: CommentWithoutCreatedByAndId\r\n    abortController?: AbortController\r\n  }) {\r\n    return this.repository.executeAction<CommentWithoutCreatedByAndId, CommentData>({\r\n      idOrPath: options.idOrPath,\r\n      name: 'AddPreviewComment',\r\n      method: 'POST',\r\n      body: options.comment,\r\n      requestInit: {\r\n        signal: options.abortController?.signal,\r\n      },\r\n    })\r\n  }\r\n\r\n  public deleteComment(options: { idOrPath: number | string; commentId: string; abortController?: AbortController }) {\r\n    return this.repository.executeAction<any, { modified: boolean }>({\r\n      idOrPath: options.idOrPath,\r\n      name: 'DeletePreviewComment',\r\n      method: 'POST',\r\n      body: {\r\n        id: options.commentId,\r\n      },\r\n      requestInit: {\r\n        signal: options.abortController?.signal,\r\n      },\r\n    })\r\n  }\r\n\r\n  constructor(private readonly repository: Repository) {}\r\n}\r\n", "/**\r\n * @module FieldSettings\r\n * @preferred\r\n *\r\n * @description Module for FieldSettings.\r\n *\r\n * FieldSetting object is the implementation of the configuration element in a Sense/Net Content Type Definition.\r\n * The FieldSetting of a Field contains properties that define the behavior of the Field - for example a Field can be configured as read only or compulsory to fill.\r\n * FieldSettings helps us to autogenerate type and schema TS files from Sense/Net CTDs and use these files to reach all the configuration options of the Content Types fields on\r\n * client-side e.g. for validation.\r\n *\r\n * This module also contains some FieldSetting related enums to use them as types in properties e.g. visibitily or datetime mode options.\r\n */\r\n\r\nimport * as ComplexTypes from './ComplexTypes'\r\n\r\n/**\r\n * Enum for Field visibility values.\r\n */\r\nexport enum FieldVisibility {\r\n  Show,\r\n  Hide,\r\n  Advanced,\r\n}\r\n/**\r\n * Enum for Field output method values.\r\n */\r\nexport enum OutputMethod {\r\n  Default,\r\n  Raw,\r\n  Text,\r\n  Html,\r\n}\r\n/**\r\n * Enum for Choice Field control values.\r\n */\r\nexport enum DisplayChoice {\r\n  DropDown = 'DropDown',\r\n  RadioButtons = 'RadioButtons',\r\n  CheckBoxes = 'CheckBoxes',\r\n}\r\n/**\r\n * Enum for DateTime Field mode values.\r\n */\r\nexport enum DateTimeMode {\r\n  None = 'None',\r\n  Date = 'Date',\r\n  DateAndTime = 'DateAndTime',\r\n}\r\n/**\r\n * Enum for DateTime Field precision values.\r\n */\r\nexport enum DateTimePrecision {\r\n  Millisecond = 'Millisecond',\r\n  Second = 'Second',\r\n  Minute = 'Minute',\r\n  Hour = 'Hour',\r\n  Day = 'Day',\r\n}\r\n/**\r\n * Type for LongText field editor values.\r\n */\r\nexport type TextType = 'LongText' | 'RichText' | 'AdvancedRichText'\r\n\r\n/**\r\n * Check if field setting is type of param\r\n * @template T\r\n * @param {FieldSetting} setting\r\n * @param {new () => T} type\r\n */\r\nexport function isFieldSettingOfType<T extends FieldSetting>(setting: FieldSetting, type: new () => T): setting is T {\r\n  return setting.Type === type.name\r\n}\r\n\r\nexport type FieldSetting = {\r\n  Name: string\r\n  Type: string\r\n  FieldClassName: string\r\n  DisplayName?: string\r\n  Description?: string\r\n  Icon?: string\r\n  ReadOnly?: boolean\r\n  Compulsory?: boolean\r\n  DefaultValue?: string\r\n  OutputMethod?: OutputMethod\r\n  VisibleBrowse?: FieldVisibility\r\n  VisibleNew?: FieldVisibility\r\n  VisibleEdit?: FieldVisibility\r\n  FieldIndex?: number\r\n  ControlHint?: string\r\n}\r\n\r\n// Used in ContentType, GenericContent, File, Image, TrashBag, TrashBin, Task\r\nexport type IntegerFieldSetting = FieldSetting & {\r\n  MinValue?: number\r\n  MaxValue?: number\r\n  ShowAsPercentage?: boolean\r\n  Step?: number\r\n}\r\n\r\nexport type TextFieldSetting = FieldSetting & {\r\n  MinLength?: number\r\n  MaxLength?: number\r\n}\r\n\r\n// Used in ContentType, GenericContent, File, ContentList, Device, Domain, Email, OrganizationalUnit, TrashBag, Group, Task, User\r\nexport type ShortTextFieldSetting = TextFieldSetting & {\r\n  Regex?: string\r\n}\r\n\r\n// Used in ContentType, GenericContent, Settings, IndexingSettings, ContentList, Workspace, Site, CustomListItem, User\r\nexport type NullFieldSetting = FieldSetting & {\r\n  SelectionRoots?: string[]\r\n}\r\n\r\n// Used in ContentType, GenericContent, File, HtmlTemplate, Image, ContentList, Aspect, Email, SmartFolder, Query, User\r\nexport type LongTextFieldSetting = TextFieldSetting & {\r\n  Rows?: number\r\n  TextType?: TextType\r\n  AppendModifications?: boolean\r\n}\r\n\r\nexport type RichTextFieldSetting = TextFieldSetting\r\n\r\n// Used in ContentType, File, User\r\nexport type BinaryFieldSetting = FieldSetting & {\r\n  IsText?: boolean\r\n}\r\n\r\n// Used in ContentType, GenericContent, ContentLink, ContentList, ImageLibrary, TrashBag, Workspace, Site, UserProfile, Group, Memo, Task, User\r\nexport type ReferenceFieldSetting = FieldSetting & {\r\n  AllowMultiple?: boolean\r\n  AllowedTypes?: string[]\r\n  SelectionRoots?: string[]\r\n  Query?: string /* original: ContentQuery */\r\n  FieldName?: string\r\n}\r\n\r\n// Used in ContentType, GenericContent, Image, Domain, Email, OrganizationalUnit, TrashBag, Workspace, Group, Memo, Task, User\r\nexport type DateTimeFieldSetting = FieldSetting & {\r\n  DateTimeMode?: DateTimeMode\r\n  Precision?: DateTimePrecision\r\n  EvaluatedDefaultValue?: string\r\n}\r\n\r\n// Used in GenericContent, ContentList, SmartFolder, Site, Memo, Task, Query, User\r\nexport type ChoiceFieldSetting = ShortTextFieldSetting & {\r\n  AllowExtraValue?: boolean\r\n  AllowMultiple?: boolean\r\n  Options?: ComplexTypes.ChoiceOption[]\r\n  DisplayChoice?: DisplayChoice\r\n  EnumTypeName?: string\r\n}\r\n\r\n// Used in GenericContent, File, Resource\r\nexport type NumberFieldSetting = FieldSetting & {\r\n  MinValue?: number\r\n  MaxValue?: number\r\n  Digits?: number\r\n  ShowAsPercentage?: boolean\r\n  Step?: number\r\n}\r\n\r\n// Used in GenericContent\r\nexport type RatingFieldSetting = ShortTextFieldSetting & {\r\n  Range?: number\r\n  Split?: number\r\n}\r\n\r\n// Used in User\r\nexport type PasswordFieldSetting = ShortTextFieldSetting & {\r\n  ReenterTitle?: string\r\n  ReenterDescription?: string\r\n  PasswordHistoryLength?: number\r\n}\r\n\r\nexport type ColorFieldSetting = TextFieldSetting & {\r\n  /**\r\n   * Semicolon separated list of colors in hexadecimal format.\r\n   * @example \"#ff0000;#f0d0c9;#e2a293;#d4735e;#65281a\"\r\n   * @type {string}\r\n   * @memberof ColorFieldSetting\r\n   */\r\n  Palette?: string\r\n}\r\n// Used in User\r\nexport type CaptchaFieldSetting = FieldSetting\r\n\r\nexport type BooleanFieldSetting = FieldSetting\r\n\r\nexport type CurrencyFieldSetting = NumberFieldSetting & {\r\n  /**\r\n   * Provides region information for specific cultures\r\n   * @type {string}\r\n   * @example 'en-US'\r\n   * @memberof CurrencyFieldSetting\r\n   */\r\n  Format?: string\r\n}\r\n", "/**\r\n * @module Schemas\r\n * @preferred\r\n * @description Module for ContentType schemas.\r\n *\r\n * A Content Type Definition in Sense/Net is an xml-format configuration file for defining Content Types. The xml configuration (CTD) holds information about the types name and description\r\n * properties that control how content of this type look and behave (icon, preview generation, indexing), set of fields, etc. This information about the type and its Fields helps us for example\r\n * building forms. Based on the Field definitions we can render a Field with its DisplayName as a label or validate the Field on save by its validation related configs.\r\n *\r\n * This module provides us description of this Content schemas in Typesript.\r\n *\r\n * The ```Schema``` class represents an object that holds the basic information about the Content Type (name, icon, ect.) and an array of its ```FieldSettings``` and their full configuration.\r\n */\r\n\r\nimport * as FieldSettings from './FieldSettings'\r\n\r\n/**\r\n * Class that represents a Schema.\r\n *\r\n * It represents an object that holds the basic information about the Content Type (name, icon, ect.) and an array of its ```FieldSettings``` and their full configuration.\r\n */\r\nexport type Schema = {\r\n  ContentTypeName: string\r\n  ParentTypeName?: string\r\n  Icon: string\r\n  DisplayName: string\r\n  Description: string\r\n  AllowedChildTypes: string[]\r\n  FieldSettings: FieldSettings.FieldSetting[]\r\n  HandlerName: string\r\n}\r\n\r\nexport const SchemaStore: Schema[] = [\r\n  {\r\n    ContentTypeName: 'ContentType',\r\n    DisplayName: '$Ctd-ContentType,DisplayName',\r\n    Description: '$Ctd-ContentType,Description',\r\n    Icon: 'ContentType',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'Id',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Id',\r\n        Description: 'A unique ID for the Content.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'ParentId',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Id',\r\n        Description: 'A unique ID for the Content.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'VersionId',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'Name',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Uri name',\r\n        ReadOnly: false,\r\n        Compulsory: true,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'CreatedById',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'ModifiedById',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'Version',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.VersionField',\r\n        DisplayName: 'Version',\r\n        Description: 'Latest version number.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'Path',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Path',\r\n        Description: 'Content type path.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'Depth',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'IsSystemContent',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'System Content',\r\n        Description:\r\n          'This field is true if content is in a system folder/trash or the content is a system folder/file.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'HandlerName',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Handler Name',\r\n        Description: 'Fully Qualified Name.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'ParentTypeName',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Parent Type Name',\r\n        Description: 'Name of the parent content type.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'DisplayName',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Name',\r\n        Description: 'User friendly name of the content type.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'Description',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Description',\r\n        Description: 'Longer description of the content type.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'Icon',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Icon',\r\n        Description: 'Content type icon.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'BinaryFieldSetting',\r\n        IsText: true,\r\n        Name: 'Binary',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BinaryField',\r\n        DisplayName: 'Binary',\r\n        Description: 'The content type definition in XML format.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        DefaultValue:\r\n          '<?xml version=\"1.0\" encoding=\"utf-8\"?><ContentType name=\"MyType\" parentType=\"GenericContent\" handler=\"SenseNet.ContentRepository.GenericContent\" xmlns=\"http://schemas.sensenet.com/SenseNet/ContentRepository/ContentTypeDefinition\">  <DisplayName>MyType</DisplayName>  <Description></Description>  <Icon>Content</Icon>  <AllowIncrementalNaming>true</AllowIncrementalNaming>  <AllowedChildTypes>ContentTypeName1,ContentTypeName2</AllowedChildTypes>  <Fields>    <Field name=\"ShortTextField\" type=\"ShortText\">      <DisplayName>ShortTextField</DisplayName>      <Description></Description>      <Configuration>        <MaxLength>100</MaxLength>        <MinLength>0</MinLength>        <Regex>[a-zA-Z0-9]*$</Regex>        <ReadOnly>false</ReadOnly>        <Compulsory>false</Compulsory>        <DefaultValue></DefaultValue>        <VisibleBrowse>Show|Hide|Advanced</VisibleBrowse>        <VisibleEdit>Show|Hide|Advanced</VisibleEdit>        <VisibleNew>Show|Hide|Advanced</VisibleNew>      </Configuration>    </Field>    <Field name=\"LongTextField\" type=\"LongText\">      <DisplayName>LongTextField</DisplayName>      <Description></Description>      <Configuration>        <MaxLength>100</MaxLength>        <MinLength>0</MinLength>        <TextType>LongText|RichText|AdvancedRichText</TextType>        <ReadOnly>false</ReadOnly>        <Compulsory>false</Compulsory>        <DefaultValue></DefaultValue>        <VisibleBrowse>Show|Hide|Advanced</VisibleBrowse>        <VisibleEdit>Show|Hide|Advanced</VisibleEdit>        <VisibleNew>Show|Hide|Advanced</VisibleNew>      </Configuration>    </Field>    <Field name=\"NumberField\" type=\"Number\">      <DisplayName>NumberField</DisplayName>      <Description></Description>      <Configuration>        <MinValue>0</MinValue>        <MaxValue>100.5</MaxValue>        <Digits>2</Digits>        <ReadOnly>false</ReadOnly>        <Compulsory>false</Compulsory>        <DefaultValue></DefaultValue>        <VisibleBrowse>Show|Hide|Advanced</VisibleBrowse>        <VisibleEdit>Show|Hide|Advanced</VisibleEdit>        <VisibleNew>Show|Hide|Advanced</VisibleNew>      </Configuration>    </Field>    <Field name=\"IntegerField\" type=\"Integer\">      <DisplayName>IntegerField</DisplayName>      <Description></Description>      <Configuration>        <MinValue>0</MinValue>        <MaxValue>100</MaxValue>        <ReadOnly>false</ReadOnly>        <Compulsory>false</Compulsory>        <DefaultValue></DefaultValue>        <VisibleBrowse>Show|Hide|Advanced</VisibleBrowse>        <VisibleEdit>Show|Hide|Advanced</VisibleEdit>        <VisibleNew>Show|Hide|Advanced</VisibleNew>      </Configuration>    </Field>    <Field name=\"BooleanField\" type=\"Boolean\">      <DisplayName>BooleanField</DisplayName>      <Description></Description>      <Configuration>        <ReadOnly>false</ReadOnly>        <Compulsory>false</Compulsory>        <DefaultValue></DefaultValue>        <VisibleBrowse>Show|Hide|Advanced</VisibleBrowse>        <VisibleEdit>Show|Hide|Advanced</VisibleEdit>        <VisibleNew>Show|Hide|Advanced</VisibleNew>      </Configuration>    </Field>    <Field name=\"ChoiceField\" type=\"Choice\">      <DisplayName>ChoiceField</DisplayName>      <Description></Description>      <Configuration>        <AllowMultiple>false</AllowMultiple>        <AllowExtraValue>false</AllowExtraValue>        <Options>          <Option selected=\"true\">1</Option>          <Option>2</Option>        </Options>        <ReadOnly>false</ReadOnly>        <Compulsory>false</Compulsory>        <DefaultValue></DefaultValue>        <VisibleBrowse>Show|Hide|Advanced</VisibleBrowse>        <VisibleEdit>Show|Hide|Advanced</VisibleEdit>        <VisibleNew>Show|Hide|Advanced</VisibleNew>      </Configuration>    </Field>    <Field name=\"DateTimeField\" type=\"DateTime\">      <DisplayName>DateTimeField</DisplayName>      <Description></Description>      <Configuration>        <DateTimeMode>DateAndTime</DateTimeMode>        <Precision>Second</Precision>        <ReadOnly>false</ReadOnly>        <Compulsory>false</Compulsory>        <DefaultValue></DefaultValue>        <VisibleBrowse>Show|Hide|Advanced</VisibleBrowse>        <VisibleEdit>Show|Hide|Advanced</VisibleEdit>        <VisibleNew>Show|Hide|Advanced</VisibleNew>      </Configuration>    </Field>    <Field name=\"ReferenceField\" type=\"Reference\">      <DisplayName>ReferenceField</DisplayName>      <Description></Description>      <Configuration>        <AllowMultiple>true</AllowMultiple>        <AllowedTypes>          <Type>Type1</Type>          <Type>Type2</Type>        </AllowedTypes>        <SelectionRoot>          <Path>/Root/Path1</Path>          <Path>/Root/Path2</Path>        </SelectionRoot>        <DefaultValue>/Root/Path1,/Root/Path2</DefaultValue>        <ReadOnly>false</ReadOnly>        <Compulsory>false</Compulsory>        <VisibleBrowse>Show|Hide|Advanced</VisibleBrowse>        <VisibleEdit>Show|Hide|Advanced</VisibleEdit>        <VisibleNew>Show|Hide|Advanced</VisibleNew>      </Configuration>    </Field>    <Field name=\"BinaryField\" type=\"Binary\">      <DisplayName>BinaryField</DisplayName>      <Description></Description>      <Configuration>        <IsText>true</IsText>        <ReadOnly>false</ReadOnly>        <Compulsory>false</Compulsory>        <DefaultValue></DefaultValue>        <VisibleBrowse>Show|Hide|Advanced</VisibleBrowse>        <VisibleEdit>Show|Hide|Advanced</VisibleEdit>        <VisibleNew>Show|Hide|Advanced</VisibleNew>      </Configuration>    </Field>  </Fields></ContentType>',\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.BinaryFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        Name: 'CreatedBy',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Created by',\r\n        Description: 'Content creator.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'CreationDate',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Creation date',\r\n        Description: 'Content creation date.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        Name: 'ModifiedBy',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Modified by',\r\n        Description: 'Content was last modified by the given user.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        Name: 'ModificationDate',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Modification date',\r\n        Description: 'Content was last modified on the given date.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'EnableLifespan',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Enable Lifespan handling',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.Schema.ContentType',\r\n  },\r\n  {\r\n    ContentTypeName: 'GenericContent',\r\n    DisplayName: '$Ctd-GenericContent,DisplayName',\r\n    Description: '$Ctd-GenericContent,Description',\r\n    Icon: 'Content',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'Id',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Id',\r\n        Description: 'Unique Id for the content.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'ParentId',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Parent Id',\r\n        Description: 'Id of the parent content.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'OwnerId',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Owner Id',\r\n        Description: 'Id of the owner.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        Name: 'Owner',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Owner',\r\n        Description: 'Content owner.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'VersionId',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Version Id',\r\n        Description: 'Database row Id of current version.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'Icon',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Icon',\r\n        Description: 'Icon',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'Name',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Name',\r\n        Description: 'Specify a name that will appear in the address bar of the browser.',\r\n        ReadOnly: false,\r\n        Compulsory: true,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n        ControlHint: 'sn:Name',\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'CreatedById',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Created By (Id)',\r\n        Description: 'Id of creator.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'ModifiedById',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Last Modified By (Id)',\r\n        Description: 'Id of last modifier.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'Version',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.VersionField',\r\n        DisplayName: 'Version',\r\n        Description: 'Version number.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'Path',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Path',\r\n        Description: 'Content path in the repository.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'Depth',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Tree Depth',\r\n        Description: 'Content level in the tree. Root level is 0.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'IsSystemContent',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'System Content',\r\n        Description:\r\n          'This field is true if content is in a system folder/trash or the content is a system folder/file.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'IsFolder',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Folder',\r\n        Description: 'This field is true if content can contain other content.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'DisplayName',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Display Name',\r\n        Description: 'Content name. You can set any name you prefer without any restrictions.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n        ControlHint: 'sn:DisplayName',\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'Description',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Description',\r\n        Description: 'Description of the content.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n        ControlHint: 'sn:RichText',\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'Hidden',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Hidden',\r\n        Description: 'If checked, content will not show up in navigation.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'Index',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Index',\r\n        Description: 'Content order in navigation. Numbers closer to 0 will appear first.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'EnableLifespan',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Enable Lifespan',\r\n        Description: 'Specify whether you want to define starting and end date for the validity of this content.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'ValidFrom',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Valid From',\r\n        Description: 'This content will appear on the date you set if lifespan handling is enabled for this content.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'ValidTill',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Valid Till',\r\n        Description:\r\n          'This content will disappear on the date you set if lifespan handling is enabled for this content.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'AllowedChildTypes',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.AllowedChildTypesField',\r\n        DisplayName: 'Allowed child types',\r\n        Description:\r\n          'You can get and set which content types are explicitly allowed to be created under this content. It is a local setting.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'EffectiveAllowedChildTypes',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.AllowedChildTypesField',\r\n        DisplayName: 'Effective allowed child types',\r\n        Description:\r\n          'You can get which content types are effective allowed to be created under this content. If there is no local setting, the global setting takes effect.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: '0', Text: 'Inherited', Enabled: true, Selected: true },\r\n          { Value: '1', Text: 'None', Enabled: true, Selected: false },\r\n          { Value: '2', Text: 'Major only', Enabled: true, Selected: false },\r\n          { Value: '3', Text: 'Major and minor', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: '',\r\n        Name: 'VersioningMode',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.VersioningModeField',\r\n        DisplayName: 'Versioning Mode For Current Content',\r\n        Description: 'It shows the versioning mode of the current content.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: '0', Text: 'Inherited', Enabled: true, Selected: true },\r\n          { Value: '1', Text: 'None', Enabled: true, Selected: false },\r\n          { Value: '2', Text: 'Major only', Enabled: true, Selected: false },\r\n          { Value: '3', Text: 'Major and minor', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: '',\r\n        Name: 'InheritableVersioningMode',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.InheritableVersioningModeField',\r\n        DisplayName: 'Version history',\r\n        Description:\r\n          'Specify whether the system should create a new version whenever you create or modify a content below this content.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n        ControlHint: 'sn:VersioningModeChoice',\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        Name: 'CreatedBy',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Created by',\r\n        Description: 'Content creator.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'CreationDate',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Creation date',\r\n        Description: 'Content creation date.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        Name: 'ModifiedBy',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Modified By',\r\n        Description: 'Content was last modified by this user.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'ModificationDate',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Modification Date',\r\n        Description: 'Content was last modified on this date.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: '0', Text: 'Inherited', Enabled: true, Selected: true },\r\n          { Value: '1', Text: 'Off', Enabled: true, Selected: false },\r\n          { Value: '2', Text: 'On', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: '',\r\n        Name: 'ApprovingMode',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ApprovingModeField',\r\n        DisplayName: 'Content Approval For Current Content',\r\n        Description: 'It shows the approval mode of the current content.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: '0', Text: 'Inherited', Enabled: true, Selected: true },\r\n          { Value: '1', Text: 'Off', Enabled: true, Selected: false },\r\n          { Value: '2', Text: 'On', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: '',\r\n        Name: 'InheritableApprovingMode',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.InheritableApprovingModeField',\r\n        DisplayName: 'Content approval',\r\n        Description:\r\n          'Specify whether new or changed content below the current one should remain in a draft state until they have been approved.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n        ControlHint: 'sn:ApprovingModeChoice',\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'Locked',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Locked',\r\n        Description: 'It shows whether the content is checked out or not.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        Name: 'CheckedOutTo',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Checked Out To',\r\n        Description: 'The user currently locking the content.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'TrashDisabled',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Disable Trash',\r\n        Description:\r\n          'You can disable trash for this content and its children. If set, you can not restore deleted content.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        DefaultValue: 'false',\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: '0', Text: 'Finalized', Enabled: true, Selected: false },\r\n          { Value: '1', Text: 'Creating', Enabled: true, Selected: false },\r\n          { Value: '2', Text: 'Modifying', Enabled: true, Selected: false },\r\n          { Value: '3', Text: 'ModifyingLocked', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: 'SenseNet.ContentRepository.Storage.ContentSavingState',\r\n        Name: 'SavingState',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ChoiceField',\r\n        DisplayName: 'Saving state',\r\n        Description: 'State of multi-step saving.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'ExtensionData',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Extension data',\r\n        Description: 'You can set extra data in this field which is useful when extending a content.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        Name: 'BrowseApplication',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Reference To Browse Application',\r\n        Description: 'Set this, if you would like to override the default browse application.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'Approvable',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Approvable By Current User',\r\n        Description:\r\n          \"This fileld is true if the content is in 'pending' state and can be approved by the current user.\",\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'IsTaggable',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Enable Tagging',\r\n        Description: 'Specify whether you would like to enable tagging capability for this content.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        DefaultValue: 'false',\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'Tags',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Tags',\r\n        Description: 'List of tags and creators of them separated by commas.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n        ControlHint: 'sn:TagList',\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'IsRateable',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Enable Rating',\r\n        Description: 'Specify whether you would like to enable rating capability for this content.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        DefaultValue: 'false',\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'RateStr',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Raw value of rating',\r\n        Description: '',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'NumberFieldSetting',\r\n        Name: 'RateAvg',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.NumberField',\r\n        DisplayName: 'Average rate',\r\n        Description: 'Average rate of the content.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NumberFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'RateCount',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Rate count',\r\n        Description: 'Count of rates.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'RatingFieldSetting',\r\n        Range: 5,\r\n        Split: 1,\r\n        Name: 'Rate',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.RatingField',\r\n        DisplayName: 'Rate',\r\n        Description: '',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.RatingFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'Publishable',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Publishable By Current User',\r\n        Description: 'This fileld is true if the content can be published by the current user.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: true,\r\n        Name: 'Versions',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Versions',\r\n        Description: 'Content version history.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'CheckInComments',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Checkin comments',\r\n        Description: 'Comments for a new version.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'RejectReason',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Reject reason',\r\n        Description: 'The reason why the content was rejected.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        AllowedTypes: ['Workspace'],\r\n        Name: 'Workspace',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Workspace',\r\n        Description: 'The container workspace of the content.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'BrowseUrl',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Browse url',\r\n        Description: '',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Name: 'VersionModifiedBy',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Version is Modified By',\r\n        Description: 'Version was last modified by this user.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        OutputMethod: 0,\r\n        VisibleBrowse: 1,\r\n        VisibleEdit: 1,\r\n        VisibleNew: 1,\r\n        Type: 'ReferenceFieldSetting',\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'VersionModificationDate',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Versions Modification Date',\r\n        Description: 'Version was last modified on this date.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        OutputMethod: 0,\r\n        VisibleBrowse: 1,\r\n        VisibleEdit: 1,\r\n        VisibleNew: 1,\r\n        Type: 'DateTimeFieldSetting',\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Name: 'VersionCreatedBy',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Version is created By',\r\n        Description: 'Version was last created by this user.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        OutputMethod: 0,\r\n        VisibleBrowse: 1,\r\n        VisibleEdit: 1,\r\n        VisibleNew: 1,\r\n        Type: 'ReferenceFieldSetting',\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'VersionCreationDate',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Versions Creation Date',\r\n        Description: 'Version was created on this date.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        OutputMethod: 0,\r\n        VisibleBrowse: 1,\r\n        VisibleEdit: 1,\r\n        VisibleNew: 1,\r\n        Type: 'DateTimeFieldSetting',\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.GenericContent',\r\n  },\r\n  {\r\n    ContentTypeName: 'ContentLink',\r\n    ParentTypeName: 'GenericContent',\r\n    DisplayName: '$Ctd-ContentLink,DisplayName',\r\n    Description: '$Ctd-ContentLink,Description',\r\n    Icon: 'Folder',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        Name: 'Link',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Linked content',\r\n        Description: 'Set this reference to the Content to link.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.ContentLink',\r\n  },\r\n  {\r\n    ContentTypeName: 'File',\r\n    ParentTypeName: 'GenericContent',\r\n    DisplayName: '$Ctd-File,DisplayName',\r\n    Description: '$Ctd-File,Description',\r\n    Icon: 'File',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'BinaryFieldSetting',\r\n        Name: 'Binary',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BinaryField',\r\n        DisplayName: 'Binary',\r\n        Description: 'The binary content of the document.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.BinaryFieldSetting,\r\n      {\r\n        Type: 'NumberFieldSetting',\r\n        Name: 'Size',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.NumberField',\r\n        DisplayName: 'Size',\r\n        Description: 'Size of the binary document.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NumberFieldSetting,\r\n      {\r\n        Type: 'NumberFieldSetting',\r\n        Name: 'FullSize',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.NumberField',\r\n        DisplayName: 'Full size',\r\n        Description: 'The total amount of space the Document occupies, counting all versions.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NumberFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'PageCount',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Page count',\r\n        Description:\r\n          'Read-only field for storing the number of pages in the document. It is filled by the document preview generator.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        DefaultValue: '-4',\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'MimeType',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Document MIME type',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'Shapes',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Shapes',\r\n        Description:\r\n          'Stores data used for document preview (redaction, highlight, annotation shapes). This value can be modified by the document preview plugin.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'PageAttributes',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Page attributes',\r\n        Description:\r\n          'Stores data used for document preview (for example page rotation). This value can be modified by the document preview plugin.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'Watermark',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Watermark',\r\n        Description:\r\n          'The text that is displayed as a watermark on the document preview. The format can be set by modifying the Document Preview settings.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.File',\r\n  },\r\n  {\r\n    ContentTypeName: 'DynamicJsonContent',\r\n    ParentTypeName: 'File',\r\n    DisplayName: 'Dynamic JSON content',\r\n    Description: '',\r\n    Icon: 'Settings',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.Portal.Handlers.DynamicJsonContent',\r\n  },\r\n  {\r\n    ContentTypeName: 'ExecutableFile',\r\n    ParentTypeName: 'File',\r\n    DisplayName: '$Ctd-ExecutableFile,DisplayName',\r\n    Description: '$Ctd-ExecutableFile,Description',\r\n    Icon: 'Application',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.File',\r\n  },\r\n  {\r\n    ContentTypeName: 'HtmlTemplate',\r\n    ParentTypeName: 'File',\r\n    DisplayName: '$Ctd-HtmlTemplate,DisplayName',\r\n    Description: '$Ctd-HtmlTemplate,Description',\r\n    Icon: 'File',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'TemplateText',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Template text',\r\n        Description: 'Shows the contents of the html file as a text.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.LongTextFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.Portal.UI.HtmlTemplate',\r\n  },\r\n  {\r\n    ContentTypeName: 'Image',\r\n    ParentTypeName: 'File',\r\n    DisplayName: '$Ctd-Image,DisplayName',\r\n    Description: '$Ctd-Image,Description',\r\n    Icon: 'Image',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'Keywords',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Keywords',\r\n        Description: 'Keywords describing the image.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'DateTaken',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Date taken',\r\n        Description: 'Date the photo was taken, if applicable.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'Width',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Width',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'Height',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Height',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.Image',\r\n  },\r\n  {\r\n    ContentTypeName: 'PreviewImage',\r\n    ParentTypeName: 'Image',\r\n    DisplayName: '$Ctd-PreviewImage,DisplayName',\r\n    Description: '$Ctd-PreviewImage,Description',\r\n    Icon: 'Image',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.Image',\r\n  },\r\n  {\r\n    ContentTypeName: 'Settings',\r\n    ParentTypeName: 'File',\r\n    DisplayName: '$Ctd-Settings,DisplayName',\r\n    Description: '$Ctd-Settings,Description',\r\n    Icon: 'Settings',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'GlobalOnly',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Global only',\r\n        Description:\r\n          'Switching this ON will prevent the creation of local settings with the same name preventing others to gain access to the contents of this settings file through inheritance.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.NullFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.Settings',\r\n  },\r\n  {\r\n    ContentTypeName: 'IndexingSettings',\r\n    ParentTypeName: 'Settings',\r\n    DisplayName: '$Ctd-IndexingSettings,DisplayName',\r\n    Description: '$Ctd-IndexingSettings,Description',\r\n    Icon: 'Settings',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'TextExtractorInstances',\r\n        FieldClassName: 'SenseNet.Search.TextExtractorsField',\r\n        DisplayName: 'Text extractor instances',\r\n        Description: 'Dynamically generated text extractor instance collection.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.Search.IndexingSettings',\r\n  },\r\n  {\r\n    ContentTypeName: 'LoggingSettings',\r\n    ParentTypeName: 'Settings',\r\n    DisplayName: '$Ctd-LoggingSettings,DisplayName',\r\n    Description: '$Ctd-LoggingSettings,Description',\r\n    Icon: 'Settings',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.LoggingSettings',\r\n  },\r\n  {\r\n    ContentTypeName: 'PortalSettings',\r\n    ParentTypeName: 'Settings',\r\n    DisplayName: '$Ctd-PortalSettings,DisplayName',\r\n    Description: '$Ctd-PortalSettings,Description',\r\n    Icon: 'Settings',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.Portal.PortalSettings',\r\n  },\r\n  {\r\n    ContentTypeName: 'SystemFile',\r\n    ParentTypeName: 'File',\r\n    DisplayName: '$Ctd-SystemFile,DisplayName',\r\n    Description: '$Ctd-SystemFile,Description',\r\n    Icon: 'File',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.File',\r\n  },\r\n  {\r\n    ContentTypeName: 'Resource',\r\n    ParentTypeName: 'SystemFile',\r\n    DisplayName: '$Ctd-Resource,DisplayName',\r\n    Description: '$Ctd-Resource,Description',\r\n    Icon: 'Resource',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'NumberFieldSetting',\r\n        Name: 'Downloads',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.NumberField',\r\n        DisplayName: 'Downloads',\r\n        Description: 'The number of downloads.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NumberFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.i18n.Resource',\r\n  },\r\n  {\r\n    ContentTypeName: 'Folder',\r\n    ParentTypeName: 'GenericContent',\r\n    DisplayName: '$Ctd-Folder,DisplayName',\r\n    Description: '$Ctd-Folder,Description',\r\n    Icon: 'Folder',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.Folder',\r\n  },\r\n  {\r\n    ContentTypeName: 'ContentList',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-ContentList,DisplayName',\r\n    Description: '$Ctd-ContentList,Description',\r\n    Icon: 'ContentList',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'ContentListDefinition',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'List Definition',\r\n        Description: 'XML definition for additional fields.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'DefaultView',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Default view',\r\n        Description: 'The default View to use.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: true,\r\n        AllowedTypes: [],\r\n        Name: 'AvailableViews',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Available views',\r\n        Description: 'Select global content list views here that you want to offer users to choose from.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: true,\r\n        AllowedTypes: [],\r\n        Name: 'FieldSettingContents',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'FieldSetting content',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: true,\r\n        AllowedTypes: [],\r\n        Name: 'AvailableContentTypeFields',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Available ContentType Field content.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'ListEmail',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Email address of Content List',\r\n        Description: 'Emails sent to this address will be imported as Email content into the Document Library.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'ExchangeSubscriptionId',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Exchange Subscription Id',\r\n        Description: 'Ctd-ContentListen-USExchangeSubscriptionId-Descriptione',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'OverwriteFiles',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Overwrite files with same name',\r\n        Description:\r\n          'If checked new emails and attachments with the same name will overwrite existing items in list. Otherwise increment suffix is used in the name of new mail items.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          {\r\n            Value: 'email',\r\n            Text: 'Save all attachments as children of separate Email content',\r\n            Enabled: true,\r\n            Selected: true,\r\n          },\r\n          { Value: 'root', Text: 'Save all attachments in root', Enabled: true, Selected: false },\r\n          {\r\n            Value: 'subject',\r\n            Text: 'Save all attachments in folders grouped by subject',\r\n            Enabled: true,\r\n            Selected: false,\r\n          },\r\n          {\r\n            Value: 'sender',\r\n            Text: 'Save all attachments in folders grouped by sender',\r\n            Enabled: true,\r\n            Selected: false,\r\n          },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: '',\r\n        Name: 'GroupAttachments',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ChoiceField',\r\n        DisplayName: 'Group attachments',\r\n        Description: 'Select the appropriate option to group attachment files under folders or email content or not.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'SaveOriginalEmail',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Save original email',\r\n        Description: 'A separate .eml file will be created for every incoming email.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        SelectionRoots: ['/Root/System/Schema/ContentTypes/GenericContent/Workflow/MailProcessorWorkflow'],\r\n        Name: 'IncomingEmailWorkflow',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Incoming email workflow',\r\n        Description: 'Select the workflow to be executed on every incoming email.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        DefaultValue: '/Root/System/Schema/ContentTypes/GenericContent/Workflow/MailProcessorWorkflow',\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'OnlyFromLocalGroups',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Accept e-mails only from users in local groups',\r\n        Description: 'If set, only users that are members of any local group are able to send e-mails to this library.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'InboxFolder',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Inbox folder',\r\n        Description: 'A relative path of a folder to store incoming e-mails.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        AllowedTypes: ['User'],\r\n        SelectionRoots: ['/Root/IMS'],\r\n        Name: 'OwnerWhenVisitor',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Owner of items created by visitor',\r\n        Description:\r\n          \"If a Visitor adds content to this list, this user will be set as the creator instead of the Visitor. This prevents visitors see each others' content.\",\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        DefaultValue: '/Root/IMS/BuiltIn/Portal/Admin',\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.ContentList',\r\n  },\r\n  {\r\n    ContentTypeName: 'Aspect',\r\n    ParentTypeName: 'ContentList',\r\n    DisplayName: '$Ctd-Aspect,DisplayName',\r\n    Description: '$Ctd-Aspect,Description',\r\n    Icon: 'Aspect',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'AspectDefinition',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Aspect definition',\r\n        Description: 'Definition of the extension in XML format.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.LongTextFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.Aspect',\r\n  },\r\n  {\r\n    ContentTypeName: 'ItemList',\r\n    ParentTypeName: 'ContentList',\r\n    DisplayName: '$Ctd-ItemList,DisplayName',\r\n    Description: '$Ctd-ItemList,Description',\r\n    Icon: 'ContentList',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.ContentList',\r\n  },\r\n  {\r\n    ContentTypeName: 'CustomList',\r\n    ParentTypeName: 'ItemList',\r\n    DisplayName: '$Ctd-CustomList,DisplayName',\r\n    Description: '$Ctd-CustomList,Description',\r\n    Icon: 'ContentList',\r\n    AllowedChildTypes: ['ListItem'],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.ContentList',\r\n  },\r\n  {\r\n    ContentTypeName: 'MemoList',\r\n    ParentTypeName: 'ItemList',\r\n    DisplayName: '$Ctd-MemoList,DisplayName',\r\n    Description: '$Ctd-MemoList,Description',\r\n    Icon: 'ContentList',\r\n    AllowedChildTypes: ['Memo'],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.ContentList',\r\n  },\r\n  {\r\n    ContentTypeName: 'TaskList',\r\n    ParentTypeName: 'ItemList',\r\n    DisplayName: '$Ctd-TaskList,DisplayName',\r\n    Description: '$Ctd-TaskList,Description',\r\n    Icon: 'ContentList',\r\n    AllowedChildTypes: ['Task'],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.ContentList',\r\n  },\r\n  {\r\n    ContentTypeName: 'Library',\r\n    ParentTypeName: 'ContentList',\r\n    DisplayName: '$Ctd-Library,DisplayName',\r\n    Description: '$Ctd-Library,Description',\r\n    Icon: 'ContentList',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.ContentList',\r\n  },\r\n  {\r\n    ContentTypeName: 'DocumentLibrary',\r\n    ParentTypeName: 'Library',\r\n    DisplayName: '$Ctd-DocumentLibrary,DisplayName',\r\n    Description: '$Ctd-DocumentLibrary,Description',\r\n    Icon: 'ContentList',\r\n    AllowedChildTypes: ['Folder', 'File'],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.ContentList',\r\n  },\r\n  {\r\n    ContentTypeName: 'ImageLibrary',\r\n    ParentTypeName: 'Library',\r\n    DisplayName: '$Ctd-ImageLibrary,DisplayName',\r\n    Description: '$Ctd-ImageLibrary,Description',\r\n    Icon: 'ContentList',\r\n    AllowedChildTypes: ['Folder', 'Image'],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        AllowedTypes: ['Image'],\r\n        Name: 'CoverImage',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Cover image',\r\n        Description: 'Select cover image',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.ContentList',\r\n  },\r\n  {\r\n    ContentTypeName: 'Device',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-Device,DisplayName',\r\n    Description: '$Ctd-Device,Description',\r\n    Icon: 'Device',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'UserAgentPattern',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'User agent string',\r\n        Description: 'A regular expression to match the user agent string of the browser.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ApplicationModel.Device',\r\n  },\r\n  {\r\n    ContentTypeName: 'Domain',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-Domain,DisplayName',\r\n    Description: '$Ctd-Domain,Description',\r\n    Icon: 'Domain',\r\n    AllowedChildTypes: ['User', 'Group', 'OrganizationalUnit'],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'SyncGuid',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'SyncGuid',\r\n        Description: 'GUID of corresponding AD object.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'LastSync',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'LastSync',\r\n        Description: 'Date of last synchronization.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.Domain',\r\n  },\r\n  {\r\n    ContentTypeName: 'Domains',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-Domains,DisplayName',\r\n    Description: '$Ctd-Domains,Description',\r\n    Icon: 'Folder',\r\n    AllowedChildTypes: ['Domain'],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.Folder',\r\n  },\r\n  {\r\n    ContentTypeName: 'Email',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-Email,DisplayName',\r\n    Description: '$Ctd-Email,Description',\r\n    Icon: 'Document',\r\n    AllowedChildTypes: ['File'],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'From',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'From',\r\n        Description: 'Sender name and address.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        TextType: 'RichText',\r\n        Name: 'Body',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Body',\r\n        Description: 'Body of email.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n        ControlHint: 'sn:RichText',\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'Sent',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Sent',\r\n        Description: 'Date of sending.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.Folder',\r\n  },\r\n  {\r\n    ContentTypeName: 'OrganizationalUnit',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-OrganizationalUnit,DisplayName',\r\n    Description: '$Ctd-OrganizationalUnit,Description',\r\n    Icon: 'OrgUnit',\r\n    AllowedChildTypes: ['User', 'Group', 'OrganizationalUnit'],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'SyncGuid',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'SyncGuid',\r\n        Description: 'GUID of corresponding AD object.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'LastSync',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'LastSync',\r\n        Description: 'Date of last synchronization.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.OrganizationalUnit',\r\n  },\r\n  {\r\n    ContentTypeName: 'PortalRoot',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-PortalRoot,DisplayName',\r\n    Description: '$Ctd-PortalRoot,Description',\r\n    Icon: 'PortalRoot',\r\n    AllowedChildTypes: [\r\n      'Folder',\r\n      'SystemFolder',\r\n      'TrashBin',\r\n      'ContentList',\r\n      'CustomList',\r\n      'Sites',\r\n      'Domains',\r\n      'Profiles',\r\n      'Resources',\r\n      'Workspace',\r\n    ],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.PortalRoot',\r\n  },\r\n  {\r\n    ContentTypeName: 'ProfileDomain',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-ProfileDomain,DisplayName',\r\n    Description: '$Ctd-ProfileDomain,Description',\r\n    Icon: 'Domain',\r\n    AllowedChildTypes: ['UserProfile'],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.Folder',\r\n  },\r\n  {\r\n    ContentTypeName: 'Profiles',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-Profiles,DisplayName',\r\n    Description: '$Ctd-Profiles,Description',\r\n    Icon: 'Folder',\r\n    AllowedChildTypes: ['ProfileDomain'],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.Folder',\r\n  },\r\n  {\r\n    ContentTypeName: 'RuntimeContentContainer',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-RuntimeContentContainer,DisplayName',\r\n    Description: '$Ctd-RuntimeContentContainer,Description',\r\n    Icon: 'Folder',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.RuntimeContentContainer',\r\n  },\r\n  {\r\n    ContentTypeName: 'Sites',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-Sites,DisplayName',\r\n    Description: '$Ctd-Sites,Description',\r\n    Icon: 'Site',\r\n    AllowedChildTypes: ['Site'],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.Folder',\r\n  },\r\n  {\r\n    ContentTypeName: 'SmartFolder',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-SmartFolder,DisplayName',\r\n    Description: '$Ctd-SmartFolder,Description',\r\n    Icon: 'SmartFolder',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'Query',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Query',\r\n        Description: 'Please give a query here that you want to use for collecting the children of this smart folder.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n        ControlHint: 'sn:QueryBuilder',\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: '0', Text: 'Default', Enabled: true, Selected: false },\r\n          { Value: '1', Text: 'Enabled', Enabled: true, Selected: false },\r\n          { Value: '2', Text: 'Disabled', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: 'SenseNet.Search.FilterStatus',\r\n        Name: 'EnableAutofilters',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ChoiceField',\r\n        DisplayName: 'Enable autofilters',\r\n        Description: 'If autofilters are enabled, system content will be filtered from the query.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: '0', Text: 'Default', Enabled: true, Selected: false },\r\n          { Value: '1', Text: 'Enabled', Enabled: true, Selected: false },\r\n          { Value: '2', Text: 'Disabled', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: 'SenseNet.Search.FilterStatus',\r\n        Name: 'EnableLifespanFilter',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ChoiceField',\r\n        DisplayName: 'Enable lifespan filter',\r\n        Description: 'If lifespan filter is enabled, only valid content will be in the result.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.SmartFolder',\r\n  },\r\n  {\r\n    ContentTypeName: 'SystemFolder',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-SystemFolder,DisplayName',\r\n    Description: '$Ctd-SystemFolder,Description',\r\n    Icon: 'Folder',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.SystemFolder',\r\n  },\r\n  {\r\n    ContentTypeName: 'Resources',\r\n    ParentTypeName: 'SystemFolder',\r\n    DisplayName: '$Ctd-Resources,DisplayName',\r\n    Description: '$Ctd-Resources,Description',\r\n    Icon: 'Folder',\r\n    AllowedChildTypes: ['Resource'],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.SystemFolder',\r\n  },\r\n  {\r\n    ContentTypeName: 'TrashBag',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-TrashBag,DisplayName',\r\n    Description: '$Ctd-TrashBag,Description',\r\n    Icon: 'Folder',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        Name: 'KeepUntil',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Keep until',\r\n        Description: 'The bag must be kept until this date.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'OriginalPath',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Original path',\r\n        Description: 'The path where the bag content were deleted from.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'WorkspaceRelativePath',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Ctd-TrashBagen-USWorkspaceRelativePath-DisplayName',\r\n        Description: 'Ctd-TrashBagen-USWorkspaceRelativePath-Description',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'WorkspaceId',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Ctd-TrashBagen-USWorkspaceId-DisplayName',\r\n        Description: 'Ctd-TrashBagen-USWorkspaceId-Description',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        Name: 'DeletedContent',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Deleted content',\r\n        Description: 'The actual deleted content inside this trash bag.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.TrashBag',\r\n  },\r\n  {\r\n    ContentTypeName: 'Workspace',\r\n    ParentTypeName: 'Folder',\r\n    DisplayName: '$Ctd-Workspace,DisplayName',\r\n    Description: '$Ctd-Workspace,Description',\r\n    Icon: 'Workspace',\r\n    AllowedChildTypes: ['Folder', 'DocumentLibrary', 'ImageLibrary', 'MemoList', 'TaskList', 'CustomList', 'Workspace'],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        AllowedTypes: ['User'],\r\n        SelectionRoots: ['/Root/IMS', '/Root'],\r\n        Name: 'Manager',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Project manager',\r\n        Description: 'The person responsible for the project.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'Deadline',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Project deadline',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'IsActive',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Active',\r\n        Description: 'This workspace is currently active.',\r\n        ReadOnly: false,\r\n        Compulsory: true,\r\n        DefaultValue: 'true',\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        AllowedTypes: [],\r\n        SelectionRoots: ['/Root/Skins'],\r\n        Name: 'WorkspaceSkin',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Skin',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'IsCritical',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Is critical',\r\n        Description: 'This workspace is currently in a critical status.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'IsWallContainer',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Wall Container',\r\n        Description:\r\n          'This workspace is configured to contain a wall - this indicates that posts are created under this workspace if Content are shared anywhere below this path.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'IsFollowed',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.Workspaces.Workspace',\r\n  },\r\n  {\r\n    ContentTypeName: 'Site',\r\n    ParentTypeName: 'Workspace',\r\n    DisplayName: '$Ctd-Site,DisplayName',\r\n    Description: '$Ctd-Site,Description',\r\n    Icon: 'Site',\r\n    AllowedChildTypes: [\r\n      'Folder',\r\n      'Workspace',\r\n      'Profiles',\r\n      'Image',\r\n      'DocumentLibrary',\r\n      'ImageLibrary',\r\n      'MemoList',\r\n      'TaskList',\r\n      'CustomList',\r\n      'SmartFolder',\r\n    ],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: 'en', Text: 'English', Enabled: true, Selected: true },\r\n          { Value: 'hu', Text: 'Hungarian', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: '',\r\n        Name: 'Language',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ChoiceField',\r\n        DisplayName: 'Language',\r\n        Description: 'Please define the default language of this site.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'EnableClientBasedCulture',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Enable client-based culture',\r\n        Description: 'Enable this to allow user browser settings override default site language settings.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'EnableUserBasedCulture',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Enable user-based culture',\r\n        Description: 'Enable this to allow user language settings override default site language settings.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'UrlList',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.UrlListField',\r\n        DisplayName: 'URL list',\r\n        Description: 'Select the URLs to associate with this Site.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        SelectionRoots: ['.'],\r\n        Name: 'StartPage',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Alternative start page',\r\n        Description: 'If set, the site will use this start page instead of the default.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        SelectionRoots: ['.'],\r\n        Name: 'LoginPage',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Login page',\r\n        Description:\r\n          'The login page to display when a user tries to access restricted Content (Forms authentication only).',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        AllowedTypes: [],\r\n        SelectionRoots: ['/Root/Skins'],\r\n        Name: 'SiteSkin',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Skin',\r\n        Description: '',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'DenyCrossSiteAccess',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Deny cross-site access',\r\n        Description:\r\n          'If set, content under this site can only be accessed via this site and not via other sites using a Root relative path.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.NullFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.Portal.Site',\r\n  },\r\n  {\r\n    ContentTypeName: 'TrashBin',\r\n    ParentTypeName: 'Workspace',\r\n    DisplayName: '$Ctd-TrashBin,DisplayName',\r\n    Description: '$Ctd-TrashBin,Description',\r\n    Icon: 'trash',\r\n    AllowedChildTypes: ['TrashBag'],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        MinValue: 0,\r\n        Name: 'MinRetentionTime',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Minimum retention time (in days)',\r\n        Description: '',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        MinValue: 0,\r\n        Name: 'SizeQuota',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Size quota',\r\n        Description: 'Set the size quote for the trash bin (Megabytes).',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        MinValue: 0,\r\n        Name: 'BagCapacity',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Trashbag capacity',\r\n        Description: 'The maximum number of nodes accepted for trash in a single operation.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        DefaultValue: '100',\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.TrashBin',\r\n  },\r\n  {\r\n    ContentTypeName: 'UserProfile',\r\n    ParentTypeName: 'Workspace',\r\n    DisplayName: '$Ctd-UserProfile,DisplayName',\r\n    Description: '$Ctd-UserProfile,Description',\r\n    Icon: 'UserProfile',\r\n    AllowedChildTypes: ['DocumentLibrary', 'MemoList', 'TaskList', 'ImageLibrary', 'CustomList'],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        AllowedTypes: ['User'],\r\n        SelectionRoots: ['/Root/IMS'],\r\n        Name: 'User',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'User',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.UserProfile',\r\n  },\r\n  {\r\n    ContentTypeName: 'Group',\r\n    ParentTypeName: 'GenericContent',\r\n    DisplayName: '$Ctd-Group,DisplayName',\r\n    Description: '$Ctd-Group,Description',\r\n    Icon: 'Group',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: true,\r\n        AllowedTypes: ['User', 'Group'],\r\n        SelectionRoots: ['/Root/IMS', '/Root'],\r\n        Name: 'Members',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Members',\r\n        Description: 'The members of this group.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n        FieldIndex: 20,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'SyncGuid',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Sync Guid',\r\n        Description: 'GUID of corresponding AD object.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'LastSync',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Last synchronization',\r\n        Description: 'Date of last synchronization.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.Group',\r\n  },\r\n  {\r\n    ContentTypeName: 'ListItem',\r\n    ParentTypeName: 'GenericContent',\r\n    DisplayName: '$Ctd-ListItem,DisplayName',\r\n    Description: '$Ctd-ListItem,Description',\r\n    Icon: 'FormItem',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [],\r\n    HandlerName: 'SenseNet.ContentRepository.GenericContent',\r\n  },\r\n  {\r\n    ContentTypeName: 'CustomListItem',\r\n    ParentTypeName: 'ListItem',\r\n    DisplayName: '$Ctd-CustomListItem,DisplayName',\r\n    Description: '$Ctd-CustomListItem,Description',\r\n    Icon: 'FormItem',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'WorkflowsRunning',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.NullFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.GenericContent',\r\n  },\r\n  {\r\n    ContentTypeName: 'Memo',\r\n    ParentTypeName: 'ListItem',\r\n    DisplayName: '$Ctd-Memo,DisplayName',\r\n    Description: '$Ctd-Memo,Description',\r\n    Icon: 'Document',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'Date',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Date',\r\n        Description: 'Please set the due date of the memo.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        DefaultValue: '[Script:jScript] DateTime.UtcNow; [/Script]',\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: true,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: 'generic', Text: 'Generic', Enabled: true, Selected: true },\r\n          { Value: 'iso', Text: 'ISO', Enabled: true, Selected: false },\r\n          { Value: 'iaudit', Text: 'Internal audit', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: '',\r\n        Name: 'MemoType',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ChoiceField',\r\n        DisplayName: 'Memo type',\r\n        Description: 'Type of the memo.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: true,\r\n        Name: 'SeeAlso',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'See also...',\r\n        Description: 'A list of content this memo pertains to.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.GenericContent',\r\n  },\r\n  {\r\n    ContentTypeName: 'Task',\r\n    ParentTypeName: 'ListItem',\r\n    DisplayName: '$Ctd-Task,DisplayName',\r\n    Description: '$Ctd-Task,Description',\r\n    Icon: 'FormItem',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'StartDate',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Start date',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'DueDate',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Due date',\r\n        ReadOnly: false,\r\n        Compulsory: true,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: true,\r\n        AllowedTypes: ['User'],\r\n        SelectionRoots: ['/Root/IMS', '/Root'],\r\n        Name: 'AssignedTo',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Assigned to',\r\n        Description: 'List of internal stakeholders.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: '1', Text: 'Urgent', Enabled: true, Selected: false },\r\n          { Value: '2', Text: 'Normal', Enabled: true, Selected: true },\r\n          { Value: '3', Text: 'Not urgent', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: '',\r\n        Name: 'Priority',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ChoiceField',\r\n        DisplayName: 'Priority',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: 'pending', Text: 'Pending', Enabled: true, Selected: false },\r\n          { Value: 'active', Text: 'Active', Enabled: true, Selected: true },\r\n          { Value: 'completed', Text: 'Completed', Enabled: true, Selected: false },\r\n          { Value: 'deferred', Text: 'Deferred', Enabled: true, Selected: false },\r\n          { Value: 'waiting', Text: 'Waiting', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: '',\r\n        Name: 'Status',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ChoiceField',\r\n        DisplayName: 'Status',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        MinValue: 0,\r\n        MaxValue: 100,\r\n        ShowAsPercentage: true,\r\n        Name: 'TaskCompletion',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Completion',\r\n        Description: 'Completion percentage of the task.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'IntegerFieldSetting',\r\n        Name: 'RemainingDays',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.IntegerField',\r\n        DisplayName: 'Remaining days',\r\n        Description: 'Number of remaining days.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.IntegerFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'DueText',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'DueText',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'DueCssClass',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Due style',\r\n        Description: 'Css class',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.Task',\r\n  },\r\n  {\r\n    ContentTypeName: 'Query',\r\n    ParentTypeName: 'GenericContent',\r\n    DisplayName: '$Ctd-Query,DisplayName',\r\n    Description: '$Ctd-Query,Description',\r\n    Icon: 'Query',\r\n    AllowedChildTypes: [],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        Name: 'Query',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Query',\r\n        Description: 'Query text.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n        ControlHint: 'sn:QueryBuilder',\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: 'Public', Text: 'Public', Enabled: true, Selected: true },\r\n          { Value: 'Private', Text: 'Private', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.RadioButtons,\r\n        EnumTypeName: '',\r\n        Name: 'QueryType',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ChoiceField',\r\n        DisplayName: 'Query type',\r\n        Description:\r\n          'Public queries are stored under the workspace, private queries are stored under the user profile.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.QueryContent',\r\n  },\r\n  {\r\n    ContentTypeName: 'User',\r\n    ParentTypeName: 'GenericContent',\r\n    DisplayName: '$Ctd-User,DisplayName',\r\n    Description: '$Ctd-User,Description',\r\n    Icon: 'User',\r\n    AllowedChildTypes: ['Image'],\r\n    FieldSettings: [\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        MaxLength: 100,\r\n        Name: 'LoginName',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Login name',\r\n        Description:\r\n          'The name that the user has to type in on login forms (in some cases along with the domain name). It has to be unique under a domain.',\r\n        ReadOnly: false,\r\n        Compulsory: true,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'JobTitle',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Job title',\r\n        Description: '',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'Enabled',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BooleanField',\r\n        DisplayName: 'Enabled',\r\n        Description: 'User account is enabled.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'Domain',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Domain',\r\n        Description: 'The domain of the user.',\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Regex: '^[a-zA-Z0-9._%+-]+@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,}$',\r\n        Name: 'Email',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'E-mail',\r\n        Description: 'The e-mail of the user.',\r\n        ReadOnly: false,\r\n        Compulsory: true,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Regex: '[^<]+',\r\n        Name: 'FullName',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Full name',\r\n        Description: 'Full name of the user (e.g. John Smith).',\r\n        ReadOnly: false,\r\n        Compulsory: true,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        Name: 'ImageRef',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Cover image (reference)',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'BinaryFieldSetting',\r\n        Name: 'ImageData',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.BinaryField',\r\n        DisplayName: 'Cover image (binarydata)',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.BinaryFieldSetting,\r\n      {\r\n        Type: 'NullFieldSetting',\r\n        Name: 'Avatar',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ImageField',\r\n        DisplayName: 'Avatar',\r\n        Description: 'Avatar image of user.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n        ControlHint: 'sn:Image',\r\n      } as FieldSettings.NullFieldSetting,\r\n      {\r\n        Type: 'PasswordFieldSetting',\r\n        ReenterTitle: 'Re-enter password',\r\n        ReenterDescription: 'Re-enter password.',\r\n        PasswordHistoryLength: 0,\r\n        Name: 'Password',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.PasswordField',\r\n        DisplayName: 'Password',\r\n        Description: 'User password.',\r\n        ReadOnly: false,\r\n        Compulsory: true,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.PasswordFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'SyncGuid',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'SyncGuid',\r\n        Description: 'GUID of corresponding AD object.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'LastSync',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'LastSync',\r\n        Description: 'Date of last synchronization.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'CaptchaFieldSetting',\r\n        Name: 'Captcha',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.CaptchaField',\r\n        DisplayName: 'Captcha text',\r\n        Description: 'Captcha text entered by the user.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.CaptchaFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: false,\r\n        AllowedTypes: ['User'],\r\n        SelectionRoots: ['/Root/IMS'],\r\n        Name: 'Manager',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Manager',\r\n        Description: 'Manager of the user.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'Department',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Department',\r\n        Description: 'Department of employee.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'Languages',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Languages',\r\n        Description: 'Spoken languages.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Regex: '(^\\\\d*([-\\\\s\\\\+\\\\(\\\\)]\\\\d*)*$)?',\r\n        Name: 'Phone',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Phone',\r\n        Description: 'Phone number. (e.g. +123456789 or 1234).',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: '...', Text: '...', Enabled: true, Selected: false },\r\n          { Value: 'Female', Text: 'Female', Enabled: true, Selected: false },\r\n          { Value: 'Male', Text: 'Male', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: '',\r\n        Name: 'Gender',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ChoiceField',\r\n        DisplayName: 'Gender',\r\n        Description: 'Select one.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: '...', Text: '...', Enabled: true, Selected: false },\r\n          { Value: 'Single', Text: 'Single', Enabled: true, Selected: false },\r\n          { Value: 'Married', Text: 'Married', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: '',\r\n        Name: 'MaritalStatus',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ChoiceField',\r\n        DisplayName: 'Marital status',\r\n        Description: 'Select one.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.Date,\r\n        Name: 'BirthDate',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Birth date',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n      {\r\n        Type: 'LongTextFieldSetting',\r\n        TextType: 'LongText',\r\n        Name: 'Education',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.LongTextField',\r\n        DisplayName: 'Education',\r\n        Description: 'List of educations - e.g. high school, university.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n        ControlHint: 'sn:EducationEditor',\r\n      } as FieldSettings.LongTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'TwitterAccount',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Twitter account',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'FacebookURL',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Facebook URL',\r\n        Description: 'http://www.facebook.com/USERNAME.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'LinkedInURL',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'LinkedIn URL',\r\n        Description: 'http://www.linkedin.com/USERNAME.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'ChoiceFieldSetting',\r\n        AllowExtraValue: false,\r\n        AllowMultiple: false,\r\n        Options: [\r\n          { Value: 'en', Text: 'English', Enabled: true, Selected: true },\r\n          { Value: 'hu', Text: 'Hungarian', Enabled: true, Selected: false },\r\n        ],\r\n        DisplayChoice: FieldSettings.DisplayChoice.DropDown,\r\n        EnumTypeName: '',\r\n        Name: 'Language',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ChoiceField',\r\n        DisplayName: 'Selected language',\r\n        Description: 'Language used to display texts on the site, if it is available.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Show,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Show,\r\n        VisibleNew: FieldSettings.FieldVisibility.Show,\r\n      } as FieldSettings.ChoiceFieldSetting,\r\n      {\r\n        Type: 'ReferenceFieldSetting',\r\n        AllowMultiple: true,\r\n        AllowedTypes: ['Workspace'],\r\n        Name: 'FollowedWorkspaces',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ReferenceField',\r\n        DisplayName: 'Followed workspaces',\r\n        Description: 'List of workspaces followed by the user.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ReferenceFieldSetting,\r\n      {\r\n        Type: 'ShortTextFieldSetting',\r\n        Name: 'ProfilePath',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.ShortTextField',\r\n        DisplayName: 'Profile path',\r\n        Description: \"Path of the user's personal workspace.\",\r\n        ReadOnly: true,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.ShortTextFieldSetting,\r\n      {\r\n        Type: 'DateTimeFieldSetting',\r\n        DateTimeMode: FieldSettings.DateTimeMode.DateAndTime,\r\n        Name: 'LastLoggedOut',\r\n        FieldClassName: 'SenseNet.ContentRepository.Fields.DateTimeField',\r\n        DisplayName: 'Last logout date',\r\n        Description: 'Date and time of when the user logged out from all devices.',\r\n        ReadOnly: false,\r\n        Compulsory: false,\r\n        VisibleBrowse: FieldSettings.FieldVisibility.Hide,\r\n        VisibleEdit: FieldSettings.FieldVisibility.Hide,\r\n        VisibleNew: FieldSettings.FieldVisibility.Hide,\r\n      } as FieldSettings.DateTimeFieldSetting,\r\n    ],\r\n    HandlerName: 'SenseNet.ContentRepository.Users',\r\n  },\r\n]\r\n", "/**\r\n *\r\n * @module Enums\r\n *\r\n * @preferred\r\n *\r\n * @description Module for enums types defined in SenseNet helps you to use enums with dot notation.\r\n *\r\n * This module is autogenerated from Sense/Net metadata (/Odata/$metadata)\r\n *\r\n * ```\r\n * let car = new ContentTypes.Car({\r\n *  Id: 1,\r\n *  Name: 'MyCar',\r\n *  DisplayName: 'My Car',\r\n *  Style: Style.Cabrio\r\n * });\r\n * ```\r\n */\r\n\r\nexport enum VersioningMode {\r\n  Option0 = '0',\r\n  Option1 = '1',\r\n  Option2 = '2',\r\n  Option3 = '3',\r\n}\r\nexport enum InheritableVersioningMode {\r\n  Option0 = '0',\r\n  Option1 = '1',\r\n  Option2 = '2',\r\n  Option3 = '3',\r\n}\r\nexport enum ApprovingMode {\r\n  Option0 = '0',\r\n  Option1 = '1',\r\n  Option2 = '2',\r\n}\r\nexport enum InheritableApprovingMode {\r\n  Option0 = '0',\r\n  Option1 = '1',\r\n  Option2 = '2',\r\n}\r\nexport enum SavingState {\r\n  Finalized = '0',\r\n  Creating = '1',\r\n  Modifying = '2',\r\n  ModifyingLocked = '3',\r\n}\r\nexport enum GroupAttachments {\r\n  email = 'email',\r\n  root = 'root',\r\n  subject = 'subject',\r\n  sender = 'sender',\r\n}\r\nexport enum EnableAutofilters {\r\n  Default = '0',\r\n  Enabled = '1',\r\n  Disabled = '2',\r\n}\r\nexport enum EnableLifespanFilter {\r\n  Default = '0',\r\n  Enabled = '1',\r\n  Disabled = '2',\r\n}\r\nexport enum Language {\r\n  En = 'en',\r\n  Hu = 'hu',\r\n}\r\nexport enum MemoType {\r\n  generic = 'generic',\r\n  iso = 'iso',\r\n  iaudit = 'iaudit',\r\n}\r\nexport enum Priority {\r\n  Option0 = '1',\r\n  Option1 = '2',\r\n  Option2 = '3',\r\n}\r\nexport enum Status {\r\n  pending = 'pending',\r\n  active = 'active',\r\n  completed = 'completed',\r\n  deferred = 'deferred',\r\n  waiting = 'waiting',\r\n}\r\nexport enum QueryType {\r\n  Public = 'Public',\r\n  Private = 'Private',\r\n}\r\nexport enum Gender {\r\n  Option0 = '...',\r\n  Female = 'Female',\r\n  Male = 'Male',\r\n}\r\nexport enum MaritalStatus {\r\n  Option0 = '...',\r\n  Single = 'Single',\r\n  Married = 'Married',\r\n}\r\nexport enum EventType {\r\n  Deadline = 'Deadline',\r\n  Meeting = 'Meeting',\r\n  Demo = 'Demo',\r\n}\r\n", "/**\r\n * Provides metadata about identity kind.\r\n */\r\nexport enum IdentityKind {\r\n  All = 'All',\r\n  Users = 'Users',\r\n  Groups = 'Groups',\r\n  OrganizationalUnits = 'OrganizationalUnits',\r\n  UsersAndGroups = 'UsersAndGroups',\r\n  UsersAndOrganizationalUnits = 'UsersAndOrganizationalUnits',\r\n  GroupsAndOrganizationalUnits = 'GroupsAndOrganizationalUnits',\r\n}\r\n/**\r\n * Provides metadata about permission level.\r\n */\r\nexport enum PermissionLevel {\r\n  AllowedOrDenied = 'AllowedOrDenied',\r\n  Allowed = 'Allowed',\r\n  Denied = 'Denied',\r\n}\r\n/**\r\n * Type to provide an Object with the permission information that has to be set.\r\n */\r\nexport type PermissionRequestBody = {\r\n  identity: string\r\n  localOnly?: boolean\r\n  inheritance?: Inheritance\r\n  RestrictedPreview?: PermissionValue\r\n  PreviewWithoutWatermakr?: PermissionValue\r\n  PreviewWithoutRedaction?: PermissionValue\r\n  See?: PermissionValue\r\n  Open?: PermissionValue\r\n  OpenMinor?: PermissionValue\r\n  Save?: PermissionValue\r\n  Publish?: PermissionValue\r\n  ForceUndoCheckout?: PermissionValue\r\n  AddNew?: PermissionValue\r\n  Approve?: PermissionValue\r\n  Delete?: PermissionValue\r\n  RecallOldVersion?: PermissionValue\r\n  DeleteOldVersion?: PermissionValue\r\n  SeePermissions?: PermissionValue\r\n  SetPermissions?: PermissionValue\r\n  RunApplication?: PermissionValue\r\n  ManageListsAndWorkspaces?: PermissionValue\r\n  TakeOwnership?: PermissionValue\r\n  Custom01?: PermissionValue\r\n  Custom02?: PermissionValue\r\n  Custom03?: PermissionValue\r\n  Custom04?: PermissionValue\r\n  Custom05?: PermissionValue\r\n  Custom06?: PermissionValue\r\n  Custom07?: PermissionValue\r\n  Custom08?: PermissionValue\r\n  Custom09?: PermissionValue\r\n  Custom10?: PermissionValue\r\n  Custom11?: PermissionValue\r\n  Custom12?: PermissionValue\r\n  Custom13?: PermissionValue\r\n  Custom14?: PermissionValue\r\n}\r\n\r\nexport const PermissionValues = {\r\n  undefined: 0,\r\n  allow: 1,\r\n  deny: 2,\r\n} as const\r\n\r\n// a key for permission values usage permissionKeys[0] will be undefined and so on\r\nexport const permissionKeys = Object.keys(PermissionValues) as Array<keyof typeof PermissionValues>\r\n\r\nexport type PermissionValue = (typeof PermissionValues)[keyof typeof PermissionValues]\r\n/**\r\n * Provides metadata about permission inheritance.\r\n */\r\nexport enum Inheritance {\r\n  Break = 'break',\r\n  Unbreak = 'unbreak',\r\n}\r\n", "import { AllFieldNames, Schema, SchemaStore } from '@sensenet/default-content-types'\r\nimport { ODataMetadataType } from '../Models/ODataParams'\r\n\r\n/**\r\n * The default Sense/Net OData Service token (odata.svc)\r\n */\r\nexport const DEFAULT_SERVICE_TOKEN = 'odata.svc'\r\n\r\ntype AllPossibleFieldNamesWithAll = AllFieldNames[] | string[] | 'all'\r\n\r\n/**\r\n * Interface for sensenet Repository configuration\r\n */\r\nexport interface RepositoryConfiguration {\r\n  /**\r\n   * Chunk size for chunked uploads, must be equal to BinaryChunkSize setting at the backend (default:10485760) // 10 mb\r\n   */\r\n  chunkSize?: number\r\n\r\n  /**\r\n   * This field sets up a default OData enableautofilters parameter\r\n   */\r\n  defaultEnableAutofilters?: boolean\r\n\r\n  /**\r\n   * This field sets up a default OData enablelifespan parameter\r\n   */\r\n  defaultEnableLifespanfilter?: boolean\r\n\r\n  /**\r\n   * This field describes what fields should be expanded on every OData request by default\r\n   */\r\n  defaultExpand?: AllFieldNames[] | string[]\r\n\r\n  /**\r\n   * This field sets the default OData inline count value (default:'allpages')\r\n   */\r\n  defaultInlineCount?: 'allpages' | 'none'\r\n\r\n  /**\r\n   * This field sets the default OData $metadata value (default:'no')\r\n   */\r\n  defaultMetadata?: ODataMetadataType\r\n\r\n  /**\r\n   * This parameter describes what fields should be included in the OData $select statements by default (default:['DisplayName', 'Description', 'Icon'])\r\n   */\r\n  defaultSelect?: AllPossibleFieldNamesWithAll\r\n\r\n  /**\r\n   * This field sets up a default OData $top parameter (default:10000)\r\n   */\r\n  defaultTop?: number\r\n\r\n  /**\r\n   * The service token for the OData Endpoint (default:'odata.svc')\r\n   */\r\n  oDataToken?: string\r\n\r\n  /**\r\n   * The root URL for the Sense/Net repository (e.g.: demo.sensenet.com) (default:'')\r\n   */\r\n  repositoryUrl?: string\r\n\r\n  /**\r\n   * This parameter describes what fields should always be included in the OData $select statements (default:['Id', 'Path', 'Name', 'Type'])\r\n   */\r\n  requiredSelect?: AllPossibleFieldNamesWithAll\r\n\r\n  /**\r\n   * An array of schemas\r\n   */\r\n  schemas?: Schema[]\r\n\r\n  /**\r\n   * Access token to authorize access to data\r\n   */\r\n  token?: string\r\n\r\n  /**\r\n   * The root URL for the Sense/Net identity server (e.g.: demo-is.sensenet.com) (default:'')\r\n   */\r\n  identityServerUrl?: string\r\n}\r\n\r\n/**\r\n * Repository configuration with defaults that are not undefined.\r\n * token, defaultExpand properties doesn't have a default value. They are undefined.\r\n */\r\nexport type RepositoryConfigurationWithDefaults = Required<Omit<RepositoryConfiguration, 'token' | 'defaultExpand'>> &\r\n  Pick<RepositoryConfiguration, 'token' | 'defaultExpand'>\r\n\r\nexport const defaultRepositoryConfiguration: RepositoryConfigurationWithDefaults = {\r\n  chunkSize: 1000000,\r\n  defaultEnableAutofilters: false,\r\n  defaultEnableLifespanfilter: false,\r\n  defaultInlineCount: 'allpages',\r\n  defaultMetadata: 'no',\r\n  defaultSelect: ['DisplayName', 'Description', 'Icon'],\r\n  defaultTop: 10000,\r\n  oDataToken: DEFAULT_SERVICE_TOKEN,\r\n  repositoryUrl: '',\r\n  requiredSelect: ['Id', 'Path', 'Name', 'Type'],\r\n  schemas: SchemaStore,\r\n  identityServerUrl: '',\r\n}\r\n", "import { PathHelper } from '@sensenet/client-utils'\r\nimport { Group, IdentityKind, PermissionLevel, PermissionRequestBody, User } from '@sensenet/default-content-types'\r\nimport { Content, PermissionEntry } from '../index'\r\nimport { ODataCollectionResponse } from '../Models/ODataCollectionResponse'\r\nimport { ODataParams } from '../Models/ODataParams'\r\nimport { AclResponseModel, PermissionResponseModel } from '../Models/SecurityModels'\r\nimport { Repository } from './Repository'\r\n\r\n/**\r\n * Options for getRelatedIdentities() call\r\n */\r\nexport interface GetRelatedIdentities<TIdentityType> {\r\n  /**\r\n   * The id or path for the content to check\r\n   */\r\n  contentIdOrPath: string | number\r\n  /**\r\n   * The value is \"AllowedOrDenied\". \"Allowed\" or \"Denied\" are not implemented yet.\r\n   */\r\n  level: PermissionLevel\r\n  /**\r\n   * The value can be: All, Users, Groups, OrganizationalUnits, UsersAndGroups, UsersAndOrganizationalUnits, GroupsAndOrganizationalUnits\r\n   */\r\n  kind: IdentityKind\r\n  /**\r\n   * Additional OData options\r\n   */\r\n  oDataOptions?: ODataParams<TIdentityType>\r\n}\r\n\r\n/**\r\n * Options for getRelatedPermissions() call\r\n */\r\nexport interface GetRelatedPermissionsOptions<TMemberType> {\r\n  /**\r\n   * @param {string | number} contentIdOrPath The Id or Path to the Content to check\r\n   * @param {string[]} includedTypes\r\n   */\r\n  contentIdOrPath: string | number\r\n  /**\r\n   * The value is \"AllowedOrDenied\". \"Allowed\" or \"Denied\" are not implemented yet.\r\n   */\r\n  level: PermissionLevel\r\n  /**\r\n   * value \"true\" is required because \"false\" is not implemented yet.\r\n   */\r\n  explicitOnly: boolean\r\n  /**\r\n   * Fully qualified path of the selected identity (e.g. /Root/IMS/BuiltIn/Portal/Visitor).\r\n   */\r\n  memberPath: string\r\n  /**\r\n   * An item can increment the counters if its type or any ancestor type is found in the 'includedTypes'.\r\n   * Null means filtering off. If the array is empty, there is no element that increases the counters.\r\n   * This filter can reduce the execution speed dramatically so do not use if it is possible.\r\n   */\r\n  includedTypes?: string[]\r\n  /**\r\n   * Optional OData parameters\r\n   */\r\n  oDataOptions?: ODataParams<TMemberType>\r\n}\r\n\r\n/**\r\n * Options for getRelatedItems() method call\r\n */\r\nexport interface GetRelatedItemsOptions<TItem> {\r\n  /**\r\n   * Id or path for the content\r\n   */\r\n  contentIdOrPath: string | number\r\n  /**\r\n   * The value is \"AllowedOrDenied\". \"Allowed\" or \"Denied\" are not implemented yet.\r\n   */\r\n  level: PermissionLevel\r\n  /**\r\n   * The value \"true\" is required because \"false\" is not implemented yet.\r\n   */\r\n  explicitOnly: boolean\r\n  /**\r\n   * Fully qualified path of the selected identity (e.g. /Root/IMS/BuiltIn/Portal/Visitor).\r\n   */\r\n  member: string\r\n  /**\r\n   * Related permission list. Item names are case sensitive.\r\n   * In most cases only one item is used (e.g. \"See\" or \"Save\" etc.) but you can pass any permission\r\n   * type name (e.g. [\"Open\",\"Save\",\"Custom02\"]).\r\n   */\r\n  permissions: string[]\r\n  /**\r\n   * Optional OData options\r\n   */\r\n  oDataOptions?: ODataParams<TItem>\r\n}\r\n\r\n/**\r\n * Options for the getRelatedIdentitiesByPermissions() method call\r\n */\r\nexport interface GetRelatedIdentitiesByPermissions<TIdentity> {\r\n  /**\r\n   * Id or path for the content\r\n   */\r\n  contentIdOrPath: number | string\r\n  /**\r\n   * The value is \"AllowedOrDenied\". \"Allowed\" or \"Denied\" are not implemented yet.\r\n   */\r\n  level: PermissionLevel\r\n  /**\r\n   * The value can be: All, Users, Groups, OrganizationalUnits, UsersAndGroups, UsersAndOrganizationalUnits, GroupsAndOrganizationalUnits\r\n   */\r\n  kind: IdentityKind\r\n  /**\r\n   * related permission list. Item names are case sensitive. In most cases only one item is used (e.g. \"See\" or \"Save\" etc.) but you can pass any permission type name (e.g. [\"Open\",\"Save\",\"Custom02\"]).\r\n   */\r\n  permissions: string[]\r\n  /**\r\n   * Optional OData Request options\r\n   */\r\n  oDataOptions?: ODataParams<TIdentity>\r\n}\r\n\r\n/**\r\n * Options for IGetRelatedItemsOneLevel() method call\r\n */\r\nexport interface GetRelatedItemsOneLevel<TItem> {\r\n  /**\r\n   * Full path or Id for the content\r\n   */\r\n  contentIdOrPath: number | string\r\n  /**\r\n   * The value is \"AllowedOrDenied\". \"Allowed\" or \"Denied\" are not implemented yet.\r\n   */\r\n  level: PermissionLevel\r\n  /**\r\n   * Fully qualified path of the selected identity (e.g. /Root/IMS/BuiltIn/Portal/Visitor).\r\n   */\r\n  member: string\r\n  /**\r\n   * related permission list. Item names are case sensitive.\r\n   * In most cases only one item is used (e.g. \"See\" or \"Save\" etc.) but you can pass any permission\r\n   * type name (e.g. [\"Open\",\"Save\",\"Custom02\"]).\r\n   */\r\n  permissions: string[]\r\n  /**\r\n   * Optional OData request options\r\n   */\r\n  oDataOptions?: ODataParams<TItem>\r\n}\r\n\r\n/**\r\n * Options for getAllowedUsers() method call\r\n */\r\nexport interface GetAllowedUsersOptions<TUser> {\r\n  /**\r\n   * contentIdOrPath The id or path to the content to check\r\n   */\r\n  contentIdOrPath: number | string\r\n  /**\r\n   * Related permission list. Item names are case sensitive.\r\n   * In most cases only one item is used (e.g. \"See\" or \"Save\" etc.) but you can pass any permission\r\n   * type name (e.g. [\"Open\",\"Save\",\"Custom02\"]).\r\n   */\r\n  permissions: string[]\r\n  /**\r\n   * Optional OData parameters\r\n   */\r\n  oDataOptions?: ODataParams<TUser>\r\n}\r\n\r\n/**\r\n * Parameter options for the getParentGroups() permission query\r\n */\r\nexport interface GetParentGroupsOptions<T> {\r\n  /**\r\n   * contentIdOrPath The path or id of the content to check\r\n   */\r\n  contentIdOrPath: number | string\r\n  /**\r\n   * directOnly If the value of the \"directOnly\" parameter is false, all indirect members are listed.\r\n   */\r\n  directOnly: boolean\r\n  /**\r\n   * Optional OData options\r\n   */\r\n  oDataOptions?: ODataParams<T>\r\n\r\n  /**\r\n   * Optional request init params\r\n   */\r\n  requestInit?: RequestInit\r\n}\r\n\r\n/**\r\n * Class that contains shortcuts for security-related custom content actions\r\n */\r\nexport class Security {\r\n  constructor(private readonly repository: Repository) {}\r\n\r\n  /**\r\n   * Sets permissions on the requested content.\r\n   * You can add or remove permissions for one ore more users or groups using this action.\r\n   * @param {string | number} idOrPath A content id or path\r\n   * @param {PermissionRequestBody} permissionRequestBody inheritance: break or unbreak\r\n   * @returns {Promise<PermissionResponseModel>} A promise with a response model\r\n   */\r\n  public setPermissions = (idOrPath: string | number, permissionRequestBody: PermissionRequestBody[]) =>\r\n    this.repository.executeAction<{ r: PermissionRequestBody[] }, void>({\r\n      name: 'SetPermissions',\r\n      idOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        r: permissionRequestBody as PermissionRequestBody[],\r\n      },\r\n    })\r\n\r\n  /**\r\n   * Gets all permissions for the requested content.\r\n   * Required permissions to call this action: See permissions.\r\n   * @param {string | number} contentIdOrPath The path or id for the content\r\n   * @returns {Promise<PermissionResponseModel>} A promise with the permission response\r\n   */\r\n  public getAllPermissions = (contentIdOrPath: string | number) =>\r\n    this.repository.executeAction<undefined, PermissionResponseModel>({\r\n      idOrPath: contentIdOrPath,\r\n      name: 'GetPermissions',\r\n      method: 'GET',\r\n      body: undefined,\r\n    })\r\n\r\n  /**\r\n   * Gets all permissions, ancestor and inherited flag for the requested content.\r\n   * Required permissions to call this action: See permissions.\r\n   * @param {string | number} contentIdOrPath The path or id for the content\r\n   * @returns {Promise<PermissionResponseModel>} A promise with the permission response\r\n   */\r\n  public getAcl = (contentIdOrPath: string | number) =>\r\n    this.repository.executeAction<any, AclResponseModel>({\r\n      idOrPath: contentIdOrPath,\r\n      name: 'GetAcl',\r\n      method: 'GET',\r\n    })\r\n\r\n  /**\r\n   * Gets all permissions for the requested content.\r\n   * Required permissions to call this action: See permissions.\r\n   * @param {string | number} contentIdOrPath The path or id for the content\r\n   * @returns {Promise<PermissionResponseModel>} A promise with the permission response\r\n   */\r\n  public getPermissionsForIdentity = (contentIdOrPath: string | number, identityPath: string) =>\r\n    this.repository.executeAction<{ identity: string }, PermissionEntry>({\r\n      idOrPath: contentIdOrPath,\r\n      name: 'GetPermissions',\r\n      method: 'GET',\r\n      body: {\r\n        identity: identityPath,\r\n      },\r\n    })\r\n  /**\r\n   * Gets if the given user has the specified permissions for the requested content.\r\n   *\r\n   * Required permissions to call this action: See permissions.\r\n   * @param {string[]} permissions list of permission names (e.g. Open, Save)\r\n   * @param {string} user path of the user (or the current user, if not provided)\r\n   * @returns {Promise<boolean>} A promise with the response value\r\n   */\r\n  public async hasPermission(\r\n    contentIdOrPath: string | number,\r\n    permissions: Array<\r\n      | 'See'\r\n      | 'Preview'\r\n      | 'PreviewWithoutWatermark'\r\n      | 'PreviewWithoutRedaction'\r\n      | 'Open'\r\n      | 'OpenMinor'\r\n      | 'Save'\r\n      | 'Publish'\r\n      | 'ForceCheckin'\r\n      | 'AddNew'\r\n      | 'Approve'\r\n      | 'Delete'\r\n      | 'RecallOldVersion'\r\n      | 'DeleteOldVersion'\r\n      | 'SeePermissions'\r\n      | 'SetPermissions'\r\n      | 'RunApplication'\r\n      | 'ManageListsAndWorkspaces'\r\n      | 'TakeOwnership'\r\n      | 'Custom01'\r\n      | 'Custom02'\r\n      | 'Custom03'\r\n      | 'Custom04'\r\n      | 'Custom05'\r\n      | 'Custom06'\r\n      | 'Custom07'\r\n      | 'Custom08'\r\n      | 'Custom09'\r\n      | 'Custom10'\r\n      | 'Custom11'\r\n      | 'Custom12'\r\n      | 'Custom13'\r\n      | 'Custom14'\r\n      | 'Custom15'\r\n      | 'Custom16'\r\n      | 'Custom17'\r\n      | 'Custom18'\r\n      | 'Custom19'\r\n      | 'Custom20'\r\n      | 'Custom21'\r\n      | 'Custom22'\r\n      | 'Custom23'\r\n      | 'Custom24'\r\n      | 'Custom25'\r\n      | 'Custom26'\r\n      | 'Custom27'\r\n      | 'Custom28'\r\n      | 'Custom29'\r\n      | 'Custom30'\r\n      | 'Custom31'\r\n      | 'Custom32'\r\n    >,\r\n    identityPath?: string,\r\n    requestInit?: RequestInit,\r\n  ): Promise<boolean> {\r\n    let params = `permissions=${permissions.join(',')}`\r\n    if (identityPath) {\r\n      params += `&identity=${identityPath}`\r\n    }\r\n\r\n    const path = PathHelper.joinPaths(\r\n      this.repository.configuration.repositoryUrl,\r\n      this.repository.configuration.oDataToken,\r\n      PathHelper.getContentUrl(contentIdOrPath),\r\n    )\r\n    const response = await this.repository.fetch(`${path}/HasPermission?${params}`, requestInit)\r\n    if (response.ok) {\r\n      return (await response.text()) === 'true' || false\r\n    } else {\r\n      throw await this.repository.getErrorFromResponse(response)\r\n    }\r\n  }\r\n  /**\r\n   * Identity list that contains every users/groups/organizational units\r\n   * that have any permission setting (according to permission level)\r\n   * in the subtree of the context content.\r\n   * @param {GetRelatedIdentities<TIdentityType>} options Options object for the method call\r\n   * @returns {Promise<ODataCollectionResponse<TIdentityType>>} A promise that will be resolved with a collection of related identities\r\n   */\r\n  public getRelatedIdentities = <TIdentityType extends User | Group = User | Group>(\r\n    options: GetRelatedIdentities<TIdentityType>,\r\n  ) =>\r\n    this.repository.executeAction<{}, ODataCollectionResponse<TIdentityType>>({\r\n      name: 'GetRelatedIdentities',\r\n      idOrPath: options.contentIdOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        permissionLevel: options.level,\r\n        indentityKind: options.kind,\r\n      },\r\n      oDataOptions: options.oDataOptions,\r\n    })\r\n\r\n  /**\r\n   * Permission list of the selected identity with the count of related content. 0 indicates that this permission has no related content so the GUI does not have to display it as a tree node\r\n   * @param {GetRelatedPermissionsOptions<TMemberType>} options options for the method call\r\n   * @returns {Promise<ODataCollectionResponse<TMemberType>>} A promise with the related users / groups\r\n   */\r\n  public getRelatedPermissions = <TMemberType extends User | Group = User | Group>(\r\n    options: GetRelatedPermissionsOptions<TMemberType>,\r\n  ) =>\r\n    this.repository.executeAction<any, ODataCollectionResponse<TMemberType>>({\r\n      name: 'GetRelatedPermissions',\r\n      idOrPath: options.contentIdOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        permissionLevel: options.level,\r\n        explicitOnly: options.explicitOnly,\r\n        memberPath: options.memberPath,\r\n        includedTypes: options.includedTypes ?? null,\r\n      },\r\n      oDataOptions: options.oDataOptions,\r\n    })\r\n\r\n  /**\r\n   * Content list that have explicite/effective permission setting for the selected user in the current subtree.\r\n   * @param {GetRelatedItemsOptions<TItem>} options Options for the method call\r\n   * @returns {Promise<>} A promise with the content list\r\n   */\r\n  public getRelatedItems = <TItem extends Content = Content>(options: GetRelatedItemsOptions<TItem>) =>\r\n    this.repository.executeAction<any, ODataCollectionResponse<TItem>>({\r\n      name: 'GetRelatedItems',\r\n      idOrPath: options.contentIdOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        permissionLevel: options.level,\r\n        explicitOnly: options.explicitOnly,\r\n        memberPath: options.member,\r\n        permissions: options.permissions,\r\n      },\r\n      oDataOptions: options.oDataOptions,\r\n    })\r\n\r\n  /**\r\n   * This structure is designed for getting tree of content that are permitted or denied for groups/organizational units\r\n   * in the selected subtree. The result content are not in a paged list: they are organized in a tree.\r\n   * @param {IGetRelatedItentitiesByPermission} options Options for the method call.\r\n   * @returns {Promise} Returns an RxJS observable that you can subscribe of in your code.\r\n   */\r\n  public getRelatedIdentitiesByPermissions = <TIdentity extends User | Group = User | Group>(\r\n    options: GetRelatedIdentitiesByPermissions<TIdentity>,\r\n  ) =>\r\n    this.repository.executeAction<any, ODataCollectionResponse<TIdentity>>({\r\n      name: 'GetRelatedIdentitiesByPermissions',\r\n      idOrPath: options.contentIdOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        permissionLevel: options.level,\r\n        identityKind: options.kind,\r\n        permissions: options.permissions,\r\n      },\r\n      oDataOptions: options.oDataOptions,\r\n    })\r\n\r\n  /**\r\n   * This structure is designed for getting tree of content that are permitted or denied for groups/organizational units\r\n   * in the selected subtree. The result content are not in a paged list: they are organized in a tree.\r\n   * @returns {Observable} Returns an RxJS observable that you can subscribe of in your code.\r\n   */\r\n  public getRelatedItemsOneLevel = <TItem extends Content = Content>(options: GetRelatedItemsOneLevel<TItem>) =>\r\n    this.repository.executeAction<any, ODataCollectionResponse<TItem>>({\r\n      name: 'GetRelatedItemsOneLevel',\r\n      idOrPath: options.contentIdOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        permissionLevel: options.level,\r\n        memberPath: options.member,\r\n        permissions: options.permissions,\r\n      },\r\n      oDataOptions: options.oDataOptions,\r\n    })\r\n\r\n  /**\r\n   * Returns a content collection that represents users who have enough permissions to a requested resource.\r\n   * The permissions effect on the user and through direct or indirect group membership\r\n   * too. The function parameter is a permission name list that must contain at least one item.\r\n   * @param {GetAllowedUsersOptions} options An options object for the method call\r\n   * @returns {Observable} Returns an RxJS observable that you can subscribe of in your code.\r\n   */\r\n  public getAllowedUsers = <TUser extends User = User>(options: GetAllowedUsersOptions<TUser>) =>\r\n    this.repository.executeAction<any, ODataCollectionResponse<TUser>>({\r\n      idOrPath: options.contentIdOrPath,\r\n      name: 'GetAllowedUsers',\r\n      method: 'POST',\r\n      body: {\r\n        permissions: options.permissions,\r\n      },\r\n      oDataOptions: options.oDataOptions,\r\n    })\r\n\r\n  /**\r\n   * Returns a content collection that represents groups where the given user or group is member directly or indirectly.\r\n   * This function can be used only on a resource content that is\r\n   * Group or User or any inherited type. If the value of the \"directOnly\" parameter is false, all indirect members are listed.\r\n   * @param {GetParentGroupsOptions} options Options for the Method call\r\n   * @returns {Promise} A promise with the response\r\n   */\r\n  public getParentGroups = <TGroup extends Group = Group>(options: GetParentGroupsOptions<TGroup>) =>\r\n    this.repository.executeAction<any, ODataCollectionResponse<TGroup>>({\r\n      name: 'GetParentGroups',\r\n      idOrPath: options.contentIdOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        directOnly: options.directOnly,\r\n      },\r\n      oDataOptions: options.oDataOptions,\r\n      requestInit: options.requestInit,\r\n    })\r\n\r\n  /**\r\n   * Administrators can add new members to a group using this action.\r\n   * The list of new members can be provided using the 'contentIds' parameter (list of user or group ids).\r\n   * @param {string | number} contentIdOrPath A Path or Id to the content to check\r\n   * @param  {number[]} contentIds List of the member ids.\r\n   * @returns {Promise} A Promise with the response object\r\n   */\r\n  public addMembers = (contentIdOrPath: string | number, contentIds: number[]) =>\r\n    this.repository.executeAction<{ contentIds: number[] }, void>({\r\n      name: 'AddMembers',\r\n      idOrPath: contentIdOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        contentIds,\r\n      },\r\n    })\r\n  /**\r\n   * Administrators can remove members from a group using this action.\r\n   * The list of removable members can be provided using the 'contentIds' parameter (list of user or group ids).\r\n   * @param {string | number} contentIdOrPath A Path or Id to the content to check\r\n   * @param {number[]}  contentIds List of the member ids.\r\n   * @returns {Promise} Returns an RxJS observable that you can subscribe of in your code.\r\n   */\r\n  public removeMembers = (contentIdOrPath: string | number, contentIds: number[]) =>\r\n    this.repository.executeAction<{ contentIds: number[] }, void>({\r\n      name: 'RemoveMembers',\r\n      idOrPath: contentIdOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        contentIds,\r\n      },\r\n    })\r\n}\r\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;", "import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;", "import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}", "/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;", "import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;", "// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;", "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;", "import { PathHelper } from '@sensenet/client-utils'\r\nimport { v1 } from 'uuid'\r\nimport { Content } from '../Models/Content'\r\nimport {\r\n  UploadFileOptions,\r\n  UploadFromEventOptions,\r\n  UploadFromFileListOptions,\r\n  UploadOptions,\r\n  UploadTextOptions,\r\n} from '../Models/RequestOptions'\r\nimport { Repository } from '../Repository/Repository'\r\n\r\nimport { WebKitDirectoryEntry, WebKitFileEntry } from './WebkitTypes'\r\n\r\n/**\r\n * Response model for Uploads\r\n */\r\nexport interface UploadResponse {\r\n  /**\r\n   * Identifier for the uploaded content\r\n   */\r\n  Id: number\r\n  /**\r\n   * Uploaded file lengthj\r\n   */\r\n  Length: number\r\n  /**\r\n   * Content name\r\n   */\r\n  Name: string\r\n  /**\r\n   * URL for thumbnail view\r\n   */\r\n  Thumbnail_url: string\r\n  /**\r\n   * Created content type\r\n   */\r\n  Type: string\r\n  /**\r\n   * Url for the created content\r\n   */\r\n  Url: string\r\n}\r\n\r\n/**\r\n * Helper class for uploading content into the sensenet Repository\r\n */\r\nexport class Upload {\r\n  constructor(private readonly repository: Repository) {}\r\n  /**\r\n   * Uploads a specified text as a binary file\r\n   * @param {UploadTextOptions} options The additional options\r\n   */\r\n  public async textAsFile<T extends Content>(options: UploadTextOptions<T>): Promise<UploadResponse> {\r\n    const uploadFileOptions = Object.assign(\r\n      { file: new File([options.text], options.fileName) },\r\n      options,\r\n    ) as UploadFileOptions<T>\r\n    return await this.file(uploadFileOptions)\r\n  }\r\n\r\n  /**\r\n   * Uploads a specified file into a sensenet Repository\r\n   * @param {UploadFileOptions} options The additional upload options\r\n   */\r\n  public async file<T extends Content>(options: UploadFileOptions<T>): Promise<UploadResponse> {\r\n    if (this.isChunkedUploadNeeded(options.file)) {\r\n      return await this.uploadChunked(options)\r\n    }\r\n    return await this.uploadNonChunked(options)\r\n  }\r\n\r\n  /**\r\n   * Returns if a chunked upload is needed for a specified file\r\n   * @param {File} file The File object\r\n   */\r\n  public isChunkedUploadNeeded(file: File): boolean {\r\n    return file.size >= this.repository.configuration.chunkSize\r\n  }\r\n\r\n  private getUploadUrl(options: UploadFileOptions<any>) {\r\n    return PathHelper.joinPaths(\r\n      this.repository.configuration.repositoryUrl,\r\n      this.repository.configuration.oDataToken,\r\n      PathHelper.getContentUrl(options.parentPath),\r\n      'upload',\r\n    )\r\n  }\r\n\r\n  private getFormDataFromOptions(options: UploadFileOptions<any>) {\r\n    const formData = new FormData()\r\n    formData.append('ChunkToken', '0*0*False*False')\r\n    formData.append('FileName', options.fileName || options.file.name)\r\n    formData.append('Overwrite', options.overwrite.toString())\r\n    formData.append('PropertyName', options.binaryPropertyName.toString())\r\n    formData.append('FileLength', options.file.size.toString())\r\n    if (options.contentTypeName) {\r\n      formData.append('ContentType', options.contentTypeName.toString())\r\n    }\r\n    return formData\r\n  }\r\n\r\n  public async uploadNonChunked<T>(options: UploadFileOptions<T>): Promise<UploadResponse> {\r\n    const guid = v1()\r\n    let responseContent: UploadResponse = {} as any\r\n\r\n    options.progressObservable?.setValue({\r\n      guid,\r\n      file: options.file,\r\n      completed: false,\r\n    })\r\n\r\n    const formData = this.getFormDataFromOptions(options)\r\n    formData.append(options.file.name, options.file)\r\n\r\n    try {\r\n      const response = await this.repository.fetch(this.getUploadUrl(options), {\r\n        ...options.requestInit,\r\n        credentials: 'include',\r\n        method: 'POST',\r\n        body: formData,\r\n      })\r\n\r\n      if (response.ok) {\r\n        responseContent = await response.json()\r\n        options.progressObservable?.setValue({\r\n          guid,\r\n          file: options.file,\r\n          chunkCount: 1,\r\n          uploadedChunks: 1,\r\n          completed: true,\r\n          createdContent: responseContent,\r\n        })\r\n      } else {\r\n        throw await this.repository.getErrorFromResponse(response)\r\n      }\r\n      return responseContent\r\n    } catch (error) {\r\n      options.progressObservable?.setValue({\r\n        guid,\r\n        file: options.file,\r\n        completed: false,\r\n        error,\r\n      })\r\n      throw error\r\n    }\r\n  }\r\n\r\n  public async uploadChunked<T>(options: UploadFileOptions<T>) {\r\n    const chunkCount = Math.floor(options.file.size / this.repository.configuration.chunkSize)\r\n\r\n    const guid = v1()\r\n\r\n    options.progressObservable?.setValue({\r\n      guid,\r\n      file: options.file,\r\n      completed: false,\r\n      chunkCount,\r\n      uploadedChunks: 0,\r\n    })\r\n\r\n    const uploadPath = this.getUploadUrl(options)\r\n\r\n    /** initial chunk data and request */\r\n    const formData = this.getFormDataFromOptions(options)\r\n    formData.append(options.file.name, options.file.slice(0, this.repository.configuration.chunkSize))\r\n    formData.append('UseChunk', 'true')\r\n    formData.append('create', '1')\r\n    try {\r\n      const initRequest = await this.repository.fetch(uploadPath, {\r\n        ...options.requestInit,\r\n        body: formData,\r\n        credentials: 'include',\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Range': `bytes 0-${this.repository.configuration.chunkSize - 1}/${options.file.size}`,\r\n          'Content-Disposition': `attachment; filename=\"${encodeURIComponent(options.file.name)}\"`,\r\n        },\r\n      })\r\n\r\n      const chunkToken = await initRequest.text()\r\n      let lastResponseContent: UploadResponse = {} as any\r\n      for (let i = 0; i <= chunkCount; i++) {\r\n        const start = i * this.repository.configuration.chunkSize\r\n        let end = start + this.repository.configuration.chunkSize\r\n        end = end > options.file.size ? options.file.size : end\r\n\r\n        const chunkFormData = new FormData()\r\n        const chunkData = options.file.slice(start, end)\r\n\r\n        chunkFormData.append('FileLength', options.file.size.toString())\r\n        chunkFormData.append('ChunkToken', chunkToken)\r\n        chunkFormData.append('PropertyName', options.binaryPropertyName.toString())\r\n        chunkFormData.append(options.file.name, chunkData)\r\n\r\n        const lastResponse = await this.repository.fetch(uploadPath, {\r\n          ...options.requestInit,\r\n          body: chunkFormData,\r\n          credentials: 'include',\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Range': `bytes ${start}-${end - 1}/${options.file.size}`,\r\n            'Content-Disposition': `attachment; filename=\"${encodeURIComponent(options.file.name)}\"`,\r\n          },\r\n        })\r\n        if (lastResponse.ok) {\r\n          lastResponseContent = await lastResponse.json()\r\n          options.progressObservable?.setValue({\r\n            guid,\r\n            file: options.file,\r\n            chunkCount,\r\n            uploadedChunks: i,\r\n            completed: i === chunkCount,\r\n            createdContent: lastResponseContent,\r\n          })\r\n        } else {\r\n          throw await this.repository.getErrorFromResponse(lastResponse)\r\n        }\r\n      }\r\n\r\n      return lastResponseContent\r\n    } catch (error) {\r\n      options.progressObservable?.setValue({\r\n        guid,\r\n        file: options.file,\r\n        chunkCount,\r\n        uploadedChunks: 0,\r\n        completed: false,\r\n        error,\r\n      })\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async webkitFileHandler<T extends Content>(\r\n    fileEntry: WebKitFileEntry,\r\n    contentPath: string,\r\n    options: UploadOptions<T>,\r\n  ) {\r\n    await new Promise<void>((resolve, reject) => {\r\n      fileEntry.file(\r\n        async (f) => {\r\n          await this.file({\r\n            file: f,\r\n            ...options,\r\n            parentPath: contentPath,\r\n          })\r\n          resolve()\r\n        },\r\n        (err) => reject(err),\r\n      )\r\n    })\r\n  }\r\n\r\n  private async webkitDirectoryHandler<T extends Content>(\r\n    directory: WebKitDirectoryEntry,\r\n    contentPath: string,\r\n    options: UploadOptions<T>,\r\n    readEntries = true,\r\n  ) {\r\n    const folder = await this.repository.post({\r\n      content: {\r\n        Name: directory.name,\r\n      },\r\n      parentPath: contentPath,\r\n      contentType: 'Folder',\r\n    })\r\n    if (readEntries) {\r\n      const dirReader = directory.createReader()\r\n      await new Promise<void>((resolve, reject) => {\r\n        dirReader.readEntries(\r\n          async (items) => {\r\n            await this.webkitItemListHandler<T>(items as any, folder.d.Path, true, options)\r\n            resolve()\r\n          },\r\n          (err) => reject(err),\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  private async webkitItemListHandler<T extends Content>(\r\n    items: Array<WebKitFileEntry | WebKitDirectoryEntry>,\r\n    contentPath: string,\r\n    createFolders: boolean,\r\n    options: UploadOptions<T>,\r\n  ) {\r\n    for (const item of items) {\r\n      if (createFolders && item.isDirectory) {\r\n        await this.webkitDirectoryHandler(item as WebKitDirectoryEntry, contentPath, options)\r\n      }\r\n      if (item.isFile) {\r\n        await this.webkitFileHandler(item as WebKitFileEntry, contentPath, options)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uploads content from a specified Drop Event\r\n   * @param { UploadOptions } options Options for the Upload request\r\n   */\r\n  public async fromDropEvent<T extends Content = Content>(options: UploadFromEventOptions<T>) {\r\n    if ((window as any).webkitRequestFileSystem) {\r\n      const entries = options.event.dataTransfer\r\n        ? ([].map.call(options.event.dataTransfer.items, (i: DataTransferItem) => i.webkitGetAsEntry()) as Array<\r\n            WebKitFileEntry | WebKitDirectoryEntry\r\n          >)\r\n        : []\r\n      await this.webkitItemListHandler<T>(entries, options.parentPath, options.createFolders, options)\r\n    } else {\r\n      // Fallback for non-webkit browsers.\r\n      options.event.dataTransfer?.files &&\r\n        [].forEach.call(options.event.dataTransfer.files, async (f: File) => {\r\n          if (f.type === 'file') {\r\n            return await this.file({\r\n              file: f,\r\n              ...(options as UploadOptions<T>),\r\n            })\r\n          }\r\n        })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uploads files (and optionally creates the directory structure) from a file list\r\n   * @param { UploadFromFileListOptions } options Options for the Upload request\r\n   */\r\n  public async fromFileList<T extends Content = Content>(options: UploadFromFileListOptions<T>) {\r\n    if (options.createFolders) {\r\n      const directories = new Set(\r\n        Array.from(options.fileList).map((f) =>\r\n          PathHelper.getParentPath((f as any).webkitRelativePath || (f as any).fullPath || ''),\r\n        ),\r\n      )\r\n      const directoriesBySegments = Array.from(directories).map((d) => PathHelper.getSegments(d))\r\n      const createdDirectories = new Set<string>()\r\n      for (const directory of directoriesBySegments) {\r\n        let currentPath = options.parentPath\r\n        for (const segment of directory) {\r\n          const pathToCreate = PathHelper.joinPaths(currentPath, segment)\r\n          if (!createdDirectories.has(pathToCreate)) {\r\n            await this.webkitDirectoryHandler(\r\n              { name: segment } as WebKitDirectoryEntry,\r\n              currentPath,\r\n              options as UploadOptions<T>,\r\n              false,\r\n            )\r\n          }\r\n          createdDirectories.add(pathToCreate)\r\n          currentPath = pathToCreate\r\n        }\r\n      }\r\n\r\n      await Promise.all(\r\n        Array.from(options.fileList).map(async (file) => {\r\n          await this.file({\r\n            ...(options as UploadOptions<T>),\r\n            parentPath: PathHelper.joinPaths(\r\n              options.parentPath,\r\n              PathHelper.getParentPath((file as any).webkitRelativePath),\r\n            ),\r\n            file,\r\n          })\r\n        }),\r\n      )\r\n    } else {\r\n      const { fileList, createFolders, ...uploadOptions } = options\r\n      for (const file of Array.from(options.fileList)) {\r\n        await this.file({\r\n          ...uploadOptions,\r\n          file,\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n", "import { PathHelper } from '@sensenet/client-utils'\r\nimport { GenericContent } from '@sensenet/default-content-types'\r\nimport { Content } from '../index'\r\nimport { ODataCollectionResponse } from '../Models/ODataCollectionResponse'\r\nimport { ODataParams } from '../Models/ODataParams'\r\nimport { ODataResponse } from '../Models/ODataResponse'\r\nimport { Repository } from './Repository'\r\n\r\n/**\r\n * Class that contains shortcuts for versioning-related custom content actions\r\n */\r\nexport class Versioning {\r\n  /**\r\n   * Returns a collection of content versions\r\n   * @param {number | string} idOrPath The unique identifier or full path of the original content\r\n   * @param {ODataParams<T> | undefined} oDataOptions optional OData options\r\n   * @returns {Promise<ODataCollectionResponse<T>>} A promise that will be resolved with the versions\r\n   */\r\n  public getVersions<T extends GenericContent = GenericContent>(\r\n    idOrPath: number | string,\r\n    oDataOptions?: ODataParams<T>,\r\n  ): Promise<ODataCollectionResponse<T>> {\r\n    return this.repository.loadCollection<T>({\r\n      path: PathHelper.joinPaths(PathHelper.getContentUrl(idOrPath), 'Versions'),\r\n      oDataOptions,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Checks out the content item to the current user\r\n   * @param {number | string} idOrPath The unique identifier or full path of the content to check out\r\n   * @param {ODataParams<T>} oDataOptions Optional OData options\r\n   * @returns {Promise<T>} A promise that will be resolved with the checked out version of the content item\r\n   */\r\n  public checkOut<T extends Content = Content>(idOrPath: number | string, oDataOptions?: ODataParams<T>) {\r\n    return this.repository.executeAction<undefined, ODataResponse<T>>({\r\n      name: 'Checkout',\r\n      idOrPath,\r\n      method: 'POST',\r\n      body: undefined,\r\n      oDataOptions,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Checks in the content item\r\n   * @param {number | string} idOrPath The unique identifier or full path of the content to check in\r\n   * @param {string} checkInComments Optional comments for the check in operation\r\n   * @param {ODataParams<T>} oDataOptions Optional OData options\r\n   * @returns {Promise<T>} A promise that will be resolved with the new checked in version of the content item\r\n   */\r\n  public checkIn<T extends Content = Content>(\r\n    idOrPath: number | string,\r\n    checkInComments = '',\r\n    oDataOptions?: ODataParams<T>,\r\n  ) {\r\n    return this.repository.executeAction<{ checkInComments: string }, ODataResponse<T>>({\r\n      name: 'CheckIn',\r\n      idOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        checkInComments,\r\n      },\r\n      oDataOptions,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Performs an undo check out operation on a content item\r\n   * @param {number | string} idOrPath The unique identifier or full path of the content\r\n   * @param {ODataParams<T>} oDataOptions Optional OData options\r\n   * @returns {Promise<T>} A promise that will be resolved with the previous checked in version of the content item\r\n   */\r\n  public undoCheckOut<T extends Content = Content>(idOrPath: number | string, oDataOptions?: ODataParams<T>) {\r\n    return this.repository.executeAction<undefined, ODataResponse<T>>({\r\n      name: 'UndoCheckOut',\r\n      idOrPath,\r\n      method: 'POST',\r\n      body: undefined,\r\n      oDataOptions,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Performs a force undo check out operation on a content item\r\n   * @param {number | string} idOrPath The unique identifier or full path of the content\r\n   * @param {ODataParams<T>} oDataOptions Optional OData options\r\n   * @returns {Promise<T>} A promise that will be resolved with the previous checked in version of the content item\r\n   */\r\n  public forceUndoCheckOut<T extends Content = Content>(idOrPath: number | string, oDataOptions?: ODataParams<T>) {\r\n    return this.repository.executeAction<undefined, ODataResponse<T>>({\r\n      name: 'ForceUndoCheckout',\r\n      idOrPath,\r\n      method: 'POST',\r\n      body: undefined,\r\n      oDataOptions,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Performs an approve operation on a content\r\n   * @param idOrPath The unique identifier or full path of the content to approve\r\n   * @param oDataOptions Optional OData options\r\n   * @returns {Promise<ODataResponse<T>>} A promise that will be resolved when the operation finished\r\n   */\r\n  public approve<T extends Content = Content>(idOrPath: number | string, oDataOptions?: ODataParams<T>) {\r\n    return this.repository.executeAction<undefined, ODataResponse<T>>({\r\n      name: 'Approve',\r\n      idOrPath,\r\n      method: 'POST',\r\n      body: undefined,\r\n      oDataOptions,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Performs a reject operation on a content\r\n   * @param idOrPath The unique identifier or full path of the content\r\n   * @param oDataOptions Optional OData options\r\n   * @returns {Promise<ODataResponse<T>>} A promise that will be resolved when the operation finished\r\n   */\r\n  public reject<T extends Content = Content>(\r\n    idOrPath: number | string,\r\n    rejectReason = '',\r\n    oDataOptions?: ODataParams<T>,\r\n  ) {\r\n    return this.repository.executeAction<{ rejectReason: string }, ODataResponse<T>>({\r\n      name: 'Reject',\r\n      idOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        rejectReason,\r\n      },\r\n      oDataOptions,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Performs a Publish operation on a content\r\n   * @param idOrPath The unique identifier or full path of the content to publish\r\n   * @param oDataOptions Optional OData options\r\n   * @returns {Promise<ODataResponse<T>>} A promise that will be resolved when the operation finished\r\n   */\r\n  public publish<T extends Content = Content>(idOrPath: number | string, oDataOptions?: ODataParams<T>) {\r\n    return this.repository.executeAction<undefined, ODataResponse<T>>({\r\n      name: 'Publish',\r\n      idOrPath,\r\n      method: 'POST',\r\n      body: undefined,\r\n      oDataOptions,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Performs a reject operation on a content\r\n   * @param idOrPath The unique identifier or full path of the content\r\n   * @param oDataOptions Optional OData options\r\n   * @returns {Promise<ODataResponse<T>>} A promise that will be resolved when the operation finished\r\n   */\r\n  public restoreVersion<T extends Content = Content>(\r\n    idOrPath: number | string,\r\n    version = '',\r\n    oDataOptions?: ODataParams<T>,\r\n  ) {\r\n    return this.repository.executeAction<{ version: string }, ODataResponse<T>>({\r\n      name: 'RestoreVersion',\r\n      idOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        version,\r\n      },\r\n      oDataOptions,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Lets administrators take over the lock of a checked out document from anotheruser.\r\n   * A new locker user can be provided using the 'user' parameter (user path or id as string).\r\n   * If left empty, the current user will take the lock.\r\n   * @param {number | string} idOrPath The locked content's identifier or full path\r\n   * @param {number | string | undefined} userIdOrPath Path or id of the new locker user. Will be the current user, if not provided\r\n   * @returns {Promise<void>} A promise that will be resolved when the operation finished.\r\n   */\r\n  public takeLockOver(idOrPath: number | string, userIdOrPath?: number | string) {\r\n    return this.repository.executeAction<any, void>({\r\n      name: 'TakeLockOver',\r\n      idOrPath,\r\n      method: 'POST',\r\n      body: {\r\n        user: userIdOrPath || null,\r\n      },\r\n    })\r\n  }\r\n\r\n  constructor(private readonly repository: Repository) {}\r\n}\r\n", "import { Disposable, PathHelper } from '@sensenet/client-utils'\r\nimport { ActionModel, GenericContent, Schema } from '@sensenet/default-content-types'\r\nimport { AuthenticationService } from '../Authentication/AuthenticationService'\r\nimport { BypassAuthentication } from '../Authentication/BypassAuthentication'\r\nimport { ODataSharingResponse } from '../Models'\r\nimport { Content, MovedContent } from '../Models/Content'\r\nimport { ODataBatchResponse } from '../Models/ODataBatchResponse'\r\nimport { ODataCollectionResponse } from '../Models/ODataCollectionResponse'\r\nimport { ODataParams } from '../Models/ODataParams'\r\nimport { ODataResponse } from '../Models/ODataResponse'\r\nimport { ODataWopiResponse } from '../Models/ODataWopiResponse'\r\nimport {\r\n  ActionOptions,\r\n  CopyOptions,\r\n  DeleteOptions,\r\n  GetActionOptions,\r\n  LoadCollectionOptions,\r\n  LoadOptions,\r\n  MoveOptions,\r\n  PatchOptions,\r\n  PostOptions,\r\n  PutOptions,\r\n  SharingOptions,\r\n} from '../Models/RequestOptions'\r\nimport { SchemaStore } from '../Schemas/SchemaStore'\r\nimport { AllowedChildTypes } from './AllowedChildTypes'\r\nimport { ConstantContent } from './ConstantContent'\r\nimport { ODataUrlBuilder } from './ODataUrlBuilder'\r\nimport { Preview } from './Preview'\r\nimport {\r\n  defaultRepositoryConfiguration,\r\n  RepositoryConfiguration,\r\n  RepositoryConfigurationWithDefaults,\r\n} from './RepositoryConfiguration'\r\nimport { Security } from './Security'\r\nimport { Upload } from './Upload'\r\nimport { Versioning } from './Versioning'\r\n\r\n/**\r\n * Defines an extended error message instance that contains an original error instance, a response and a parsed JSON body from the response\r\n */\r\nexport type ExtendedError = Error & {\r\n  body: any\r\n  response: Response\r\n  text?: string\r\n  statusCode: number\r\n  statusText: string\r\n  url: string\r\n}\r\n\r\n/**\r\n * Type guard to check if an error is extended with a response and a parsed body\r\n * @param e The error to check\r\n */\r\nexport const isExtendedError = (e: Error): e is ExtendedError => {\r\n  return (e as ExtendedError).response ? true : false\r\n}\r\n\r\n/**\r\n * Class that can be used as a main entry point to manipulate a sensenet content repository\r\n */\r\nexport class Repository implements Disposable {\r\n  /**\r\n   * Disposes the Repository object\r\n   */\r\n  public dispose() {\r\n    this.authentication.dispose()\r\n  }\r\n\r\n  /**\r\n   * Authentication service associated with the repository object\r\n   */\r\n  public authentication: AuthenticationService = new BypassAuthentication()\r\n\r\n  /**\r\n   * The configuration for the Repository object\r\n   */\r\n  public readonly configuration: RepositoryConfigurationWithDefaults\r\n\r\n  /**\r\n   * Async method that will be resolved when the Repository is ready to make HTTP calls\r\n   */\r\n  public async awaitReadyState(): Promise<void> {\r\n    await Promise.all([this.authentication.checkForUpdate()])\r\n  }\r\n\r\n  /**\r\n   * Wrapper for a native window.fetch method. The repository's readyState will be awaited and credentials will be included by default\r\n   * @param {RequestInfo} input The RequestInfo object\r\n   * @param {RequestInit} init Optional init parameters\r\n   */\r\n  public async fetch(input: RequestInfo, init?: RequestInit, awaitReadyState = true): Promise<Response> {\r\n    if (awaitReadyState) {\r\n      await this.awaitReadyState()\r\n    }\r\n    const request = new Request(input, init)\r\n    if (this.configuration.token) {\r\n      request.headers.append('Authorization', `Bearer ${this.configuration.token}`)\r\n    }\r\n    return await this.fetchMethod(request)\r\n  }\r\n\r\n  /**\r\n   * Gets a more meaningful error object from a specific response\r\n   * @param response The Response object to extract the message\r\n   */\r\n  public async getErrorFromResponse(response: Response): Promise<ExtendedError> {\r\n    let msgFromBody = ''\r\n    let body: any = {}\r\n    let text = ''\r\n    try {\r\n      body = await response.json()\r\n      msgFromBody = body.error.message.value\r\n    } catch (error) {\r\n      /** */\r\n    }\r\n\r\n    try {\r\n      text = await response.text()\r\n    } catch (error) {\r\n      /** */\r\n    }\r\n\r\n    const error = new Error(msgFromBody || text || response.statusText) as ExtendedError\r\n    error.body = body\r\n    error.response = response\r\n    error.text = text\r\n    error.statusCode = response.status\r\n    error.statusText = response.statusText\r\n    error.url = response.url\r\n\r\n    return error\r\n  }\r\n\r\n  /**\r\n   * Loads a content from the content repository. If used with a fully qualified content path,\r\n   * it will be transformed to an item path.\r\n   * @param options Options for the Load request\r\n   */\r\n  public async load<TContentType extends Content>(\r\n    options: LoadOptions<TContentType>,\r\n  ): Promise<ODataResponse<TContentType>> {\r\n    const contentPath = PathHelper.getContentUrl(options.idOrPath)\r\n    const params = ODataUrlBuilder.buildUrlParamString(this.configuration, options.oDataOptions)\r\n    const path = PathHelper.joinPaths(this.configuration.repositoryUrl, this.configuration.oDataToken, contentPath)\r\n    const response = await this.fetch(`${path}?${params}`, {\r\n      ...options.requestInit,\r\n      credentials: 'include',\r\n      method: 'GET',\r\n    })\r\n    if (!response.ok) {\r\n      throw await this.getErrorFromResponse(response)\r\n    }\r\n    return await response.json()\r\n  }\r\n\r\n  /**\r\n   * Loads a content collection from the repository\r\n   * @param options Options for the Load request\r\n   */\r\n  public async loadCollection<TContentType extends Content>(\r\n    options: LoadCollectionOptions<TContentType>,\r\n  ): Promise<ODataCollectionResponse<TContentType>> {\r\n    const params = ODataUrlBuilder.buildUrlParamString(this.configuration, options.oDataOptions)\r\n    const path = PathHelper.joinPaths(this.configuration.repositoryUrl, this.configuration.oDataToken, options.path)\r\n    const response = await this.fetch(`${path}?${params}`, {\r\n      ...options.requestInit,\r\n      credentials: 'include',\r\n      method: 'GET',\r\n    })\r\n    if (!response.ok) {\r\n      throw await this.getErrorFromResponse(response)\r\n    }\r\n    return await response.json()\r\n  }\r\n\r\n  /**\r\n   * Returns the count of items in the requested collection.\r\n   * The value depends on other optional query string parameters ($top, $skip, $filter, query, etc.) and does not depend on the $inlinecount parameter.\r\n   */\r\n  public async count<TContentType extends Content>(options: LoadCollectionOptions<TContentType>): Promise<number> {\r\n    const params = ODataUrlBuilder.buildUrlParamString(this.configuration, options.oDataOptions)\r\n    const path = PathHelper.joinPaths(this.configuration.repositoryUrl, this.configuration.oDataToken, options.path)\r\n    const response = await this.fetch(`${path}/$count?${params}`, {\r\n      ...options.requestInit,\r\n      credentials: 'include',\r\n      method: 'GET',\r\n    })\r\n    if (!response.ok) {\r\n      throw await this.getErrorFromResponse(response)\r\n    }\r\n    return await response.json()\r\n  }\r\n\r\n  /**\r\n   * Posts a new content to the content repository\r\n   * @param options Post request Options\r\n   */\r\n  public async post<TContentType extends Content>(\r\n    options: PostOptions<TContentType>,\r\n  ): Promise<ODataResponse<TContentType>> {\r\n    const path = PathHelper.joinPaths(\r\n      this.configuration.repositoryUrl,\r\n      this.configuration.oDataToken,\r\n      options.parentPath,\r\n    )\r\n    const params = ODataUrlBuilder.buildUrlParamString(this.configuration, options.oDataOptions)\r\n    const postBody: Partial<TContentType> & { __ContentType: string; __ContentTemplate?: string } = Object.assign(\r\n      {},\r\n      options.content,\r\n    ) as any\r\n    postBody.__ContentType = options.contentType\r\n    postBody.__ContentTemplate = options.contentTemplate\r\n\r\n    const response = await this.fetch(`${path}?${params}`, {\r\n      ...options.requestInit,\r\n      credentials: 'include',\r\n      method: 'POST',\r\n      body: JSON.stringify(postBody),\r\n    })\r\n    if (!response.ok) {\r\n      throw await this.getErrorFromResponse(response)\r\n    }\r\n    if (response.status === 204) {\r\n      return Promise.resolve({ d: null as any })\r\n    }\r\n    return await response.json()\r\n  }\r\n\r\n  /**\r\n   * Updates an existing content in the repository using OData Patch\r\n   * @param options Options for the Patch request\r\n   */\r\n  public async patch<TContentType extends Content>(\r\n    options: PatchOptions<TContentType>,\r\n  ): Promise<ODataResponse<TContentType>> {\r\n    const contentPath = PathHelper.getContentUrl(options.idOrPath)\r\n    const path = PathHelper.joinPaths(this.configuration.repositoryUrl, this.configuration.oDataToken, contentPath)\r\n    const params = ODataUrlBuilder.buildUrlParamString(this.configuration, options.oDataOptions)\r\n    const response = await this.fetch(`${path}?${params}`, {\r\n      ...options.requestInit,\r\n      credentials: 'include',\r\n      method: 'PATCH',\r\n      body: JSON.stringify(options.content),\r\n    })\r\n    if (!response.ok) {\r\n      throw await this.getErrorFromResponse(response)\r\n    }\r\n    return await response.json()\r\n  }\r\n\r\n  /**\r\n   * Updates an existing content in the repository using OData Put\r\n   * @param options Options for the Put request\r\n   */\r\n  public async put<TContentType extends Content>(\r\n    options: PutOptions<TContentType>,\r\n  ): Promise<ODataResponse<TContentType>> {\r\n    const contentPath = PathHelper.getContentUrl(options.idOrPath)\r\n    const path = PathHelper.joinPaths(this.configuration.repositoryUrl, this.configuration.oDataToken, contentPath)\r\n    const params = ODataUrlBuilder.buildUrlParamString(this.configuration, options.oDataOptions)\r\n    const response = await this.fetch(`${path}?${params}`, {\r\n      ...options.requestInit,\r\n      credentials: 'include',\r\n      method: 'PUT',\r\n      body: JSON.stringify(options.content),\r\n    })\r\n    if (!response.ok) {\r\n      throw await this.getErrorFromResponse(response)\r\n    }\r\n    return await response.json()\r\n  }\r\n\r\n  private createArray<T>(param: T[] | T): T[] {\r\n    if (!(param instanceof Array)) {\r\n      return [param]\r\n    }\r\n    return param\r\n  }\r\n\r\n  /**\r\n   * Deletes a content or a content collection from the Repository\r\n   * @param options Options for the Delete request\r\n   */\r\n  public async delete(options: DeleteOptions): Promise<ODataBatchResponse<Content>> {\r\n    return await this.executeAction<{}, ODataBatchResponse<Content>>({\r\n      idOrPath: ConstantContent.PORTAL_ROOT.Path,\r\n      method: 'POST',\r\n      name: 'DeleteBatch',\r\n      requestInit: options.requestInit,\r\n      body: {\r\n        paths: this.createArray(options.idOrPath),\r\n        permanent: options.permanent ?? false,\r\n      },\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Moves a content or content collection to a specified location\r\n   * @param options Options for the Move request\r\n   */\r\n  public async move(options: MoveOptions): Promise<ODataBatchResponse<MovedContent>> {\r\n    return await this.executeAction<{}, ODataBatchResponse<MovedContent>>({\r\n      idOrPath: ConstantContent.PORTAL_ROOT.Path,\r\n      method: 'POST',\r\n      name: 'MoveBatch',\r\n      requestInit: options.requestInit,\r\n      body: {\r\n        paths: this.createArray(options.idOrPath),\r\n        targetPath: options.targetPath,\r\n      },\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Copies a content or content collection to a specified location\r\n   * @param options Options for the Copy request\r\n   */\r\n  public async copy(options: CopyOptions): Promise<ODataBatchResponse<Content>> {\r\n    return await this.executeAction<{}, ODataBatchResponse<Content>>({\r\n      idOrPath: ConstantContent.PORTAL_ROOT.Path,\r\n      method: 'POST',\r\n      name: 'CopyBatch',\r\n      requestInit: options.requestInit,\r\n      body: {\r\n        paths: this.createArray(options.idOrPath),\r\n        targetPath: options.targetPath,\r\n      },\r\n    })\r\n  }\r\n\r\n  public async getPropertyValue(idOrPath: string | number, propertyName: string): Promise<string> {\r\n    const path = PathHelper.joinPaths(\r\n      this.configuration.repositoryUrl,\r\n      this.configuration.oDataToken,\r\n      PathHelper.getContentUrl(idOrPath),\r\n      propertyName,\r\n      '$value',\r\n    )\r\n    const response = await this.fetch(path)\r\n    if (!response.ok) {\r\n      throw await this.getErrorFromResponse(response)\r\n    }\r\n    return await response.text()\r\n  }\r\n\r\n  public async getMetadata(idOrPath?: string | number): Promise<any> {\r\n    const path =\r\n      idOrPath === undefined\r\n        ? PathHelper.joinPaths(this.configuration.repositoryUrl, this.configuration.oDataToken, '$metadata')\r\n        : PathHelper.joinPaths(\r\n            this.configuration.repositoryUrl,\r\n            this.configuration.oDataToken,\r\n            PathHelper.getContentUrl(idOrPath),\r\n            '$metadata',\r\n          )\r\n\r\n    const response = await this.fetch(`${path}?$format=json`)\r\n    if (!response.ok) {\r\n      throw await this.getErrorFromResponse(response)\r\n    }\r\n    return await response.json()\r\n  }\r\n\r\n  /**\r\n   * Shares a content or content collection with a specified\r\n   * @param options Options for the Copy request\r\n   */\r\n  public async share(options: SharingOptions): Promise<ODataSharingResponse> {\r\n    return await this.executeAction<{}, ODataSharingResponse>({\r\n      idOrPath: options.content.Id,\r\n      method: 'POST',\r\n      name: 'Share',\r\n      body: {\r\n        token: options.identity.toString(),\r\n        content: options.content,\r\n        level: options.sharingLevel,\r\n        mode: options.sharingMode,\r\n        sendNotification: options.sendNotification ?? true,\r\n      },\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retrieves a list of content actions for a specified content\r\n   * @param options Options for fetching the Custom Actions\r\n   */\r\n  public async getActions(options: GetActionOptions): Promise<{ d: { results: ActionModel[] } }> {\r\n    const contextPath = PathHelper.getContentUrl(options.idOrPath)\r\n    const path = PathHelper.joinPaths(\r\n      this.configuration.repositoryUrl,\r\n      this.configuration.oDataToken,\r\n      contextPath,\r\n      'Actions',\r\n    )\r\n    const response = await this.fetch(`${path}${options.scenario ? `?scenario=${options.scenario}` : ''}`, {\r\n      credentials: 'include',\r\n      method: 'GET',\r\n    })\r\n    if (!response.ok) {\r\n      throw await this.getErrorFromResponse(response)\r\n    }\r\n    return await response.json()\r\n  }\r\n\r\n  /**\r\n   * Returns data for loading Office document for editing\r\n   * @param idOrPath Id or path of the document\r\n   */\r\n  public async getWopiData(options: {\r\n    idOrPath: string | number\r\n    action?: 'edit' | 'view'\r\n    odataOptions?: ODataParams<GenericContent>\r\n    requestInit?: RequestInit\r\n  }): Promise<ODataWopiResponse> {\r\n    return await this.executeAction<{}, ODataWopiResponse>({\r\n      idOrPath: options.idOrPath,\r\n      method: 'GET',\r\n      name: 'GetWopiData',\r\n      requestInit: options.requestInit,\r\n      oDataOptions: {\r\n        ...options.odataOptions,\r\n        action: options.action || 'edit',\r\n      } as any,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Executes a specified custom OData action\r\n   * @param options Options for the Custom Action\r\n   */\r\n  public async executeAction<TBodyType, TReturns>(options: ActionOptions<TBodyType, any>): Promise<TReturns> {\r\n    const contextPath = PathHelper.getContentUrl(options.idOrPath)\r\n    let params = ODataUrlBuilder.buildUrlParamString(this.configuration, options.oDataOptions)\r\n    const path = PathHelper.joinPaths(\r\n      this.configuration.repositoryUrl,\r\n      this.configuration.oDataToken,\r\n      contextPath,\r\n      options.name,\r\n    )\r\n    const requestOptions: RequestInit = {\r\n      ...options.requestInit,\r\n      credentials: 'include',\r\n      method: options.method,\r\n    }\r\n    if (options.method === 'POST') {\r\n      requestOptions.body = JSON.stringify(options.body)\r\n    } else {\r\n      options.body &&\r\n        Object.keys(options.body).forEach(\r\n          (key) => (params += `&${key}=${encodeURIComponent((options.body as any)[key])}`),\r\n        )\r\n    }\r\n    const response = await this.fetch(`${path}?${params}`, requestOptions)\r\n    if (!response.ok) {\r\n      throw await this.getErrorFromResponse(response)\r\n    }\r\n    if (response.status === 204) {\r\n      return Promise.resolve({} as TReturns)\r\n    }\r\n    return await response.json()\r\n  }\r\n\r\n  /**\r\n   * Shortcut for security- and permission-related custom actions\r\n   */\r\n  public security: Security = new Security(this)\r\n\r\n  /**\r\n   * Shortcut for versioning related custom actions\r\n   */\r\n  public versioning: Versioning = new Versioning(this)\r\n\r\n  /**\r\n   * Shortcut for upload related custom actions\r\n   */\r\n  public upload: Upload = new Upload(this)\r\n\r\n  /**\r\n   * Shortcut for preview related custom actions\r\n   */\r\n  public preview: Preview = new Preview(this)\r\n\r\n  /**\r\n   * Shortcut for allowedChildTypes related custom actions\r\n   */\r\n  public allowedChildTypes: AllowedChildTypes = new AllowedChildTypes(this)\r\n\r\n  /**\r\n   * Reloads the content schemas from the sensenet backend\r\n   * @returns {Promise<void>} A promise that will be resolved / rejected based on the action success\r\n   */\r\n  public async reloadSchema() {\r\n    const schemas = await this.executeAction<undefined, Schema[]>({\r\n      idOrPath: 'Root',\r\n      name: 'GetSchema',\r\n      method: 'GET',\r\n      body: undefined,\r\n    })\r\n    this.schemas.setSchemas(schemas)\r\n  }\r\n\r\n  constructor(\r\n    config?: RepositoryConfiguration,\r\n    private fetchMethod: WindowOrWorkerGlobalScope['fetch'] = window && window.fetch && window.fetch.bind(window),\r\n    public schemas: SchemaStore = new SchemaStore(),\r\n  ) {\r\n    this.configuration = { ...defaultRepositoryConfiguration, ...config }\r\n    this.schemas.setSchemas(this.configuration.schemas)\r\n  }\r\n}\r\n", "import { ObservableValue } from '@sensenet/client-utils'\r\nimport { GenericContent, User } from '@sensenet/default-content-types'\r\nimport { Content } from './Content'\r\nimport { ODataParams } from './ODataParams'\r\nimport { UploadProgressInfo } from './UploadProgressInfo'\r\n\r\n/**\r\n * Request options with OData Model\r\n */\r\nexport interface WithOdataOptions<T> {\r\n  /**\r\n   * An OData Options object\r\n   */\r\n  oDataOptions?: ODataParams<T>\r\n}\r\n\r\n/**\r\n * Request options with Request Init parameter\r\n */\r\nexport interface WithRequestInit {\r\n  /**\r\n   * Additional fetch request init options\r\n   */\r\n  requestInit?: RequestInit\r\n}\r\n\r\n/**\r\n * Defines options for a Load request\r\n */\r\nexport interface LoadOptions<TContentType> extends WithOdataOptions<TContentType>, WithRequestInit {\r\n  /**\r\n   * The content Id or path to load\r\n   */\r\n  idOrPath: string | number\r\n\r\n  /**\r\n   * Optional content version parameter\r\n   */\r\n  version?: string\r\n}\r\n\r\n/**\r\n * Defines options for a collection load request\r\n */\r\nexport interface LoadCollectionOptions<TContentType> extends WithOdataOptions<TContentType>, WithRequestInit {\r\n  /**\r\n   * The collection path\r\n   */\r\n  path: string\r\n}\r\n\r\n/**\r\n * Defines options for a Post request\r\n */\r\nexport interface PostOptions<TContentType> extends WithOdataOptions<TContentType>, WithRequestInit {\r\n  /**\r\n   * Path for a parent content\r\n   */\r\n  parentPath: string\r\n  /**\r\n   * Content data to post. The content type is required.\r\n   */\r\n  content: Partial<TContentType>\r\n\r\n  /**\r\n   * Type name for the content\r\n   */\r\n  contentType: string\r\n\r\n  /**\r\n   * An optional content template\r\n   */\r\n  contentTemplate?: string\r\n}\r\n\r\n/**\r\n * Defines options for a patch request\r\n */\r\nexport interface PatchOptions<TContentType> extends WithOdataOptions<TContentType>, WithRequestInit {\r\n  /**\r\n   * The id or path to the content that you want to patch\r\n   */\r\n  idOrPath: string | number\r\n  /**\r\n   * The content data to update\r\n   */\r\n  content: Partial<TContentType>\r\n  /**\r\n   * Force content list refresh\r\n   */\r\n  forceRefresh?: boolean\r\n}\r\n\r\n/**\r\n * Defines options for a Put request\r\n */\r\nexport interface PutOptions<TContentType> extends WithOdataOptions<TContentType>, WithRequestInit {\r\n  /**\r\n   * The id or path to the content that you want to update\r\n   */\r\n  idOrPath: string | number\r\n  /**\r\n   * The new content data\r\n   */\r\n  content: Partial<TContentType>\r\n  /**\r\n   * Force content list refresh\r\n   */\r\n  forceRefresh?: boolean\r\n}\r\n\r\n/**\r\n * Options for a delete request\r\n */\r\nexport interface DeleteOptions extends WithRequestInit {\r\n  /**\r\n   * The id(s) or path(list) for a content(s) to delete\r\n   */\r\n  idOrPath: string | number | Array<number | string>\r\n  /**\r\n   * Permantent flag for a delete request\r\n   */\r\n  permanent?: boolean\r\n}\r\n\r\n/**\r\n * Options for a content move request\r\n */\r\nexport interface MoveOptions extends WithRequestInit {\r\n  /**\r\n   * The id(s) or path(list) for a content(s) to move\r\n   */\r\n  idOrPath: string | number | Array<number | string>\r\n  /**\r\n   * The target path to move\r\n   */\r\n  targetPath: string\r\n  /**\r\n   * Optional content to call the action\r\n   */\r\n  rootContent?: Content\r\n}\r\n\r\n/**\r\n * Options for a content copy request\r\n */\r\nexport interface CopyOptions extends WithRequestInit {\r\n  /**\r\n   * The id(s) or path(list) for a content(s) to copy\r\n   */\r\n  idOrPath: string | number | Array<number | string>\r\n  /**\r\n   * Path of a target content\r\n   */\r\n  targetPath: string\r\n  /**\r\n   * Optional content to call the action\r\n   */\r\n  rootContent?: Content\r\n}\r\n\r\n/**\r\n * Options to call an odata action\r\n */\r\nexport interface ActionOptions<TBody, TContentType> extends WithOdataOptions<TContentType>, WithRequestInit {\r\n  /**\r\n   * The name of the odata action\r\n   */\r\n  name: string\r\n  /**\r\n   * The http method\r\n   */\r\n  method: 'GET' | 'POST'\r\n  /**\r\n   * The context content for the action\r\n   */\r\n  idOrPath: string | number\r\n  /**\r\n   * Additional body parameters\r\n   */\r\n  body?: TBody\r\n}\r\n\r\n/**\r\n * Options for fetching content actions\r\n */\r\nexport interface GetActionOptions {\r\n  /**\r\n   * The content Id or path\r\n   */\r\n  idOrPath: string | number\r\n\r\n  /**\r\n   * An optional Scenario parameter\r\n   */\r\n  scenario?: string\r\n}\r\n\r\n/**\r\n * Options for uploading content\r\n */\r\nexport interface UploadOptions<T> extends WithOdataOptions<T>, WithRequestInit {\r\n  /**\r\n   * The name of the content type, e.g.: File\r\n   */\r\n  contentTypeName?: string\r\n  /**\r\n   * Name of the binary property on the content, e.g.: Binary\r\n   */\r\n  binaryPropertyName: string\r\n  /**\r\n   * Enable overwriting a file if already exists\r\n   */\r\n  overwrite: boolean\r\n  /**\r\n   * Additional post body options\r\n   */\r\n  body?: any\r\n\r\n  /**\r\n   * The path of the parent content\r\n   */\r\n  parentPath: string\r\n\r\n  /**\r\n   * Optional observable that will be updated with the upload progress\r\n   */\r\n  progressObservable?: ObservableValue<UploadProgressInfo>\r\n}\r\n\r\n/**\r\n * Options for uploading a File into the repository\r\n */\r\nexport interface UploadFileOptions<T> extends UploadOptions<T> {\r\n  /**\r\n   * The File instance\r\n   */\r\n  file: File\r\n  /**\r\n   * The name of the File object. Overwriting this can be used to change a content's binary.\r\n   */\r\n  fileName?: string\r\n}\r\n\r\n/**\r\n * Options for uploading a text as a binary file into the repository\r\n */\r\nexport interface UploadTextOptions<T> extends UploadOptions<T> {\r\n  /**\r\n   * The text to be uploaded\r\n   */\r\n  text: string\r\n  /**\r\n   * The name of the File object\r\n   */\r\n  fileName: string\r\n}\r\n\r\n/**\r\n * Options for uploading content from a drop event\r\n */\r\nexport interface UploadFromEventOptions<T extends Content> extends UploadOptions<T> {\r\n  /**\r\n   * The path of the parent content item\r\n   */\r\n  parentPath: string\r\n\r\n  /**\r\n   * The DragEvent to work with. File data will be extracted from it's 'dataTransfer' item.\r\n   */\r\n  event: DragEvent\r\n  /**\r\n   * Option if folders should be created as well.\r\n   */\r\n  createFolders: boolean\r\n}\r\n\r\n/**\r\n * Options for uploading files from a FileList object\r\n */\r\nexport interface UploadFromFileListOptions<T extends Content> extends UploadOptions<T> {\r\n  /**\r\n   * The FileList object\r\n   */\r\n  fileList: FileList\r\n  /**\r\n   * Option to create folders. Files will be uploaded to the root\r\n   */\r\n  createFolders: boolean\r\n}\r\n\r\nexport enum SharingLevel {\r\n  Open = 'Open',\r\n  Edit = 'Edit',\r\n}\r\n\r\nexport enum SharingMode {\r\n  Private = 'Private',\r\n  Authenticated = 'Authenticated',\r\n  Public = 'Public',\r\n}\r\n\r\n/**\r\n * Options for a content share request\r\n */\r\nexport interface SharingOptions extends WithRequestInit {\r\n  /**\r\n   * Content that will be shared\r\n   */\r\n  content: GenericContent\r\n  /**\r\n   * Email of the person or Id of the user whom the content will be shared with\r\n   */\r\n  identity: string | User\r\n  /**\r\n   * ‘permission set’ that want to be allowed for the target user (open, edit)\r\n   */\r\n  sharingLevel: SharingLevel\r\n  /**\r\n   * Determine who will get permissions to access the content\r\n   */\r\n  sharingMode: SharingMode\r\n  /**\r\n   * Determine if people will get a notification that something is shared with them or not. By default it is true.\r\n   */\r\n  sendNotification?: boolean\r\n}\r\n"],
  "mappings": "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",
  "names": ["resolve", "f", "Semaphore", "Lock", "Reflect", "hasOwn", "f", "MapIterator", "Map", "Set", "WeakMap", "Injector", "options", "cachedSingletons", "Map", "remove", "ctor", "delete", "logger", "getInstance", "LoggerCollection", "useLogging", "loggers", "loggerInstances", "map", "l", "collection", "attachLogger", "setExplicitInstance", "dispose", "singletons", "Array", "from", "entries", "e", "disposeRequests", "filter", "s", "Promise", "resolve", "all", "clear", "dependencies", "constructor", "meta", "get", "Error", "name", "d", "join", "includes", "lifetime", "invalidDeps", "dep", "m", "i", "length", "has", "fromParent", "parent", "deps", "newInstance", "instance", "key", "Reflect", "getMetadata", "set", "param", "defaultInjectableOptions", "createChild", "defaultInjectableOptions", "lifetime", "Injectable", "options", "ctor", "meta", "Reflect", "getMetadata", "metaValue", "dependencies", "map", "param", "Injector", "set", "AbstractLoggerScope", "AbstractLogger", "withScope", "scope", "addEntry", "entry", "verbose", "debug", "information", "warning", "error", "fatal", "addEntryInternal", "isVerbose", "message", "data", "level", "LogLevel", "Verbose", "Debug", "Information", "Warning", "Error", "originalEntry", "Fatal", "colors", "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkgrey", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "green", "greenyellow", "grey", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightgrey", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightslategrey", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "slategrey", "snow", "springgreen", "steelblue", "tan", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen", "Reset", "FgRed", "FgGreen", "FgYellow", "FgBlue", "getLevelColor", "level", "isBrowser", "color", "LogLevel", "Verbose", "colors", "darkblue", "FgBlue", "Debug", "Information", "darkgreen", "FgGreen", "Warning", "darkorange", "FgYellow", "Error", "darkred", "FgRed", "defaultFormatter", "entry", "isVerbose", "fontColor", "formattedEntry", "Reset", "scope", "message", "data", "browserFormatter", "ConsoleLogger", "Injectable", "lifetime", "AbstractLogger", "addEntry", "console", "log", "BrowserConsoleLogger", "LogLevel", "LoggerCollection", "_dec", "Injectable", "lifetime", "_class", "AbstractLogger", "loggers", "addEntry", "entry", "promises", "map", "l", "Promise", "all", "attachLogger", "push", "ValueObserver", "dispose", "observable", "unsubscribe", "constructor", "callback", "ObservableValue", "dispose", "observers", "clear", "subscribe", "callback", "getLast", "observer", "ValueObserver", "add", "currentValue", "unsubscribe", "delete", "getValue", "setValue", "newValue", "subscription", "getObservers", "Array", "from", "constructor", "initialValue", "Set", "NotificationService", "_dec", "Injectable", "lifetime", "_class", "activeMessages", "ObservableValue", "add", "newMessage", "setValue", "getValue", "filter", "message", "level", "dismiss", "oldItem", "JSON", "stringify", "NotificationLogger", "_dec", "Injectable", "lifetime", "_dec2", "_dec3", "_class", "AbstractLogger", "useLogLevels", "loglevels", "logLevels", "addEntry", "entry", "includes", "LogLevel", "level", "notificationService", "add", "constructor", "filterAsync", "values", "callbackFn", "returns", "value", "push", "Array", "prototype", "filterAsync", "callbackFn", "PathHelper", "trimSlashes", "path", "endsWith", "substring", "length", "startsWith", "ensureDefaultSchema", "validUrl", "RegExp", "test", "getSegments", "splitted", "split", "filter", "Boolean", "lastItem", "pop", "Error", "matches", "match", "lastSegmentBeforeColumn", "isItemSegment", "segment", "isItemPath", "segments", "itemSegment", "find", "s", "getContentUrl", "idOrPath", "parsed", "parseInt", "isNaN", "getContentUrlByPath", "toString", "getContentUrlbyId", "join", "id", "joinPaths", "args", "map", "isAncestorOf", "ancestorPath", "descendantPath", "trimmedDescendantPath", "trimmedAncestorPath", "indexOf", "isInSubTree", "currentPath", "treeRoot", "regexp", "getParentPath", "RetrierOptions", "retries", "RETRIES_DEFAULT", "retryIntervalMs", "timeoutMsValue", "onTry", "onSuccess", "onFail", "Retries", "v", "RetryIntervalMs", "undefined", "RETRY_INTERVAL_MS_DEFAULT", "timeoutMs", "TIMEOUT_MS_DEFAULT", "Trace", "getMethodTrace", "object", "methodName", "objectTrace", "objectTraces", "get", "methodMappings", "traceStart", "methodTrace", "args", "startDateTime", "Date", "traceValue", "methodArguments", "callObservable", "setValue", "traceFinished", "callTrace", "returned", "finishedTrace", "finishedDateTime", "finishedObservable", "traceError", "error", "errorTrace", "errorDateTime", "errorObservable", "callMethod", "start", "originalMethod", "call", "callMethodAsync", "method", "options", "has", "set", "Map", "isTraced", "overriddenMethod", "isAsync", "Object", "defineProperty", "value", "ObservableValue", "callbacks", "onCalled", "subscribe", "onFinished", "onError", "dispose", "forEach", "c", "ConstantContent", "VISITOR_USER", "Id", "DisplayName", "Domain", "Name", "Path", "LoginName", "Type", "PORTAL_ROOT", "EMPTY_CONTENT", "LoginState", "BypassAuthentication", "state", "ObservableValue", "LoginState", "Unknown", "currentUser", "ConstantContent", "VISITOR_USER", "checkForUpdate", "login", "Error", "logout", "dispose", "ODataUrlBuilder", "combineODataFieldParameters", "params", "filtered", "filter", "Boolean", "flatten", "reduce", "previousValue", "currentValue", "concat", "Set", "buildUrlParamString", "config", "options", "oDataParams", "requiredSelect", "defaultSelect", "select", "undefined", "metadata", "defaultMetadata", "inlinecount", "defaultInlineCount", "expand", "defaultExpand", "top", "defaultTop", "enableautofilters", "defaultEnableAutofilters", "enablelifespanfilter", "defaultEnableLifespanfilter", "segments", "key", "name", "ODATA_PARAMS", "includes", "plainValue", "parsedValue", "Array", "length", "map", "v", "join", "toString", "push", "value", "s", "encodeURIComponent", "SchemaStore", "schemas", "ObservableValue", "byNameSchemaCache", "Map", "subscribeToSchemas", "callback", "subscribe", "setSchemas", "newSchemas", "clear", "setValue", "mergeFieldSettings", "currentFieldSettings", "parentFieldSettings", "currentFieldSettingsMap", "forEach", "s", "set", "Name", "parentFieldSettingsMap", "keys", "Set", "Array", "from", "map", "key", "get", "getSchemaByName", "contentTypeName", "has", "Object", "assign", "schema", "getValue", "find", "ContentTypeName", "parentSchema", "ParentTypeName", "FieldSettings", "getFieldTypeByName", "fieldName", "schemasCopy", "reduce", "_", "fieldType", "fieldSetting", "Type", "length", "undefined", "isContentFromType", "content", "currentSchema", "schemaIsDescendantOf", "child", "parent", "getTypesFromSchema", "contentTypes", "toString", "AllowedChildTypes", "add", "idOrPath", "contentTypes", "repository", "executeAction", "name", "method", "body", "update", "patch", "content", "remove", "getFromCTD", "select", "listEmpty", "get", "options", "allowedTypes", "d", "__count", "results", "Promise", "all", "getImplicit", "getExplicit", "then", "implicitACTs", "explicitACTs", "filter", "ct", "find", "contenttype", "Name", "concat", "length", "contextPath", "PathHelper", "getContentUrl", "params", "ODataUrlBuilder", "buildUrlParamString", "configuration", "oDataOptions", "path", "joinPaths", "repositoryUrl", "oDataToken", "response", "fetch", "credentials", "ok", "getErrorFromResponse", "json", "constructor", "Preview", "regenerate", "options", "repository", "executeAction", "name", "idOrPath", "method", "body", "undefined", "requestInit", "signal", "abortController", "available", "responseBody", "document", "oDataOptions", "version", "page", "PreviewAvailable", "PreviewImageUrl", "hostName", "ThumbnailImageUrl", "replace", "getExistingImages", "pageCount", "Error", "response", "select", "expand", "availablePreviews", "map", "preview", "allPreviews", "i", "Index", "getPageCount", "check", "generateMissing", "getComments", "addComment", "comment", "deleteComment", "id", "commentId", "constructor", "FieldVisibility", "OutputMethod", "DisplayChoice", "DateTimeMode", "DateTimePrecision", "SchemaStore", "ContentTypeName", "DisplayName", "Description", "Icon", "AllowedChildTypes", "FieldSettings", "Type", "Name", "FieldClassName", "ReadOnly", "Compulsory", "VisibleBrowse", "FieldVisibility", "Hide", "VisibleEdit", "VisibleNew", "Show", "IsText", "DefaultValue", "DateTimeMode", "DateAndTime", "HandlerName", "ControlHint", "AllowExtraValue", "AllowMultiple", "Options", "Value", "Text", "Enabled", "Selected", "DisplayChoice", "DropDown", "EnumTypeName", "Range", "Split", "AllowedTypes", "OutputMethod", "ParentTypeName", "SelectionRoots", "TextType", "MinValue", "FieldIndex", "MaxValue", "ShowAsPercentage", "RadioButtons", "MaxLength", "Regex", "ReenterTitle", "ReenterDescription", "PasswordHistoryLength", "Date", "VersioningMode", "InheritableVersioningMode", "ApprovingMode", "InheritableApprovingMode", "SavingState", "GroupAttachments", "EnableAutofilters", "EnableLifespanFilter", "Language", "MemoType", "Priority", "Status", "QueryType", "Gender", "MaritalStatus", "EventType", "IdentityKind", "PermissionLevel", "PermissionValues", "undefined", "allow", "deny", "permissionKeys", "Object", "keys", "Inheritance", "DEFAULT_SERVICE_TOKEN", "defaultRepositoryConfiguration", "chunkSize", "defaultEnableAutofilters", "defaultEnableLifespanfilter", "defaultInlineCount", "defaultMetadata", "defaultSelect", "defaultTop", "oDataToken", "repositoryUrl", "requiredSelect", "schemas", "SchemaStore", "identityServerUrl", "Security", "constructor", "repository", "setPermissions", "idOrPath", "permissionRequestBody", "executeAction", "name", "method", "body", "r", "getAllPermissions", "contentIdOrPath", "undefined", "getAcl", "getPermissionsForIdentity", "identityPath", "identity", "getRelatedIdentities", "options", "permissionLevel", "level", "indentityKind", "kind", "oDataOptions", "getRelatedPermissions", "explicitOnly", "memberPath", "includedTypes", "getRelatedItems", "member", "permissions", "getRelatedIdentitiesByPermissions", "identityKind", "getRelatedItemsOneLevel", "getAllowedUsers", "getParentGroups", "directOnly", "requestInit", "addMembers", "contentIds", "removeMembers", "hasPermission", "params", "join", "path", "PathHelper", "joinPaths", "configuration", "repositoryUrl", "oDataToken", "getContentUrl", "response", "fetch", "ok", "text", "getErrorFromResponse", "Upload", "constructor", "repository", "textAsFile", "options", "uploadFileOptions", "Object", "assign", "file", "File", "text", "fileName", "isChunkedUploadNeeded", "uploadChunked", "uploadNonChunked", "size", "configuration", "chunkSize", "getUploadUrl", "PathHelper", "joinPaths", "repositoryUrl", "oDataToken", "getContentUrl", "parentPath", "getFormDataFromOptions", "formData", "FormData", "append", "name", "overwrite", "toString", "binaryPropertyName", "contentTypeName", "guid", "v1", "responseContent", "progressObservable", "setValue", "completed", "response", "fetch", "requestInit", "credentials", "method", "body", "ok", "json", "chunkCount", "uploadedChunks", "createdContent", "getErrorFromResponse", "error", "Math", "floor", "uploadPath", "slice", "initRequest", "headers", "encodeURIComponent", "chunkToken", "lastResponseContent", "i", "start", "end", "chunkFormData", "chunkData", "lastResponse", "webkitFileHandler", "fileEntry", "contentPath", "Promise", "resolve", "reject", "f", "err", "webkitDirectoryHandler", "directory", "readEntries", "folder", "post", "content", "Name", "contentType", "dirReader", "createReader", "items", "webkitItemListHandler", "d", "Path", "createFolders", "item", "isDirectory", "isFile", "fromDropEvent", "window", "webkitRequestFileSystem", "entries", "event", "dataTransfer", "map", "call", "webkitGetAsEntry", "files", "forEach", "type", "fromFileList", "directories", "Set", "Array", "from", "fileList", "getParentPath", "webkitRelativePath", "fullPath", "directoriesBySegments", "getSegments", "createdDirectories", "currentPath", "segment", "pathToCreate", "has", "add", "all", "uploadOptions", "Versioning", "getVersions", "idOrPath", "oDataOptions", "repository", "loadCollection", "path", "PathHelper", "joinPaths", "getContentUrl", "checkOut", "executeAction", "name", "method", "body", "undefined", "checkIn", "checkInComments", "undoCheckOut", "forceUndoCheckOut", "approve", "reject", "rejectReason", "publish", "restoreVersion", "version", "takeLockOver", "userIdOrPath", "user", "constructor", "isExtendedError", "e", "response", "Repository", "dispose", "authentication", "awaitReadyState", "Promise", "all", "checkForUpdate", "fetch", "input", "init", "request", "Request", "configuration", "token", "headers", "append", "fetchMethod", "getErrorFromResponse", "msgFromBody", "body", "text", "json", "error", "message", "value", "Error", "statusText", "statusCode", "status", "url", "load", "options", "contentPath", "PathHelper", "getContentUrl", "idOrPath", "params", "ODataUrlBuilder", "buildUrlParamString", "oDataOptions", "path", "joinPaths", "repositoryUrl", "oDataToken", "requestInit", "credentials", "method", "ok", "loadCollection", "count", "post", "parentPath", "postBody", "Object", "assign", "content", "__ContentType", "contentType", "__ContentTemplate", "contentTemplate", "JSON", "stringify", "resolve", "d", "patch", "put", "createArray", "param", "Array", "delete", "executeAction", "ConstantContent", "PORTAL_ROOT", "Path", "name", "paths", "permanent", "move", "targetPath", "copy", "getPropertyValue", "propertyName", "getMetadata", "undefined", "share", "Id", "identity", "toString", "level", "sharingLevel", "mode", "sharingMode", "sendNotification", "getActions", "contextPath", "scenario", "getWopiData", "odataOptions", "action", "requestOptions", "keys", "forEach", "key", "encodeURIComponent", "reloadSchema", "schemas", "setSchemas", "constructor", "config", "window", "bind", "SchemaStore", "BypassAuthentication", "security", "Security", "versioning", "Versioning", "upload", "Upload", "preview", "Preview", "allowedChildTypes", "AllowedChildTypes", "defaultRepositoryConfiguration", "FormsAuthenticationService", "Setup", "repository", "loadUserOptions", "service", "getCurrentUser", "constructor", "userLoadOptions", "select", "statusLock", "Semaphor", "state", "ObservableValue", "LoginState", "Unknown", "currentUser", "ConstantContent", "VISITOR_USER", "authentication", "dispose", "checkForUpdate", "acquire", "setValue", "Pending", "result", "loadCollection", "path", "PORTAL_ROOT", "Path", "oDataOptions", "query", "top", "d", "__count", "results", "Id", "Authenticated", "Unauthenticated", "release", "login", "username", "password", "user", "executeAction", "body", "method", "idOrPath", "name", "isVisitor", "error", "logout", "SharingLevel", "SharingMode"]
}
